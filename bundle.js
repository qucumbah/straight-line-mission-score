(()=>{var t={259:(t,e,s)=>{"use strict";const i=s(849).buildOptions,n={attributeNamePrefix:"@_",attrNodeName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataTagName:!1,cdataPositionChar:"\\c",format:!1,indentBy:"  ",supressEmptyNode:!1,tagValueProcessor:function(t){return t},attrValueProcessor:function(t){return t}},a=["attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","cdataTagName","cdataPositionChar","format","indentBy","supressEmptyNode","tagValueProcessor","attrValueProcessor"];function r(t){this.options=i(t,n,a),this.options.ignoreAttributes||this.options.attrNodeName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=f),this.options.cdataTagName?this.isCDATA=g:this.isCDATA=function(){return!1},this.replaceCDATAstr=o,this.replaceCDATAarr=h,this.options.format?(this.indentate=d,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine=""),this.options.supressEmptyNode?(this.buildTextNode=p,this.buildObjNode=u):(this.buildTextNode=c,this.buildObjNode=l),this.buildTextValNode=c,this.buildObjectNode=l}function o(t,e){return t=this.options.tagValueProcessor(""+t),""===this.options.cdataPositionChar||""===t?t+"<![CDATA["+e+"]]"+this.tagEndChar:t.replace(this.options.cdataPositionChar,"<![CDATA["+e+"]]"+this.tagEndChar)}function h(t,e){if(t=this.options.tagValueProcessor(""+t),""===this.options.cdataPositionChar||""===t)return t+"<![CDATA["+e.join("]]><![CDATA[")+"]]"+this.tagEndChar;for(let s in e)t=t.replace(this.options.cdataPositionChar,"<![CDATA["+e[s]+"]]>");return t+this.newLine}function l(t,e,s,i){return s&&!t.includes("<")?this.indentate(i)+"<"+e+s+">"+t+"</"+e+this.tagEndChar:this.indentate(i)+"<"+e+s+this.tagEndChar+t+this.indentate(i)+"</"+e+this.tagEndChar}function u(t,e,s,i){return""!==t?this.buildObjectNode(t,e,s,i):this.indentate(i)+"<"+e+s+"/"+this.tagEndChar}function c(t,e,s,i){return this.indentate(i)+"<"+e+s+">"+this.options.tagValueProcessor(t)+"</"+e+this.tagEndChar}function p(t,e,s,i){return""!==t?this.buildTextValNode(t,e,s,i):this.indentate(i)+"<"+e+s+"/"+this.tagEndChar}function d(t){return this.options.indentBy.repeat(t)}function f(t){return!!t.startsWith(this.options.attributeNamePrefix)&&t.substr(this.attrPrefixLen)}function g(t){return t===this.options.cdataTagName}r.prototype.parse=function(t){return this.j2x(t,0).val},r.prototype.j2x=function(t,e){let s="",i="";const n=Object.keys(t),a=n.length;for(let r=0;r<a;r++){const a=n[r];if(void 0===t[a]);else if(null===t[a])i+=this.indentate(e)+"<"+a+"/"+this.tagEndChar;else if(t[a]instanceof Date)i+=this.buildTextNode(t[a],a,"",e);else if("object"!=typeof t[a]){const n=this.isAttribute(a);n?s+=" "+n+'="'+this.options.attrValueProcessor(""+t[a])+'"':this.isCDATA(a)?t[this.options.textNodeName]?i+=this.replaceCDATAstr(t[this.options.textNodeName],t[a]):i+=this.replaceCDATAstr("",t[a]):a===this.options.textNodeName?t[this.options.cdataTagName]||(i+=this.options.tagValueProcessor(""+t[a])):i+=this.buildTextNode(t[a],a,"",e)}else if(Array.isArray(t[a]))if(this.isCDATA(a))i+=this.indentate(e),t[this.options.textNodeName]?i+=this.replaceCDATAarr(t[this.options.textNodeName],t[a]):i+=this.replaceCDATAarr("",t[a]);else{const s=t[a].length;for(let n=0;n<s;n++){const s=t[a][n];if(void 0===s);else if(null===s)i+=this.indentate(e)+"<"+a+"/"+this.tagEndChar;else if("object"==typeof s){const t=this.j2x(s,e+1);i+=this.buildObjNode(t.val,a,t.attrStr,e)}else i+=this.buildTextNode(s,a,"",e)}}else if(this.options.attrNodeName&&a===this.options.attrNodeName){const e=Object.keys(t[a]),i=e.length;for(let n=0;n<i;n++)s+=" "+e[n]+'="'+this.options.attrValueProcessor(""+t[a][e[n]])+'"'}else{const s=this.j2x(t[a],e+1);i+=this.buildObjNode(s.val,a,s.attrStr,e)}}return{attrStr:s,val:i}},t.exports=r},398:(t,e,s)=>{"use strict";const i=function(t){return String.fromCharCode(t)},n={nilChar:i(176),missingChar:i(201),nilPremitive:i(175),missingPremitive:i(200),emptyChar:i(178),emptyValue:i(177),boundryChar:i(179),objStart:i(198),arrStart:i(204),arrayEnd:i(185)},a=[n.nilChar,n.nilPremitive,n.missingChar,n.missingPremitive,n.boundryChar,n.emptyChar,n.emptyValue,n.arrayEnd,n.objStart,n.arrStart],r=function(t,e,s){if("string"==typeof e)return t&&t[0]&&void 0!==t[0].val?o(t[0].val,e):o(t,e);{const a=void 0===(i=t)?n.missingChar:null===i?n.nilChar:!(i.child&&0===Object.keys(i.child).length&&(!i.attrsMap||0===Object.keys(i.attrsMap).length))||n.emptyChar;if(!0===a){let i="";if(Array.isArray(e)){i+=n.arrStart;const a=e[0],l=t.length;if("string"==typeof a)for(let e=0;e<l;e++){const s=o(t[e].val,a);i=h(i,s)}else for(let e=0;e<l;e++){const n=r(t[e],a,s);i=h(i,n)}i+=n.arrayEnd}else{i+=n.objStart;const a=Object.keys(e);Array.isArray(t)&&(t=t[0]);for(let n in a){const o=a[n];let l;l=!s.ignoreAttributes&&t.attrsMap&&t.attrsMap[o]?r(t.attrsMap[o],e[o],s):o===s.textNodeName?r(t.val,e[o],s):r(t.child[o],e[o],s),i=h(i,l)}}return i}return a}var i},o=function(t){switch(t){case void 0:return n.missingPremitive;case null:return n.nilPremitive;case"":return n.emptyValue;default:return t}},h=function(t,e){return l(e[0])||l(t[t.length-1])||(t+=n.boundryChar),t+e},l=function(t){return-1!==a.indexOf(t)},u=s(543),c=s(849).buildOptions;e.convert2nimn=function(t,e,s){return s=c(s,u.defaultOptions,u.props),r(t,e,s)}},284:(t,e,s)=>{"use strict";const i=s(849),n=function(t,e){const s={};if(!(t.child&&!i.isEmptyObject(t.child)||t.attrsMap&&!i.isEmptyObject(t.attrsMap)))return i.isExist(t.val)?t.val:"";i.isExist(t.val)&&("string"!=typeof t.val||""!==t.val&&t.val!==e.cdataPositionChar)&&("strict"===e.arrayMode?s[e.textNodeName]=[t.val]:s[e.textNodeName]=t.val),i.merge(s,t.attrsMap,e.arrayMode);const a=Object.keys(t.child);for(let i=0;i<a.length;i++){var r=a[i];if(t.child[r]&&t.child[r].length>1)for(var o in s[r]=[],t.child[r])s[r].push(n(t.child[r][o],e));else if(!0===e.arrayMode){const i=n(t.child[r][0],e);s[r]="object"==typeof i?[i]:i}else"strict"===e.arrayMode?s[r]=[n(t.child[r][0],e)]:s[r]=n(t.child[r][0],e)}return s};e.convertToJson=n},702:(t,e,s)=>{"use strict";const i=s(849),n=s(849).buildOptions,a=s(543),r=function(t,e,s){let n="{";const a=Object.keys(t.child);for(let s=0;s<a.length;s++){var o=a[s];if(t.child[o]&&t.child[o].length>1){for(var h in n+='"'+o+'" : [ ',t.child[o])n+=r(t.child[o][h],e)+" , ";n=n.substr(0,n.length-1)+" ] "}else n+='"'+o+'" : '+r(t.child[o][0],e)+" ,"}return i.merge(n,t.attrsMap),i.isEmptyObject(n)?i.isExist(t.val)?t.val:"":(i.isExist(t.val)&&("string"!=typeof t.val||""!==t.val&&t.val!==e.cdataPositionChar)&&(n+='"'+e.textNodeName+'" : '+(!0!==(l=t.val)&&!1!==l&&isNaN(l)?'"'+l+'"':l)),","===n[n.length-1]&&(n=n.substr(0,n.length-2)),n+"}");var l};e.convertToJsonString=function(t,e){return(e=n(e,a.defaultOptions,a.props)).indentBy=e.indentBy||"",r(t,e,0)}},965:(t,e,s)=>{"use strict";const i=s(284),n=s(543),a=s(543),r=s(849).buildOptions,o=s(501);e.parse=function(t,e,s){if(s){!0===s&&(s={});const e=o.validate(t,s);if(!0!==e)throw Error(e.err.msg)}e=r(e,a.defaultOptions,a.props);const h=n.getTraversalObj(t,e);return i.convertToJson(h,e)},e.convertTonimn=s(398).convert2nimn,e.getTraversalObj=n.getTraversalObj,e.convertToJson=i.convertToJson,e.convertToJsonString=s(702).convertToJsonString,e.validate=o.validate,e.j2xParser=s(259),e.parseToNimn=function(t,s,i){return e.convertTonimn(e.getTraversalObj(t,i),s,i)}},849:(t,e)=>{"use strict";const s="[:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",i=new RegExp("^"+s+"$");e.isExist=function(t){return void 0!==t},e.isEmptyObject=function(t){return 0===Object.keys(t).length},e.merge=function(t,e,s){if(e){const i=Object.keys(e),n=i.length;for(let a=0;a<n;a++)t[i[a]]="strict"===s?[e[i[a]]]:e[i[a]]}},e.getValue=function(t){return e.isExist(t)?t:""},e.buildOptions=function(t,e,s){var i={};if(!t)return e;for(let n=0;n<s.length;n++)void 0!==t[s[n]]?i[s[n]]=t[s[n]]:i[s[n]]=e[s[n]];return i},e.isName=function(t){return!(null==i.exec(t))},e.getAllMatches=function(t,e){const s=[];let i=e.exec(t);for(;i;){const n=[],a=i.length;for(let t=0;t<a;t++)n.push(i[t]);s.push(n),i=e.exec(t)}return s},e.nameRegexp=s},501:(t,e,s)=>{"use strict";const i=s(849),n={allowBooleanAttributes:!1},a=["allowBooleanAttributes"];function r(t,e){for(var s=e;e<t.length;e++)if("?"!=t[e]&&" "!=t[e]);else{var i=t.substr(s,e-s);if(e>5&&"xml"===i)return p("InvalidXml","XML declaration allowed only at the start of the document.",f(t,e));if("?"==t[e]&&">"==t[e+1]){e++;break}}return e}function o(t,e){if(t.length>e+5&&"-"===t[e+1]&&"-"===t[e+2]){for(e+=3;e<t.length;e++)if("-"===t[e]&&"-"===t[e+1]&&">"===t[e+2]){e+=2;break}}else if(t.length>e+8&&"D"===t[e+1]&&"O"===t[e+2]&&"C"===t[e+3]&&"T"===t[e+4]&&"Y"===t[e+5]&&"P"===t[e+6]&&"E"===t[e+7]){let s=1;for(e+=8;e<t.length;e++)if("<"===t[e])s++;else if(">"===t[e]&&(s--,0===s))break}else if(t.length>e+9&&"["===t[e+1]&&"C"===t[e+2]&&"D"===t[e+3]&&"A"===t[e+4]&&"T"===t[e+5]&&"A"===t[e+6]&&"["===t[e+7])for(e+=8;e<t.length;e++)if("]"===t[e]&&"]"===t[e+1]&&">"===t[e+2]){e+=2;break}return e}function h(t,e){let s="",i="",n=!1;for(;e<t.length;e++){if('"'===t[e]||"'"===t[e])if(""===i)i=t[e];else{if(i!==t[e])continue;i=""}else if(">"===t[e]&&""===i){n=!0;break}s+=t[e]}return""===i&&{value:s,index:e,tagClosed:n}}e.validate=function(t,e){e=i.buildOptions(e,n,a);const s=[];let l=!1,d=!1;"\ufeff"===t[0]&&(t=t.substr(1));for(let n=0;n<t.length;n++){if("<"!==t[n]){if(" "===t[n]||"\t"===t[n]||"\n"===t[n]||"\r"===t[n])continue;return p("InvalidChar","char '"+t[n]+"' is not expected.",f(t,n))}if(n++,"?"===t[n]){if(n=r(t,++n),n.err)return n}else{if("!"===t[n]){n=o(t,n);continue}{let a=!1;"/"===t[n]&&(a=!0,n++);let r="";for(;n<t.length&&">"!==t[n]&&" "!==t[n]&&"\t"!==t[n]&&"\n"!==t[n]&&"\r"!==t[n];n++)r+=t[n];if(r=r.trim(),"/"===r[r.length-1]&&(r=r.substring(0,r.length-1),n--),g=r,!i.isName(g)){let e;return e=0===r.trim().length?"There is an unnecessary space between tag name and backward slash '</ ..'.":"Tag '"+r+"' is an invalid name.",p("InvalidTag",e,f(t,n))}const m=h(t,n);if(!1===m)return p("InvalidAttr","Attributes for '"+r+"' have open quote.",f(t,n));let _=m.value;if(n=m.index,"/"===_[_.length-1]){_=_.substring(0,_.length-1);const s=u(_,e);if(!0!==s)return p(s.err.code,s.err.msg,f(t,n-_.length+s.err.line));l=!0}else if(a){if(!m.tagClosed)return p("InvalidTag","Closing tag '"+r+"' doesn't have proper closing.",f(t,n));if(_.trim().length>0)return p("InvalidTag","Closing tag '"+r+"' can't have attributes or invalid starting.",f(t,n));{const e=s.pop();if(r!==e)return p("InvalidTag","Closing tag '"+e+"' is expected inplace of '"+r+"'.",f(t,n));0==s.length&&(d=!0)}}else{const i=u(_,e);if(!0!==i)return p(i.err.code,i.err.msg,f(t,n-_.length+i.err.line));if(!0===d)return p("InvalidXml","Multiple possible root nodes found.",f(t,n));s.push(r),l=!0}for(n++;n<t.length;n++){if("<"===t[n]){if("!"===t[n+1]){n++,n=o(t,n);continue}break}if("&"===t[n]){const e=c(t,n);if(-1==e)return p("InvalidChar","char '&' is not expected.",f(t,n));n=e}}"<"===t[n]&&n--}}}var g;return l?!(s.length>0)||p("InvalidXml","Invalid '"+JSON.stringify(s,null,4).replace(/\r?\n/g,"")+"' found.",1):p("InvalidXml","Start tag expected.",1)};const l=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function u(t,e){const s=i.getAllMatches(t,l),n={};for(let i=0;i<s.length;i++){if(0===s[i][1].length)return p("InvalidAttr","Attribute '"+s[i][2]+"' has no space in starting.",g(t,s[i][0]));if(void 0===s[i][3]&&!e.allowBooleanAttributes)return p("InvalidAttr","boolean attribute '"+s[i][2]+"' is not allowed.",g(t,s[i][0]));const a=s[i][2];if(!d(a))return p("InvalidAttr","Attribute '"+a+"' is an invalid name.",g(t,s[i][0]));if(n.hasOwnProperty(a))return p("InvalidAttr","Attribute '"+a+"' is repeated.",g(t,s[i][0]));n[a]=1}return!0}function c(t,e){if(";"===t[++e])return-1;if("#"===t[e])return function(t,e){let s=/\d/;for("x"===t[e]&&(e++,s=/[\da-fA-F]/);e<t.length;e++){if(";"===t[e])return e;if(!t[e].match(s))break}return-1}(t,++e);let s=0;for(;e<t.length;e++,s++)if(!(t[e].match(/\w/)&&s<20)){if(";"===t[e])break;return-1}return e}function p(t,e,s){return{err:{code:t,msg:e,line:s}}}function d(t){return i.isName(t)}function f(t,e){return t.substring(0,e).split(/\r?\n/).length}function g(t,e){return t.indexOf(e)+e.length}},468:t=>{"use strict";t.exports=function(t,e,s){this.tagname=t,this.parent=e,this.child={},this.attrsMap={},this.val=s,this.addChild=function(t){Array.isArray(this.child[t.tagname])?this.child[t.tagname].push(t):this.child[t.tagname]=[t]}}},543:(t,e,s)=>{"use strict";const i=s(849),n=s(849).buildOptions,a=s(468);"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,i.nameRegexp),!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const r={attributeNamePrefix:"@_",attrNodeName:!1,textNodeName:"#text",ignoreAttributes:!0,ignoreNameSpace:!1,allowBooleanAttributes:!1,parseNodeValue:!0,parseAttributeValue:!1,arrayMode:!1,trimValues:!0,cdataTagName:!1,cdataPositionChar:"\\c",tagValueProcessor:function(t,e){return t},attrValueProcessor:function(t,e){return t},stopNodes:[]};e.defaultOptions=r;const o=["attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","arrayMode","trimValues","cdataTagName","cdataPositionChar","tagValueProcessor","attrValueProcessor","parseTrueNumberOnly","stopNodes"];function h(t,e,s){return e&&(s.trimValues&&(e=e.trim()),e=u(e=s.tagValueProcessor(e,t),s.parseNodeValue,s.parseTrueNumberOnly)),e}function l(t,e){if(e.ignoreNameSpace){const e=t.split(":"),s="/"===t.charAt(0)?"/":"";if("xmlns"===e[0])return"";2===e.length&&(t=s+e[1])}return t}function u(t,e,s){if(e&&"string"==typeof t){let e;return""===t.trim()||isNaN(t)?e="true"===t||"false"!==t&&t:(-1!==t.indexOf("0x")?e=Number.parseInt(t,16):-1!==t.indexOf(".")?(e=Number.parseFloat(t),t=t.replace(/\.?0+$/,"")):e=Number.parseInt(t,10),s&&(e=String(e)===t?e:t)),e}return i.isExist(t)?t:""}e.props=o;const c=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])(.*?)\\3)?","g");function p(t,e){if(!e.ignoreAttributes&&"string"==typeof t){t=t.replace(/\r?\n/g," ");const s=i.getAllMatches(t,c),n=s.length,a={};for(let t=0;t<n;t++){const i=l(s[t][1],e);i.length&&(void 0!==s[t][4]?(e.trimValues&&(s[t][4]=s[t][4].trim()),s[t][4]=e.attrValueProcessor(s[t][4],i),a[e.attributeNamePrefix+i]=u(s[t][4],e.parseAttributeValue,e.parseTrueNumberOnly)):e.allowBooleanAttributes&&(a[e.attributeNamePrefix+i]=!0))}if(!Object.keys(a).length)return;if(e.attrNodeName){const t={};return t[e.attrNodeName]=a,t}return a}}function d(t,e){let s,i="";for(let n=e;n<t.length;n++){let e=t[n];if(s)e===s&&(s="");else if('"'===e||"'"===e)s=e;else{if(">"===e)return{data:i,index:n};"\t"===e&&(e=" ")}i+=e}}function f(t,e,s,i){const n=t.indexOf(e,s);if(-1===n)throw new Error(i);return n+e.length-1}e.getTraversalObj=function(t,e){t=t.replace(/\r\n?/g,"\n"),e=n(e,r,o);const s=new a("!xml");let l=s,u="";for(let s=0;s<t.length;s++)if("<"===t[s])if("/"===t[s+1]){const n=f(t,">",s,"Closing Tag is not closed.");let a=t.substring(s+2,n).trim();if(e.ignoreNameSpace){const t=a.indexOf(":");-1!==t&&(a=a.substr(t+1))}l&&(l.val?l.val=i.getValue(l.val)+""+h(a,u,e):l.val=h(a,u,e)),e.stopNodes.length&&e.stopNodes.includes(l.tagname)&&(l.child=[],null==l.attrsMap&&(l.attrsMap={}),l.val=t.substr(l.startIndex+1,s-l.startIndex-1)),l=l.parent,u="",s=n}else if("?"===t[s+1])s=f(t,"?>",s,"Pi Tag is not closed.");else if("!--"===t.substr(s+1,3))s=f(t,"--\x3e",s,"Comment is not closed.");else if("!D"===t.substr(s+1,2)){const e=f(t,">",s,"DOCTYPE is not closed.");s=t.substring(s,e).indexOf("[")>=0?t.indexOf("]>",s)+1:e}else if("!["===t.substr(s+1,2)){const n=f(t,"]]>",s,"CDATA is not closed.")-2,r=t.substring(s+9,n);if(u&&(l.val=i.getValue(l.val)+""+h(l.tagname,u,e),u=""),e.cdataTagName){const t=new a(e.cdataTagName,l,r);l.addChild(t),l.val=i.getValue(l.val)+e.cdataPositionChar,r&&(t.val=r)}else l.val=(l.val||"")+(r||"");s=n+2}else{const n=d(t,s+1);let r=n.data;const o=n.index,c=r.indexOf(" ");let f=r;if(-1!==c&&(f=r.substr(0,c).replace(/\s\s*$/,""),r=r.substr(c+1)),e.ignoreNameSpace){const t=f.indexOf(":");-1!==t&&(f=f.substr(t+1))}if(l&&u&&"!xml"!==l.tagname&&(l.val=i.getValue(l.val)+""+h(l.tagname,u,e)),r.length>0&&r.lastIndexOf("/")===r.length-1){"/"===f[f.length-1]?(f=f.substr(0,f.length-1),r=f):r=r.substr(0,r.length-1);const t=new a(f,l,"");f!==r&&(t.attrsMap=p(r,e)),l.addChild(t)}else{const t=new a(f,l);e.stopNodes.length&&e.stopNodes.includes(t.tagname)&&(t.startIndex=o),f!==r&&(t.attrsMap=p(r,e)),l.addChild(t),l=t}u="",s=o}else u+=t[s];return s}},824:(t,e)=>{var s,i,n;(n={}).Constants={},n.Math={},n.Accumulator={},function(t){"use strict";t.WGS84={a:6378137,f:1/298.257223563},t.version={major:1,minor:51,patch:0},t.version_string="1.51"}(n.Constants),function(t){"use strict";t.digits=53,t.epsilon=Math.pow(.5,t.digits-1),t.degree=Math.PI/180,t.sq=function(t){return t*t},t.hypot=Math.hypot||function(t,e){var s,i;return t=Math.abs(t),e=Math.abs(e),s=Math.max(t,e),i=Math.min(t,e)/(s||1),s*Math.sqrt(1+i*i)},t.cbrt=Math.cbrt||function(t){var e=Math.pow(Math.abs(t),1/3);return t>0?e:t<0?-e:t},t.log1p=Math.log1p||function(t){var e=1+t,s=e-1;return 0===s?t:t*Math.log(e)/s},t.atanh=Math.atanh||function(e){var s=Math.abs(e);return s=t.log1p(2*s/(1-s))/2,e>0?s:e<0?-s:e},t.copysign=function(t,e){return Math.abs(t)*(e<0||0===e&&1/e<0?-1:1)},t.sum=function(t,e){var s=t+e,i=s-e,n=s-i;return{s,t:-((i-=t)+(n-=e))}},t.polyval=function(t,e,s,i){for(var n=t<0?0:e[s++];--t>=0;)n=n*i+e[s++];return n},t.AngRound=function(t){if(0===t)return t;var e=1/16,s=Math.abs(t);return s=s<e?e-(e-s):s,t<0?-s:s},t.remainder=function(t,e){return(t%=e)<-e/2?t+e:t<e/2?t:t-e},t.AngNormalize=function(e){return-180==(e=t.remainder(e,360))?180:e},t.LatFix=function(t){return Math.abs(t)>90?Number.NaN:t},t.AngDiff=function(e,s){var i=t.sum(t.AngNormalize(-e),t.AngNormalize(s)),n=t.AngNormalize(i.s),a=i.t;return t.sum(180===n&&a>0?-180:n,a)},t.sincosd=function(t){var e,s,i,n,a,r;switch(e=t%360,e-=90*(s=0+Math.round(e/90)),e*=this.degree,i=Math.sin(e),n=Math.cos(e),3&s){case 0:a=i,r=n;break;case 1:a=n,r=-i;break;case 2:a=-i,r=-n;break;default:a=-n,r=i}return 0!==t&&(a+=0,r+=0),{s:a,c:r}},t.atan2d=function(t,e){var s,i,n=0;switch(Math.abs(t)>Math.abs(e)&&(s=e,e=t,t=s,n=2),e<0&&(e=-e,++n),i=Math.atan2(t,e)/this.degree,n){case 1:i=(t>=0?180:-180)-i;break;case 2:i=90-i;break;case 3:i=-90+i}return i}}(n.Math),function(t,e){"use strict";t.Accumulator=function(t){this.Set(t)},t.Accumulator.prototype.Set=function(e){e||(e=0),e.constructor===t.Accumulator?(this._s=e._s,this._t=e._t):(this._s=e,this._t=0)},t.Accumulator.prototype.Add=function(t){var s=e.sum(t,this._t),i=e.sum(s.s,this._s);s=s.t,this._s=i.s,this._t=i.t,0===this._s?this._s=s:this._t+=s},t.Accumulator.prototype.Sum=function(e){var s;return e?((s=new t.Accumulator(this)).Add(e),s._s):this._s},t.Accumulator.prototype.Negate=function(){this._s*=-1,this._t*=-1},t.Accumulator.prototype.Remainder=function(t){this._s=e.remainder(this._s,t),this.Add(0)}}(n.Accumulator,n.Math),n.Geodesic={},n.GeodesicLine={},n.PolygonArea={},function(t,e,s,i,n){"use strict";var a,r,o,h,l,u,c,p,d,f,g,m=20+i.digits+10,_=i.epsilon,A=200*_,N=Math.sqrt(_),C=_*A,b=1e3*N;t.tiny_=Math.sqrt(Number.MIN_VALUE),t.nC1_=6,t.nC1p_=6,t.nC2_=6,t.nC3_=6,t.nC4_=6,a=t.nC3_*(t.nC3_-1)/2,r=t.nC4_*(t.nC4_+1)/2,t.CAP_C1=1,t.CAP_C1p=2,t.CAP_C2=4,t.CAP_C3=8,t.CAP_C4=16,t.NONE=0,t.ARC=64,t.LATITUDE=128,t.LONGITUDE=256|t.CAP_C3,t.AZIMUTH=512,t.DISTANCE=1024|t.CAP_C1,t.STANDARD=t.LATITUDE|t.LONGITUDE|t.AZIMUTH|t.DISTANCE,t.DISTANCE_IN=2048|t.CAP_C1|t.CAP_C1p,t.REDUCEDLENGTH=4096|t.CAP_C1|t.CAP_C2,t.GEODESICSCALE=8192|t.CAP_C1|t.CAP_C2,t.AREA=16384|t.CAP_C4,t.ALL=32671,t.LONG_UNROLL=32768,t.OUT_MASK=32640|t.LONG_UNROLL,t.SinCosSeries=function(t,e,s,i){var n=i.length,a=n-(t?1:0),r=2*(s-e)*(s+e),o=1&a?i[--n]:0,h=0;for(a=Math.floor(a/2);a--;)o=r*(h=r*o-h+i[--n])-o+i[--n];return t?2*e*s*o:s*(o-h)},o=function(t,e){var s,n,a,r,o,h,l,u,c,p,d,f,g=i.sq(t),m=i.sq(e),_=(g+m-1)/6;return 0===m&&_<=0?s=0:(h=_,(o=(n=g*m/4)*(n+2*(r=_*(a=i.sq(_)))))>=0?(l=n+r,l+=l<0?-Math.sqrt(o):Math.sqrt(o),h+=(u=i.cbrt(l))+(0!==u?a/u:0)):(c=Math.atan2(Math.sqrt(-o),-(n+r)),h+=2*_*Math.cos(c/3)),p=Math.sqrt(i.sq(h)+m),f=((d=h<0?m/(p-h):h+p)-m)/(2*p),s=d/(Math.sqrt(d+i.sq(f))+f)),s},h=[1,4,64,0,256],t.A1m1f=function(t){var e=Math.floor(3);return(i.polyval(e,h,0,i.sq(t))/h[e+1]+t)/(1-t)},l=[-1,6,-16,32,-9,64,-128,2048,9,-16,768,3,-5,512,-7,1280,-7,2048],t.C1f=function(e,s){var n,a,r=i.sq(e),o=e,h=0;for(n=1;n<=t.nC1_;++n)a=Math.floor((t.nC1_-n)/2),s[n]=o*i.polyval(a,l,h,r)/l[h+a+1],h+=a+2,o*=e},u=[205,-432,768,1536,4005,-4736,3840,12288,-225,116,384,-7173,2695,7680,3467,7680,38081,61440],t.C1pf=function(e,s){var n,a,r=i.sq(e),o=e,h=0;for(n=1;n<=t.nC1p_;++n)a=Math.floor((t.nC1p_-n)/2),s[n]=o*i.polyval(a,u,h,r)/u[h+a+1],h+=a+2,o*=e},c=[-11,-28,-192,0,256],t.A2m1f=function(t){var e=Math.floor(3);return(i.polyval(e,c,0,i.sq(t))/c[e+1]-t)/(1+t)},p=[1,2,16,32,35,64,384,2048,15,80,768,7,35,512,63,1280,77,2048],t.C2f=function(e,s){var n,a,r=i.sq(e),o=e,h=0;for(n=1;n<=t.nC2_;++n)a=Math.floor((t.nC2_-n)/2),s[n]=o*i.polyval(a,p,h,r)/p[h+a+1],h+=a+2,o*=e},t.Geodesic=function(t,e){if(this.a=t,this.f=e,this._f1=1-this.f,this._e2=this.f*(2-this.f),this._ep2=this._e2/i.sq(this._f1),this._n=this.f/(2-this.f),this._b=this.a*this._f1,this._c2=(i.sq(this.a)+i.sq(this._b)*(0===this._e2?1:(this._e2>0?i.atanh(Math.sqrt(this._e2)):Math.atan(Math.sqrt(-this._e2)))/Math.sqrt(Math.abs(this._e2))))/2,this._etol2=.1*N/Math.sqrt(Math.max(.001,Math.abs(this.f))*Math.min(1,1-this.f/2)/2),!(isFinite(this.a)&&this.a>0))throw new Error("Equatorial radius is not positive");if(!(isFinite(this._b)&&this._b>0))throw new Error("Polar semi-axis is not positive");this._A3x=new Array(6),this._C3x=new Array(a),this._C4x=new Array(r),this.A3coeff(),this.C3coeff(),this.C4coeff()},d=[-3,128,-2,-3,64,-1,-3,-1,16,3,-1,-2,8,1,-1,2,1,1],t.Geodesic.prototype.A3coeff=function(){var t,e,s=0,n=0;for(t=5;t>=0;--t)e=Math.min(6-t-1,t),this._A3x[n++]=i.polyval(e,d,s,this._n)/d[s+e+1],s+=e+2},f=[3,128,2,5,128,-1,3,3,64,-1,0,1,8,-1,1,4,5,256,1,3,128,-3,-2,3,64,1,-3,2,32,7,512,-10,9,384,5,-9,5,192,7,512,-14,7,512,21,2560],t.Geodesic.prototype.C3coeff=function(){var e,s,n,a=0,r=0;for(e=1;e<t.nC3_;++e)for(s=t.nC3_-1;s>=e;--s)n=Math.min(t.nC3_-s-1,s),this._C3x[r++]=i.polyval(n,f,a,this._n)/f[a+n+1],a+=n+2},g=[97,15015,1088,156,45045,-224,-4784,1573,45045,-10656,14144,-4576,-858,45045,64,624,-4576,6864,-3003,15015,100,208,572,3432,-12012,30030,45045,1,9009,-2944,468,135135,5792,1040,-1287,135135,5952,-11648,9152,-2574,135135,-64,-624,4576,-6864,3003,135135,8,10725,1856,-936,225225,-8448,4992,-1144,225225,-1440,4160,-4576,1716,225225,-136,63063,1024,-208,105105,3584,-3328,1144,315315,-128,135135,-2560,832,405405,128,99099],t.Geodesic.prototype.C4coeff=function(){var e,s,n,a=0,r=0;for(e=0;e<t.nC4_;++e)for(s=t.nC4_-1;s>=e;--s)n=t.nC4_-s-1,this._C4x[r++]=i.polyval(n,g,a,this._n)/g[a+n+1],a+=n+2},t.Geodesic.prototype.A3f=function(t){return i.polyval(5,this._A3x,0,t)},t.Geodesic.prototype.C3f=function(e,s){var n,a,r=1,o=0;for(n=1;n<t.nC3_;++n)a=t.nC3_-n-1,r*=e,s[n]=r*i.polyval(a,this._C3x,o,e),o+=a+1},t.Geodesic.prototype.C4f=function(e,s){var n,a,r=1,o=0;for(n=0;n<t.nC4_;++n)a=t.nC4_-n-1,s[n]=r*i.polyval(a,this._C4x,o,e),o+=a+1,r*=e},t.Geodesic.prototype.Lengths=function(e,s,i,n,a,r,o,h,l,u,c,p,d){var f,g,m,_,A={},N=0,C=0,b=0,E=0;if((c&=t.OUT_MASK)&(t.DISTANCE|t.REDUCEDLENGTH|t.GEODESICSCALE)&&(b=t.A1m1f(e),t.C1f(e,p),c&(t.REDUCEDLENGTH|t.GEODESICSCALE)&&(E=t.A2m1f(e),t.C2f(e,d),N=b-E,E=1+E),b=1+b),c&t.DISTANCE)f=t.SinCosSeries(!0,r,o,p)-t.SinCosSeries(!0,i,n,p),A.s12b=b*(s+f),c&(t.REDUCEDLENGTH|t.GEODESICSCALE)&&(C=N*s+(b*f-E*(t.SinCosSeries(!0,r,o,d)-t.SinCosSeries(!0,i,n,d))));else if(c&(t.REDUCEDLENGTH|t.GEODESICSCALE)){for(g=1;g<=t.nC2_;++g)d[g]=b*p[g]-E*d[g];C=N*s+(t.SinCosSeries(!0,r,o,d)-t.SinCosSeries(!0,i,n,d))}return c&t.REDUCEDLENGTH&&(A.m0=N,A.m12b=h*(n*r)-a*(i*o)-n*o*C),c&t.GEODESICSCALE&&(m=n*o+i*r,_=this._ep2*(l-u)*(l+u)/(a+h),A.M12=m+(_*r-o*C)*i/a,A.M21=m-(_*i-n*C)*r/h),A},t.Geodesic.prototype.InverseStart=function(e,s,n,a,r,h,l,u,c,p,d){var f,g,m,_,N,C,E,v,M,y,S,D,T,I,L,x,O,G,P,w,U={},F=a*s-r*e,q=r*s+a*e;return U.sig12=-1,f=a*s,f+=r*e,(g=q>=0&&F<.5&&r*l<.5)?(_=i.sq(e+a),_/=_+i.sq(s+r),U.dnm=Math.sqrt(1+this._ep2*_),m=l/(this._f1*U.dnm),N=Math.sin(m),C=Math.cos(m)):(N=u,C=c),U.salp1=r*N,U.calp1=C>=0?F+r*e*i.sq(N)/(1+C):f-r*e*i.sq(N)/(1-C),v=i.hypot(U.salp1,U.calp1),M=e*a+s*r*C,g&&v<this._etol2?(U.salp2=s*N,U.calp2=F-s*a*(C>=0?i.sq(N)/(1+C):1-C),E=i.hypot(U.salp2,U.calp2),U.salp2/=E,U.calp2/=E,U.sig12=Math.atan2(v,M)):Math.abs(this._n)>.1||M>=0||v>=6*Math.abs(this._n)*Math.PI*i.sq(s)||(w=Math.atan2(-u,-c),this.f>=0?(I=(T=i.sq(e)*this._ep2)/(2*(1+Math.sqrt(1+T))+T),y=w/(D=this.f*s*this.A3f(I)*Math.PI),S=f/(D*s)):(L=r*s-a*e,x=Math.atan2(f,L),S=l/(D=((y=(O=this.Lengths(this._n,Math.PI+x,e,-s,n,a,r,h,s,r,t.REDUCEDLENGTH,p,d)).m12b/(s*r*O.m0*Math.PI)-1)<-.01?f/y:-this.f*i.sq(s)*Math.PI)/s)),S>-A&&y>-1-b?this.f>=0?(U.salp1=Math.min(1,-y),U.calp1=-Math.sqrt(1-i.sq(U.salp1))):(U.calp1=Math.max(y>-A?0:-1,y),U.salp1=Math.sqrt(1-i.sq(U.calp1))):(G=o(y,S),P=D*(this.f>=0?-y*G/(1+G):-S*(1+G)/G),N=Math.sin(P),C=-Math.cos(P),U.salp1=r*N,U.calp1=f-r*e*i.sq(N)/(1-C))),U.salp1<=0?(U.salp1=1,U.calp1=0):(E=i.hypot(U.salp1,U.calp1),U.salp1/=E,U.calp1/=E),U},t.Geodesic.prototype.Lambda12=function(e,s,n,a,r,o,h,l,u,c,p,d,f,g){var m,_,A,N,C,b,E,v,M,y,S,D,T,I={};return 0===e&&0===l&&(l=-t.tiny_),_=h*s,A=i.hypot(l,h*e),I.ssig1=e,N=_*e,I.csig1=C=l*s,m=i.hypot(I.ssig1,I.csig1),I.ssig1/=m,I.csig1/=m,I.salp2=r!==s?_/r:h,I.calp2=r!==s||Math.abs(a)!==-e?Math.sqrt(i.sq(l*s)+(s<-e?(r-s)*(s+r):(e-a)*(e+a)))/r:Math.abs(l),I.ssig2=a,b=_*a,I.csig2=E=I.calp2*r,m=i.hypot(I.ssig2,I.csig2),I.ssig2/=m,I.csig2/=m,I.sig12=Math.atan2(Math.max(0,I.csig1*I.ssig2-I.ssig1*I.csig2),I.csig1*I.csig2+I.ssig1*I.ssig2),v=Math.max(0,C*b-N*E),M=C*E+N*b,S=Math.atan2(v*c-M*u,M*c+v*u),D=i.sq(A)*this._ep2,I.eps=D/(2*(1+Math.sqrt(1+D))+D),this.C3f(I.eps,g),y=t.SinCosSeries(!0,I.ssig2,I.csig2,g)-t.SinCosSeries(!0,I.ssig1,I.csig1,g),I.domg12=-this.f*this.A3f(I.eps)*_*(I.sig12+y),I.lam12=S+I.domg12,p&&(0===I.calp2?I.dlam12=-2*this._f1*n/e:(T=this.Lengths(I.eps,I.sig12,I.ssig1,I.csig1,n,I.ssig2,I.csig2,o,s,r,t.REDUCEDLENGTH,d,f),I.dlam12=T.m12b,I.dlam12*=this._f1/(I.calp2*r))),I},t.Geodesic.prototype.Inverse=function(e,s,n,a,r){var o,h;return r||(r=t.STANDARD),r===t.LONG_UNROLL&&(r|=t.STANDARD),r&=t.OUT_MASK,h=(o=this.InverseInt(e,s,n,a,r)).vals,r&t.AZIMUTH&&(h.azi1=i.atan2d(o.salp1,o.calp1),h.azi2=i.atan2d(o.salp2,o.calp2)),h},t.Geodesic.prototype.InverseInt=function(e,s,n,a,r){var o,h,l,u,c,p,d,f,g,A,N,b,E,v,M,y,S,D,T,I,L,x,O,G,P,w,U,F,q,k,R,j,V,B,z,H,Z,$,J,W,K,X,Y,Q,tt,et,st,it,nt,at,rt,ot,ht,lt,ut,ct,pt,dt,ft,gt,mt,_t,At,Nt,Ct,bt={};if(bt.lat1=e=i.LatFix(e),bt.lat2=n=i.LatFix(n),e=i.AngRound(e),n=i.AngRound(n),h=(o=i.AngDiff(s,a)).t,o=o.s,r&t.LONG_UNROLL?(bt.lon1=s,bt.lon2=s+o+h):(bt.lon1=i.AngNormalize(s),bt.lon2=i.AngNormalize(a)),o=(l=o>=0?1:-1)*i.AngRound(o),h=i.AngRound(180-o-l*h),M=o*i.degree,y=(u=i.sincosd(o>90?h:o)).s,S=(o>90?-1:1)*u.c,(c=Math.abs(e)<Math.abs(n)?-1:1)<0&&(l*=-1,u=e,e=n,n=u),e*=p=e<0?1:-1,n*=p,u=i.sincosd(e),d=this._f1*u.s,f=u.c,d/=u=i.hypot(d,f),f/=u,f=Math.max(t.tiny_,f),u=i.sincosd(n),g=this._f1*u.s,A=u.c,g/=u=i.hypot(g,A),A/=u,A=Math.max(t.tiny_,A),f<-d?A===f&&(g=g<0?d:-d):Math.abs(g)===-d&&(A=f),E=Math.sqrt(1+this._ep2*i.sq(d)),v=Math.sqrt(1+this._ep2*i.sq(g)),O=new Array(t.nC1_+1),G=new Array(t.nC2_+1),P=new Array(t.nC3_),(w=-90===e||0===y)&&(I=y,x=0,F=d,q=(T=S)*f,k=g,R=(L=1)*A,D=Math.atan2(Math.max(0,q*k-F*R),q*R+F*k),N=(U=this.Lengths(this._n,D,F,q,E,k,R,v,f,A,r|t.DISTANCE|t.REDUCEDLENGTH,O,G)).s12b,b=U.m12b,r&t.GEODESICSCALE&&(bt.M12=U.M12,bt.M21=U.M21),D<1||b>=0?(D<3*t.tiny_&&(D=b=N=0),b*=this._b,N*=this._b,bt.a12=D/i.degree):w=!1),pt=2,!w&&0===d&&(this.f<=0||h>=180*this.f))T=L=0,I=x=1,N=this.a*M,D=V=M/this._f1,b=this._b*Math.sin(D),r&t.GEODESICSCALE&&(bt.M12=bt.M21=Math.cos(D)),bt.a12=o/this._f1;else if(!w)if(D=(U=this.InverseStart(d,f,E,g,A,v,M,y,S,O,G)).sig12,I=U.salp1,T=U.calp1,D>=0)x=U.salp2,L=U.calp2,B=U.dnm,N=D*this._b*B,b=i.sq(B)*this._b*Math.sin(D/B),r&t.GEODESICSCALE&&(bt.M12=bt.M21=Math.cos(D/B)),bt.a12=D/i.degree,V=M/(this._f1*B);else{for(z=0,H=t.tiny_,Z=1,$=t.tiny_,J=-1,W=!1,K=!1;z<m&&(X=(U=this.Lambda12(d,f,E,g,A,v,I,T,y,S,z<20,O,G,P)).lam12,x=U.salp2,L=U.calp2,D=U.sig12,F=U.ssig1,q=U.csig1,k=U.ssig2,R=U.csig2,j=U.eps,ft=U.domg12,Y=U.dlam12,!K&&Math.abs(X)>=(W?8:1)*_);++z)X>0&&(z<20||T/I>J/$)?($=I,J=T):X<0&&(z<20||T/I<Z/H)&&(H=I,Z=T),z<20&&Y>0&&(Q=-X/Y,tt=Math.sin(Q),(st=I*(et=Math.cos(Q))+T*tt)>0&&Math.abs(Q)<Math.PI)?(T=T*et-I*tt,I=st,I/=u=i.hypot(I,T),T/=u,W=Math.abs(X)<=16*_):(I=(H+$)/2,T=(Z+J)/2,I/=u=i.hypot(I,T),T/=u,W=!1,K=Math.abs(H-I)+(Z-T)<C||Math.abs(I-$)+(T-J)<C);it=r|(r&(t.REDUCEDLENGTH|t.GEODESICSCALE)?t.DISTANCE:t.NONE),N=(U=this.Lengths(j,D,F,q,E,k,R,v,f,A,it,O,G)).s12b,b=U.m12b,r&t.GEODESICSCALE&&(bt.M12=U.M12,bt.M21=U.M21),b*=this._b,N*=this._b,bt.a12=D/i.degree,r&t.AREA&&(Nt=Math.sin(ft),pt=y*(Ct=Math.cos(ft))-S*Nt,dt=S*Ct+y*Nt)}return r&t.DISTANCE&&(bt.s12=0+N),r&t.REDUCEDLENGTH&&(bt.m12=0+b),r&t.AREA&&(nt=I*f,0!==(at=i.hypot(T,I*d))&&0!==nt?(F=d,q=T*f,k=g,R=L*A,j=(ot=i.sq(at)*this._ep2)/(2*(1+Math.sqrt(1+ot))+ot),ht=i.sq(this.a)*at*nt*this._e2,F/=u=i.hypot(F,q),q/=u,k/=u=i.hypot(k,R),R/=u,lt=new Array(t.nC4_),this.C4f(j,lt),ut=t.SinCosSeries(!1,F,q,lt),ct=t.SinCosSeries(!1,k,R,lt),bt.S12=ht*(ct-ut)):bt.S12=0,!w&&pt>1&&(pt=Math.sin(V),dt=Math.cos(V)),!w&&dt>-.7071&&g-d<1.75?(ft=1+dt,gt=1+f,mt=1+A,rt=2*Math.atan2(pt*(d*mt+g*gt),ft*(d*g+gt*mt))):(At=L*T+x*I,0==(_t=x*T-L*I)&&At<0&&(_t=t.tiny_*T,At=-1),rt=Math.atan2(_t,At)),bt.S12+=this._c2*rt,bt.S12*=c*l*p,bt.S12+=0),c<0&&(u=I,I=x,x=u,u=T,T=L,L=u,r&t.GEODESICSCALE&&(u=bt.M12,bt.M12=bt.M21,bt.M21=u)),{vals:bt,salp1:I*=c*l,calp1:T*=c*p,salp2:x*=c*l,calp2:L*=c*p}},t.Geodesic.prototype.GenDirect=function(s,i,n,a,r,o){return o?o===t.LONG_UNROLL&&(o|=t.STANDARD):o=t.STANDARD,a||(o|=t.DISTANCE_IN),new e.GeodesicLine(this,s,i,n,o).GenPosition(a,r,o)},t.Geodesic.prototype.Direct=function(t,e,s,i,n){return this.GenDirect(t,e,s,!1,i,n)},t.Geodesic.prototype.ArcDirect=function(t,e,s,i,n){return this.GenDirect(t,e,s,!0,i,n)},t.Geodesic.prototype.Line=function(t,s,i,n){return new e.GeodesicLine(this,t,s,i,n)},t.Geodesic.prototype.DirectLine=function(t,e,s,i,n){return this.GenDirectLine(t,e,s,!1,i,n)},t.Geodesic.prototype.ArcDirectLine=function(t,e,s,i,n){return this.GenDirectLine(t,e,s,!0,i,n)},t.Geodesic.prototype.GenDirectLine=function(s,i,n,a,r,o){var h;return o||(o=t.STANDARD|t.DISTANCE_IN),a||(o|=t.DISTANCE_IN),(h=new e.GeodesicLine(this,s,i,n,o)).GenSetDistance(a,r),h},t.Geodesic.prototype.InverseLine=function(s,n,a,r,o){var h,l,u;return o||(o=t.STANDARD|t.DISTANCE_IN),h=this.InverseInt(s,n,a,r,t.ARC),u=i.atan2d(h.salp1,h.calp1),o&t.OUT_MASK&t.DISTANCE_IN&&(o|=t.DISTANCE),(l=new e.GeodesicLine(this,s,n,u,o,h.salp1,h.calp1)).SetArc(h.vals.a12),l},t.Geodesic.prototype.Polygon=function(t){return new s.PolygonArea(this,t)},t.WGS84=new t.Geodesic(n.WGS84.a,n.WGS84.f)}(n.Geodesic,n.GeodesicLine,n.PolygonArea,n.Math,n.Constants),function(t,e,s){"use strict";e.GeodesicLine=function(e,i,n,a,r,o,h){var l,u,c,p,d,f;r||(r=t.STANDARD|t.DISTANCE_IN),this.a=e.a,this.f=e.f,this._b=e._b,this._c2=e._c2,this._f1=e._f1,this.caps=r|t.LATITUDE|t.AZIMUTH|t.LONG_UNROLL,this.lat1=s.LatFix(i),this.lon1=n,void 0===o||void 0===h?(this.azi1=s.AngNormalize(a),l=s.sincosd(s.AngRound(this.azi1)),this.salp1=l.s,this.calp1=l.c):(this.azi1=a,this.salp1=o,this.calp1=h),l=s.sincosd(s.AngRound(this.lat1)),c=this._f1*l.s,u=l.c,c/=l=s.hypot(c,u),u/=l,u=Math.max(t.tiny_,u),this._dn1=Math.sqrt(1+e._ep2*s.sq(c)),this._salp0=this.salp1*u,this._calp0=s.hypot(this.calp1,this.salp1*c),this._ssig1=c,this._somg1=this._salp0*c,this._csig1=this._comg1=0!==c||0!==this.calp1?u*this.calp1:1,l=s.hypot(this._ssig1,this._csig1),this._ssig1/=l,this._csig1/=l,this._k2=s.sq(this._calp0)*e._ep2,p=this._k2/(2*(1+Math.sqrt(1+this._k2))+this._k2),this.caps&t.CAP_C1&&(this._A1m1=t.A1m1f(p),this._C1a=new Array(t.nC1_+1),t.C1f(p,this._C1a),this._B11=t.SinCosSeries(!0,this._ssig1,this._csig1,this._C1a),d=Math.sin(this._B11),f=Math.cos(this._B11),this._stau1=this._ssig1*f+this._csig1*d,this._ctau1=this._csig1*f-this._ssig1*d),this.caps&t.CAP_C1p&&(this._C1pa=new Array(t.nC1p_+1),t.C1pf(p,this._C1pa)),this.caps&t.CAP_C2&&(this._A2m1=t.A2m1f(p),this._C2a=new Array(t.nC2_+1),t.C2f(p,this._C2a),this._B21=t.SinCosSeries(!0,this._ssig1,this._csig1,this._C2a)),this.caps&t.CAP_C3&&(this._C3a=new Array(t.nC3_),e.C3f(p,this._C3a),this._A3c=-this.f*this._salp0*e.A3f(p),this._B31=t.SinCosSeries(!0,this._ssig1,this._csig1,this._C3a)),this.caps&t.CAP_C4&&(this._C4a=new Array(t.nC4_),e.C4f(p,this._C4a),this._A4=s.sq(this.a)*this._calp0*this._salp0*e._e2,this._B41=t.SinCosSeries(!1,this._ssig1,this._csig1,this._C4a)),this.a13=this.s13=Number.NaN},e.GeodesicLine.prototype.GenPosition=function(e,i,n){var a,r,o,h,l,u,c,p,d,f,g,m,_,A,N,C,b,E,v,M,y,S,D,T,I,L,x={};return n?n===t.LONG_UNROLL&&(n|=t.STANDARD):n=t.STANDARD,n&=this.caps&t.OUT_MASK,x.lat1=this.lat1,x.azi1=this.azi1,x.lon1=n&t.LONG_UNROLL?this.lon1:s.AngNormalize(this.lon1),e?x.a12=i:x.s12=i,e||this.caps&t.DISTANCE_IN&t.OUT_MASK?(h=0,l=0,e?(a=i*s.degree,r=(D=s.sincosd(i)).s,o=D.c):(p=i/(this._b*(1+this._A1m1)),d=Math.sin(p),f=Math.cos(p),a=p-((h=-t.SinCosSeries(!0,this._stau1*f+this._ctau1*d,this._ctau1*f-this._stau1*d,this._C1pa))-this._B11),r=Math.sin(a),o=Math.cos(a),Math.abs(this.f)>.01&&(u=this._ssig1*o+this._csig1*r,c=this._csig1*o-this._ssig1*r,h=t.SinCosSeries(!0,u,c,this._C1a),a-=((1+this._A1m1)*(a+(h-this._B11))-i/this._b)/Math.sqrt(1+this._k2*s.sq(u)),r=Math.sin(a),o=Math.cos(a))),u=this._ssig1*o+this._csig1*r,c=this._csig1*o-this._ssig1*r,v=Math.sqrt(1+this._k2*s.sq(u)),n&(t.DISTANCE|t.REDUCEDLENGTH|t.GEODESICSCALE)&&((e||Math.abs(this.f)>.01)&&(h=t.SinCosSeries(!0,u,c,this._C1a)),l=(1+this._A1m1)*(h-this._B11)),_=this._calp0*u,0===(A=s.hypot(this._salp0,this._calp0*c))&&(A=c=t.tiny_),b=this._salp0,E=this._calp0*c,e&&n&t.DISTANCE&&(x.s12=this._b*((1+this._A1m1)*a+l)),n&t.LONGITUDE&&(N=this._salp0*u,C=c,m=s.copysign(1,this._salp0),g=((n&t.LONG_UNROLL?m*(a-(Math.atan2(u,c)-Math.atan2(this._ssig1,this._csig1))+(Math.atan2(m*N,C)-Math.atan2(m*this._somg1,this._comg1))):Math.atan2(N*this._comg1-C*this._somg1,C*this._comg1+N*this._somg1))+this._A3c*(a+(t.SinCosSeries(!0,u,c,this._C3a)-this._B31)))/s.degree,x.lon2=n&t.LONG_UNROLL?this.lon1+g:s.AngNormalize(s.AngNormalize(this.lon1)+s.AngNormalize(g))),n&t.LATITUDE&&(x.lat2=s.atan2d(_,this._f1*A)),n&t.AZIMUTH&&(x.azi2=s.atan2d(b,E)),n&(t.REDUCEDLENGTH|t.GEODESICSCALE)&&(M=t.SinCosSeries(!0,u,c,this._C2a),y=(1+this._A2m1)*(M-this._B21),S=(this._A1m1-this._A2m1)*a+(l-y),n&t.REDUCEDLENGTH&&(x.m12=this._b*(v*(this._csig1*u)-this._dn1*(this._ssig1*c)-this._csig1*c*S)),n&t.GEODESICSCALE&&(D=this._k2*(u-this._ssig1)*(u+this._ssig1)/(this._dn1+v),x.M12=o+(D*u-c*S)*this._ssig1/this._dn1,x.M21=o-(D*this._ssig1-this._csig1*S)*u/v)),n&t.AREA&&(T=t.SinCosSeries(!1,u,c,this._C4a),0===this._calp0||0===this._salp0?(I=b*this.calp1-E*this.salp1,L=E*this.calp1+b*this.salp1):(I=this._calp0*this._salp0*(o<=0?this._csig1*(1-o)+r*this._ssig1:r*(this._csig1*r/(1+o)+this._ssig1)),L=s.sq(this._salp0)+s.sq(this._calp0)*this._csig1*c),x.S12=this._c2*Math.atan2(I,L)+this._A4*(T-this._B41)),e||(x.a12=a/s.degree),x):(x.a12=Number.NaN,x)},e.GeodesicLine.prototype.Position=function(t,e){return this.GenPosition(!1,t,e)},e.GeodesicLine.prototype.ArcPosition=function(t,e){return this.GenPosition(!0,t,e)},e.GeodesicLine.prototype.GenSetDistance=function(t,e){t?this.SetArc(e):this.SetDistance(e)},e.GeodesicLine.prototype.SetDistance=function(e){var s;this.s13=e,s=this.GenPosition(!1,this.s13,t.ARC),this.a13=0+s.a12},e.GeodesicLine.prototype.SetArc=function(e){var s;this.a13=e,s=this.GenPosition(!0,this.a13,t.DISTANCE),this.s13=0+s.s12}}(n.Geodesic,n.GeodesicLine,n.Math),function(t,e,s,i){"use strict";var n,a,r,o;n=function(t,e){var i;return t=s.AngNormalize(t),e=s.AngNormalize(e),i=s.AngDiff(t,e).s,t<=0&&e>0&&i>0?1:e<=0&&t>0&&i<0?-1:0},a=function(t,e){return((e%=720)<=0&&e>-360||e>360?1:0)-((t%=720)<=0&&t>-360||t>360?1:0)},r=function(t,e,s,i,n){return t.Remainder(e),1&s&&t.Add((t.Sum()<0?1:-1)*e/2),i||t.Negate(),n?t.Sum()>e/2?t.Add(-e):t.Sum()<=-e/2&&t.Add(+e):t.Sum()>=e?t.Add(-e):t.Sum()<0&&t.Add(+e),0+t.Sum()},o=function(t,e,i,n,a){return t=s.remainder(t,e),1&i&&(t+=(t<0?1:-1)*e/2),n||(t*=-1),a?t>e/2?t-=e:t<=-e/2&&(t+=e):t>=e?t-=e:t<0&&(t+=e),0+t},t.PolygonArea=function(t,s){this._geod=t,this.a=this._geod.a,this.f=this._geod.f,this._area0=4*Math.PI*t._c2,this.polyline=s||!1,this._mask=e.LATITUDE|e.LONGITUDE|e.DISTANCE|(this.polyline?e.NONE:e.AREA|e.LONG_UNROLL),this.polyline||(this._areasum=new i.Accumulator(0)),this._perimetersum=new i.Accumulator(0),this.Clear()},t.PolygonArea.prototype.Clear=function(){this.num=0,this._crossings=0,this.polyline||this._areasum.Set(0),this._perimetersum.Set(0),this._lat0=this._lon0=this.lat=this.lon=Number.NaN},t.PolygonArea.prototype.AddPoint=function(t,e){var s;0===this.num?(this._lat0=this.lat=t,this._lon0=this.lon=e):(s=this._geod.Inverse(this.lat,this.lon,t,e,this._mask),this._perimetersum.Add(s.s12),this.polyline||(this._areasum.Add(s.S12),this._crossings+=n(this.lon,e)),this.lat=t,this.lon=e),++this.num},t.PolygonArea.prototype.AddEdge=function(t,e){var s;this.num&&(s=this._geod.Direct(this.lat,this.lon,t,e,this._mask),this._perimetersum.Add(e),this.polyline||(this._areasum.Add(s.S12),this._crossings+=a(this.lon,s.lon2)),this.lat=s.lat2,this.lon=s.lon2),++this.num},t.PolygonArea.prototype.Compute=function(t,e){var s,a,o={number:this.num};return this.num<2?(o.perimeter=0,this.polyline||(o.area=0),o):this.polyline?(o.perimeter=this._perimetersum.Sum(),o):(s=this._geod.Inverse(this.lat,this.lon,this._lat0,this._lon0,this._mask),o.perimeter=this._perimetersum.Sum(s.s12),(a=new i.Accumulator(this._areasum)).Add(s.S12),o.area=r(a,this._area0,this._crossings+n(this.lon,this._lon0),t,e),o)},t.PolygonArea.prototype.TestPoint=function(t,e,s,i){var a,r,h,l,u={number:this.num+1};if(0===this.num)return u.perimeter=0,this.polyline||(u.area=0),u;for(u.perimeter=this._perimetersum.Sum(),r=this.polyline?0:this._areasum.Sum(),h=this._crossings,l=0;l<(this.polyline?1:2);++l)a=this._geod.Inverse(0===l?this.lat:t,0===l?this.lon:e,0!==l?this._lat0:t,0!==l?this._lon0:e,this._mask),u.perimeter+=a.s12,this.polyline||(r+=a.S12,h+=n(0===l?this.lon:e,0!==l?this._lon0:e));return this.polyline||(u.area=o(r,this._area0,h,s,i)),u},t.PolygonArea.prototype.TestEdge=function(t,e,s,i){var r,h,l,u={number:this.num?this.num+1:0};return 0===this.num||(u.perimeter=this._perimetersum.Sum()+e,this.polyline||(h=this._areasum.Sum(),l=this._crossings,h+=(r=this._geod.Direct(this.lat,this.lon,t,e,this._mask)).S12,l+=a(this.lon,r.lon2),l+=n(r.lon2,this._lon0),r=this._geod.Inverse(r.lat2,r.lon2,this._lat0,this._lon0,this._mask),u.perimeter+=r.s12,h+=r.S12,u.area=o(h,this._area0,l,s,i))),u}}(n.PolygonArea,n.Geodesic,n.Math,n.Accumulator),n.DMS={},function(t){"use strict";var e,s,i,n,a="SNWE",r="-+",o="D'\":",h="°'\"",l=["degrees","minutes","seconds"];e=function(t,e){return t.indexOf(e.toUpperCase())},s=function(t,e){return String("0000").substr(0,Math.max(0,Math.min(4,e-t.length)))+t},t.NONE=0,t.LATITUDE=1,t.LONGITUDE=2,t.AZIMUTH=3,t.DEGREE=0,t.MINUTE=1,t.SECOND=2,t.Decode=function(s){var n,o,h,l,u,c,p,d,f=s,g=0,m=0,_=t.NONE;for(n=(f=f.replace(/\u00b0/g,"d").replace(/\u00ba/g,"d").replace(/\u2070/g,"d").replace(/\u02da/g,"d").replace(/\u2218/g,"d").replace(/\*/g,"d").replace(/`/g,"d").replace(/\u2032/g,"'").replace(/\u2035/g,"'").replace(/\u00b4/g,"'").replace(/\u2018/g,"'").replace(/\u2019/g,"'").replace(/\u201b/g,"'").replace(/\u02b9/g,"'").replace(/\u02ca/g,"'").replace(/\u02cb/g,"'").replace(/\u2033/g,'"').replace(/\u2036/g,'"').replace(/\u02dd/g,'"').replace(/\u201c/g,'"').replace(/\u201d/g,'"').replace(/\u201f/g,'"').replace(/\u02ba/g,'"').replace(/\u2795/g,"+").replace(/\u2064/g,"+").replace(/\u2010/g,"-").replace(/\u2011/g,"-").replace(/\u2013/g,"-").replace(/\u2014/g,"-").replace(/\u2212/g,"-").replace(/\u2796/g,"-").replace(/\u00a0/g,"").replace(/\u2007/g,"").replace(/\u2009/g,"").replace(/\u200a/g,"").replace(/\u200b/g,"").replace(/\u202f/g,"").replace(/\u2063/g,"").replace(/''/g,'"').trim()).length,c=0;c<n;c=d,++m)if(p=c,0===m&&e(a,f.charAt(p))>=0&&++p,(m>0||p<n&&e(r,f.charAt(p))>=0)&&++p,(o=f.substr(p,n-p).indexOf("-"))<0?o=n:o+=p,(h=f.substr(p,n-p).indexOf("+"))<0?h=n:h+=p,d=Math.min(o,h),g+=(l=i(f.substr(c,d-c))).val,u=l.ind,_===t.NONE)_=u;else if(u!==t.NONE&&_!==u)throw new Error("Incompatible hemisphere specifies in "+f.substr(0,d));if(0===m)throw new Error("Empty or incomplete DMS string "+f);return{val:g,ind:_}},i=function(s){var i,h,u,c,p,d,f,g,m,_,A,N,C,b,E,v,M={},y="";do{if(i=1,h=0,u=s.length,c=t.NONE,p=-1,u>h&&(p=e(a,s.charAt(h)))>=0&&(c=2&p?t.LONGITUDE:t.LATITUDE,i=1&p?1:-1,++h),u>h&&(p=e(a,s.charAt(u-1)))>=0&&p>=0){if(c!==t.NONE){y=s.charAt(h-1).toUpperCase()===s.charAt(u-1).toUpperCase()?"Repeated hemisphere indicators "+s.charAt(h-1)+" in "+s.substr(h-1,u-h+1):"Contradictory hemisphere indicators "+s.charAt(h-1)+" and "+s.charAt(u-1)+" in "+s.substr(h-1,u-h+1);break}c=2&p?t.LONGITUDE:t.LATITUDE,i=1&p?1:-1,--u}if(u>h&&(p=e(r,s.charAt(h)))>=0&&p>=0&&(i*=p?1:-1,++h),u===h){y="Empty or incomplete DMS string "+s;break}for(d=[0,0,0],f=[0,0,0],g=0,m=0,_=0,A=0,N=h,C=!1,b=0,E=0;N<u;)if(v=s.charAt(N++),(p=e("0123456789",v))>=0)++A,b>0?++b:(m=10*m+p,++E);else if("."===v){if(C){y="Multiple decimal points in "+s.substr(h,u-h);break}C=!0,b=1}else{if(!((p=e(o,v))>=0)){if(e(r,v)>=0){y="Internal sign in DMS string "+s.substr(h,u-h);break}y="Illegal character "+v+" in DMS string "+s.substr(h,u-h);break}if(p>=3){if(N===u){y="Illegal for colon to appear at the end of "+s.substr(h,u-h);break}p=g}if(p===g-1){y="Repeated "+l[p]+" component in "+s.substr(h,u-h);break}if(p<g){y=l[p]+" component follows "+l[g-1]+" component in "+s.substr(h,u-h);break}if(0===A){y="Missing numbers in "+l[p]+" component of "+s.substr(h,u-h);break}b>0&&(_=parseFloat(s.substr(N-E-b-1,E+b)),m=0),d[p]=m,f[p]=m+_,N<u&&(g=p+1,m=_=0,A=b=E=0)}if(y.length)break;if(e(o,s.charAt(N-1))<0){if(g>=3){y="Extra text following seconds in DMS string "+s.substr(h,u-h);break}if(0===A){y="Missing numbers in trailing component of "+s.substr(h,u-h);break}b>0&&(_=parseFloat(s.substr(N-E-b,E+b)),m=0),d[g]=m,f[g]=m+_}if(C&&0===b){y="Decimal point in non-terminal component of "+s.substr(h,u-h);break}if(d[1]>=60||f[1]>60){y="Minutes "+f[1]+" not in range [0,60)";break}if(d[2]>=60||f[2]>60){y="Seconds "+f[2]+" not in range [0,60)";break}return M.ind=c,M.val=i*(f[2]?(60*(60*f[0]+f[1])+f[2])/3600:f[1]?(60*f[0]+f[1])/60:f[0]),M}while(0);if(M.val=n(s),0===M.val)throw new Error(y);return M.ind=t.NONE,M},n=function(t){var e,s,i,n;return t.length<3?0:(s="-"===(e=t.toUpperCase().replace(/0+$/,"")).charAt(0)?-1:1,i="-"===e.charAt(0)||"+"===e.charAt(0)?1:0,1+(n=e.length-1)<i+3?0:"NAN"===(e=e.substr(i,n+1-i))||"1.#QNAN"===e||"1.#SNAN"===e||"1.#IND"===e||"1.#R"===e?Number.NaN:"INF"===e||"1.#INF"===e?s*Number.POSITIVE_INFINITY:0)},t.DecodeLatLon=function(e,s,i){var n,a,r={},o=t.Decode(e),h=t.Decode(s),l=o.val,u=o.ind,c=h.val,p=h.ind;if(i||(i=!1),u===t.NONE&&p===t.NONE?(u=i?t.LONGITUDE:t.LATITUDE,p=i?t.LATITUDE:t.LONGITUDE):u===t.NONE?u=t.LATITUDE+t.LONGITUDE-p:p===t.NONE&&(p=t.LATITUDE+t.LONGITUDE-u),u===p)throw new Error("Both "+e+" and "+s+" interpreted as "+(u===t.LATITUDE?"latitudes":"longitudes"));if(n=u===t.LATITUDE?l:c,a=u===t.LATITUDE?c:l,Math.abs(n)>90)throw new Error("Latitude "+n+" not in [-90,90]");return r.lat=n,r.lon=a,r},t.DecodeAngle=function(e){var s=t.Decode(e),i=s.val;if(s.ind!==t.NONE)throw new Error("Arc angle "+e+" includes a hemisphere N/E/W/S");return i},t.DecodeAzimuth=function(e){var s=t.Decode(e),i=s.val;if(s.ind===t.LATITUDE)throw new Error("Azimuth "+e+" has a latitude hemisphere N/S");return i},t.Encode=function(e,i,n,r){var o,l,u,c,p,d,f,g,m,_=1;if(r||(r=t.NONE),!isFinite(e))return String(e<0?"-inf":e>0?"inf":"nan");for(n=Math.min(15-2*i,n),o=0;o<i;++o)_*=60;for(o=0;o<n;++o)_*=10;for(r===t.AZIMUTH&&(e-=360*Math.floor(e/360)),c=((e*=l=e<0?-1:1)-(u=Math.floor(e)))*_+.5,c=(p=Math.floor(c))===c&&1==(1&p)?p-1:p,c/=_,(c=Math.floor((e-u)*_+.5)/_)>=1&&(u+=1,c-=1),d=[c,0,0],o=1;o<=i;++o)f=Math.floor(d[o-1]),g=d[o-1]-f,d[o]=60*g,d[o-1]=f;switch(d[0]+=u,m="",r===t.NONE&&l<0&&(m+="-"),i){case t.DEGREE:m+=s(d[0].toFixed(n),r===t.NONE?0:1+Math.min(r,2)+n+(n?1:0))+h.charAt(0);break;default:switch(m+=s(d[0].toFixed(0),r===t.NONE?0:1+Math.min(r,2))+h.charAt(0),i){case t.MINUTE:m+=s(d[1].toFixed(n),2+n+(n?1:0))+h.charAt(1);break;case t.SECOND:m+=s(d[1].toFixed(0),2)+h.charAt(1),m+=s(d[2].toFixed(n),2+n+(n?1:0))+h.charAt(2)}}return r!==t.NONE&&r!==t.AZIMUTH&&(m+=a.charAt((r===t.LATITUDE?0:2)+(l<0?0:1))),m}}(n.DMS),i=n,t.exports?t.exports=i:void 0===(s=function(){return i}.apply(e,[]))||(t.exports=s)}},e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}(()=>{"use strict";var t=s(965);const e=s(824).Geodesic.WGS84,i=document.getElementById("gpxFile"),n=document.getElementById("startLat"),a=document.getElementById("startLon"),r=document.getElementById("endLat"),o=document.getElementById("endLon"),h=document.getElementById("getScore"),l=document.getElementById("infoBlock"),u=document.getElementById("scoreBlock");n.value=localStorage.getItem("startLatInput"),a.value=localStorage.getItem("startLonInput"),r.value=localStorage.getItem("endLatInput"),o.value=localStorage.getItem("endLonInput"),window.onbeforeunload=()=>{localStorage.setItem("startLatInput",n.value),localStorage.setItem("startLonInput",a.value),localStorage.setItem("endLatInput",r.value),localStorage.setItem("endLonInput",o.value)};const c=()=>{l.style.display="none"};window.onerror=t=>{l.innerText=`An error has occured. Ensure the gpx file and start/end locations are right.\n    If the error is still present, send this message and your .gpx file to the author:\n    ${t}`,l.style.display="block"},i.oninput=()=>c(),n.oninput=()=>c(),a.oninput=()=>c(),r.oninput=()=>c(),o.oninput=()=>c(),h.onclick=()=>{if(!(i.value&&n.value&&a.value&&r.value&&o.value))return"Not all inputs have been filled",l.innerText="Not all inputs have been filled",void(l.style.display="block");const s=new FileReader;s.readAsText(i.files[0]),s.onload=()=>{const i=t.parse(s.result,{ignoreAttributes:!1,arrayMode:!0}).gpx[0].trk[0].trkseg.map((t=>t.trkpt)).flat().map((t=>[Number(t["@_lat"]),Number(t["@_lon"])])),h=[Number(n.value),Number(a.value)],l=[Number(r.value),Number(o.value)],{straightLineLength:c,totalPathLength:p,areaSum:d}=(t=>{const s=t[0],i=t[t.length-1],n=e.InverseLine(...s,...i),a=t=>{const s=e.Direct(n.lat1,n.lon1,n.azi1,t);return[s.lat2,s.lon2]},r=(t,s)=>e.Inverse(...t,...s).s12,o=([t,e],[s,i])=>[t+s,e+i],h=([t,e],[s,i])=>[t-s,e-i],l=([t,e],s)=>[t*s,e*s],u=([t,e],[s,i])=>t*i-e*s,c=([t,e])=>[e,-t];function p(t,e,s,i){const n=u(e,i),a=u(h(s,t),i),r=u(h(s,t),e);return 0===n&&0===r||0===n&&0!==r?null:o(t,l(e,a/n))}return t.reduce(((i,n,d)=>{if(n===s)return i;const f=t[d-1],g=e.Inverse(...s,...n).s12,m=a(g),_=a(g+5),A=h(_,m),N=h(n,f),C=function(t,e,s,i){const n=u(e,i),a=u(h(s,t),i),r=u(h(s,t),e);if(0===n&&0===r)return null;if(0===n&&0!==r)return null;const c=a/n;return c>=0&&c<=1?o(t,l(e,c)):null}(f,N,m,A),b=p(m,A,f,c(A)),E=p(m,A,n,c(A)),v=(([t,e],[s,i])=>t*s+e*i)(N,A)>0?1:-1;return{...i,areaSum:i.areaSum+v*(null!==C?.5*r(b,f)*r(b,C)+.5*r(E,n)*r(E,C):.5*(r(b,f)+r(E,n))*r(b,E)),totalPathLength:i.totalPathLength+r(f,n)}}),{straightLineLength:n.s13,areaSum:0,totalPathLength:0})})([h,...i,l]),f=t=>t.toFixed(2);u.innerText=`\n    Straight line length: ${f(c)}m\n    Your path length: ${f(p)}m\n    Area sum: ${f(d)}m^2\n    Average deviation (area sum / straight line length): ${f(d/c)}m\n\n    If this doesn't look right to you please send me your .gpx file and straight line start/end\n    `}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9qc29uMnhtbC5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9uaW1uZGF0YS5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9ub2RlMmpzb24uanMiLCJ3ZWJwYWNrOi8vc3RyYWlnaHQtbGluZS1taXNzaW9uLXNjb3JlLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvbm9kZTJqc29uX3N0ci5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vc3RyYWlnaHQtbGluZS1taXNzaW9uLXNjb3JlLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3RyYWlnaHQtbGluZS1taXNzaW9uLXNjb3JlLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1sTm9kZS5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxzdHIyeG1sbm9kZS5qcyIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9ub2RlX21vZHVsZXMvZ2VvZ3JhcGhpY2xpYi9nZW9ncmFwaGljbGliLmpzIiwid2VicGFjazovL3N0cmFpZ2h0LWxpbmUtbWlzc2lvbi1zY29yZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdHJhaWdodC1saW5lLW1pc3Npb24tc2NvcmUvLi9zcmMvZ2V0UGF0aFN0YXRzLmpzIiwid2VicGFjazovL3N0cmFpZ2h0LWxpbmUtbWlzc2lvbi1zY29yZS8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJidWlsZE9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImF0dHJpYnV0ZU5hbWVQcmVmaXgiLCJhdHRyTm9kZU5hbWUiLCJ0ZXh0Tm9kZU5hbWUiLCJpZ25vcmVBdHRyaWJ1dGVzIiwiY2RhdGFUYWdOYW1lIiwiY2RhdGFQb3NpdGlvbkNoYXIiLCJmb3JtYXQiLCJpbmRlbnRCeSIsInN1cHJlc3NFbXB0eU5vZGUiLCJ0YWdWYWx1ZVByb2Nlc3NvciIsImEiLCJhdHRyVmFsdWVQcm9jZXNzb3IiLCJwcm9wcyIsIlBhcnNlciIsIm9wdGlvbnMiLCJ0aGlzIiwiaXNBdHRyaWJ1dGUiLCJhdHRyUHJlZml4TGVuIiwibGVuZ3RoIiwiaXNDREFUQSIsInJlcGxhY2VDREFUQXN0ciIsInJlcGxhY2VDREFUQWFyciIsImluZGVudGF0ZSIsInRhZ0VuZENoYXIiLCJuZXdMaW5lIiwiYnVpbGRUZXh0Tm9kZSIsImJ1aWxkRW1wdHlUZXh0Tm9kZSIsImJ1aWxkT2JqTm9kZSIsImJ1aWxkRW1wdHlPYmpOb2RlIiwiYnVpbGRUZXh0VmFsTm9kZSIsImJ1aWxkT2JqZWN0Tm9kZSIsInN0ciIsImNkYXRhIiwicmVwbGFjZSIsImpvaW4iLCJ2IiwidmFsIiwia2V5IiwiYXR0clN0ciIsImxldmVsIiwiaW5jbHVkZXMiLCJyZXBlYXQiLCJuYW1lIiwic3RhcnRzV2l0aCIsInN1YnN0ciIsInByb3RvdHlwZSIsInBhcnNlIiwiak9iaiIsImoyeCIsImtleXMiLCJPYmplY3QiLCJsZW4iLCJpIiwiRGF0ZSIsImF0dHIiLCJBcnJheSIsImlzQXJyYXkiLCJhcnJMZW4iLCJqIiwiaXRlbSIsInJlc3VsdCIsIktzIiwiTCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhcnMiLCJuaWxDaGFyIiwibWlzc2luZ0NoYXIiLCJuaWxQcmVtaXRpdmUiLCJtaXNzaW5nUHJlbWl0aXZlIiwiZW1wdHlDaGFyIiwiZW1wdHlWYWx1ZSIsImJvdW5kcnlDaGFyIiwib2JqU3RhcnQiLCJhcnJTdGFydCIsImFycmF5RW5kIiwiY2hhcnNBcnIiLCJfZSIsIm5vZGUiLCJlX3NjaGVtYSIsInVuZGVmaW5lZCIsImdldFZhbHVlIiwiaGFzVmFsaWREYXRhIiwiY2hpbGQiLCJhdHRyc01hcCIsIml0ZW1TY2hlbWEiLCJhcnJfbGVuIiwiYXJyX2kiLCJyIiwicHJvY2Vzc1ZhbHVlIiwiaXNBcHBDaGFyIiwiY2giLCJpbmRleE9mIiwieDJqIiwiY29udmVydDJuaW1uIiwidXRpbCIsImNvbnZlcnRUb0pzb24iLCJpc0VtcHR5T2JqZWN0IiwiaXNFeGlzdCIsImFycmF5TW9kZSIsIm1lcmdlIiwiaW5kZXgiLCJ0YWduYW1lIiwidGFnIiwicHVzaCIsIl9jVG9Kc29uU3RyIiwiaXNOYU4iLCJjb252ZXJ0VG9Kc29uU3RyaW5nIiwibm9kZVRvSnNvbiIsInhtbFRvTm9kZW9iaiIsIngyeG1sbm9kZSIsInZhbGlkYXRvciIsInhtbERhdGEiLCJ2YWxpZGF0aW9uT3B0aW9uIiwidmFsaWRhdGUiLCJFcnJvciIsImVyciIsIm1zZyIsInRyYXZlcnNhYmxlT2JqIiwiZ2V0VHJhdmVyc2FsT2JqIiwiY29udmVydFRvbmltbiIsImoyeFBhcnNlciIsInBhcnNlVG9OaW1uIiwic2NoZW1hIiwibmFtZVJlZ2V4cCIsInJlZ2V4TmFtZSIsIlJlZ0V4cCIsIm9iaiIsInRhcmdldCIsIm5ld09wdGlvbnMiLCJpc05hbWUiLCJzdHJpbmciLCJleGVjIiwiZ2V0QWxsTWF0Y2hlcyIsInJlZ2V4IiwibWF0Y2hlcyIsIm1hdGNoIiwiYWxsbWF0Y2hlcyIsImFsbG93Qm9vbGVhbkF0dHJpYnV0ZXMiLCJyZWFkUEkiLCJzdGFydCIsImdldEVycm9yT2JqZWN0IiwiZ2V0TGluZU51bWJlckZvclBvc2l0aW9uIiwicmVhZENvbW1lbnRBbmRDREFUQSIsImFuZ2xlQnJhY2tldHNDb3VudCIsInJlYWRBdHRyaWJ1dGVTdHIiLCJzdGFydENoYXIiLCJ0YWdDbG9zZWQiLCJ2YWx1ZSIsInRhZ3MiLCJ0YWdGb3VuZCIsInJlYWNoZWRSb290IiwiY2xvc2luZ1RhZyIsInRhZ05hbWUiLCJ0cmltIiwic3Vic3RyaW5nIiwiaXNWYWxpZCIsInZhbGlkYXRlQXR0cmlidXRlU3RyaW5nIiwiY29kZSIsImxpbmUiLCJvdGciLCJwb3AiLCJhZnRlckFtcCIsInZhbGlkYXRlQW1wZXJzYW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsInZhbGlkQXR0clN0clJlZ3hwIiwiYXR0ck5hbWVzIiwiZ2V0UG9zaXRpb25Gcm9tTWF0Y2giLCJhdHRyTmFtZSIsInZhbGlkYXRlQXR0ck5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsInJlIiwidmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQiLCJjb3VudCIsIm1lc3NhZ2UiLCJsaW5lTnVtYmVyIiwic3BsaXQiLCJwYXJlbnQiLCJhZGRDaGlsZCIsInhtbE5vZGUiLCJOdW1iZXIiLCJwYXJzZUludCIsIndpbmRvdyIsInBhcnNlRmxvYXQiLCJpZ25vcmVOYW1lU3BhY2UiLCJwYXJzZU5vZGVWYWx1ZSIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwic3RvcE5vZGVzIiwicHJvY2Vzc1RhZ1ZhbHVlIiwicGFyc2VWYWx1ZSIsInBhcnNlVHJ1ZU51bWJlck9ubHkiLCJyZXNvbHZlTmFtZVNwYWNlIiwicHJlZml4IiwiY2hhckF0Iiwic2hvdWxkUGFyc2UiLCJwYXJzZWQiLCJhdHRyc1JlZ3giLCJidWlsZEF0dHJpYnV0ZXNNYXAiLCJhdHRycyIsImF0dHJDb2xsZWN0aW9uIiwiY2xvc2luZ0luZGV4Rm9yT3BlbmluZ1RhZyIsImRhdGEiLCJhdHRyQm91bmRhcnkiLCJ0YWdFeHAiLCJmaW5kQ2xvc2luZ0luZGV4IiwiZXJyTXNnIiwiY2xvc2luZ0luZGV4IiwieG1sT2JqIiwiY3VycmVudE5vZGUiLCJ0ZXh0RGF0YSIsImNsb3NlSW5kZXgiLCJjb2xvbkluZGV4Iiwic3RhcnRJbmRleCIsImNoaWxkTm9kZSIsInNlcGFyYXRvckluZGV4IiwibGFzdEluZGV4T2YiLCJnZW8iLCJHZW9ncmFwaGljTGliIiwiQ29uc3RhbnRzIiwiTWF0aCIsIkFjY3VtdWxhdG9yIiwiYyIsIldHUzg0IiwiZiIsInZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJ2ZXJzaW9uX3N0cmluZyIsIm0iLCJkaWdpdHMiLCJlcHNpbG9uIiwicG93IiwiZGVncmVlIiwiUEkiLCJzcSIsIngiLCJoeXBvdCIsInkiLCJiIiwiYWJzIiwibWF4IiwibWluIiwic3FydCIsImNicnQiLCJsb2cxcCIsInoiLCJsb2ciLCJhdGFuaCIsImNvcHlzaWduIiwic3VtIiwidSIsInMiLCJ1cCIsInZwcCIsInQiLCJwb2x5dmFsIiwiTiIsInAiLCJBbmdSb3VuZCIsInJlbWFpbmRlciIsIkFuZ05vcm1hbGl6ZSIsIkxhdEZpeCIsIk5hTiIsIkFuZ0RpZmYiLCJkIiwic2luY29zZCIsInEiLCJzaW54IiwiY29zeCIsInJvdW5kIiwic2luIiwiY29zIiwiYXRhbjJkIiwiYW5nIiwiYXRhbjIiLCJTZXQiLCJjb25zdHJ1Y3RvciIsIl9zIiwiX3QiLCJBZGQiLCJTdW0iLCJOZWdhdGUiLCJSZW1haW5kZXIiLCJHZW9kZXNpYyIsIkdlb2Rlc2ljTGluZSIsIlBvbHlnb25BcmVhIiwiZyIsImwiLCJuQzN4XyIsIm5DNHhfIiwiYXN0cm9pZCIsIkExbTFmX2NvZWZmIiwiQzFmX2NvZWZmIiwiQzFwZl9jb2VmZiIsIkEybTFmX2NvZWZmIiwiQzJmX2NvZWZmIiwiQTNfY29lZmYiLCJDM19jb2VmZiIsIkM0X2NvZWZmIiwibWF4aXQyXyIsInRvbDBfIiwidG9sMV8iLCJ0b2wyXyIsInRvbGJfIiwieHRocmVzaF8iLCJ0aW55XyIsIk1JTl9WQUxVRSIsIm5DMV8iLCJuQzFwXyIsIm5DMl8iLCJuQzNfIiwibkM0XyIsIkNBUF9DMSIsIkNBUF9DMXAiLCJDQVBfQzIiLCJDQVBfQzMiLCJDQVBfQzQiLCJOT05FIiwiQVJDIiwiTEFUSVRVREUiLCJMT05HSVRVREUiLCJBWklNVVRIIiwiRElTVEFOQ0UiLCJTVEFOREFSRCIsIkRJU1RBTkNFX0lOIiwiUkVEVUNFRExFTkdUSCIsIkdFT0RFU0lDU0NBTEUiLCJBUkVBIiwiQUxMIiwiT1VUX0FMTCIsIkxPTkdfVU5ST0xMIiwiT1VUX01BU0siLCJTaW5Db3NTZXJpZXMiLCJzaW5wIiwiayIsIm4iLCJhciIsInkwIiwieTEiLCJmbG9vciIsIlMiLCJyMiIsInIzIiwiZGlzYyIsIlQzIiwiVCIsInV2IiwidyIsIkExbTFmIiwiZXBzIiwibkExXyIsIkMxZiIsImVwczIiLCJvIiwiQzFwZiIsIkEybTFmIiwibkEyXyIsIkMyZiIsIl9mMSIsIl9lMiIsIl9lcDIiLCJfbiIsIl9iIiwiX2MyIiwiYXRhbiIsIl9ldG9sMiIsImlzRmluaXRlIiwiX0EzeCIsIl9DM3giLCJfQzR4IiwiQTNjb2VmZiIsIkMzY29lZmYiLCJDNGNvZWZmIiwibkEzXyIsIkEzZiIsIm5BM3hfIiwiQzNmIiwibXVsdCIsIkM0ZiIsIkxlbmd0aHMiLCJzaWcxMiIsInNzaWcxIiwiY3NpZzEiLCJkbjEiLCJzc2lnMiIsImNzaWcyIiwiZG4yIiwiY2JldDEiLCJjYmV0MiIsIm91dG1hc2siLCJDMWEiLCJDMmEiLCJCMSIsImNzaWcxMiIsInZhbHMiLCJtMHgiLCJKMTIiLCJBMSIsIkEyIiwiczEyYiIsIm0wIiwibTEyYiIsIk0xMiIsIk0yMSIsIkludmVyc2VTdGFydCIsInNiZXQxIiwic2JldDIiLCJsYW0xMiIsInNsYW0xMiIsImNsYW0xMiIsInNiZXQxMmEiLCJzaG9ydGxpbmUiLCJvbWcxMiIsInNiZXRtMiIsInNvbWcxMiIsImNvbWcxMiIsInNzaWcxMiIsImxhbXNjYWxlIiwiazIiLCJjYmV0MTJhIiwiYmV0MTJhIiwibnZhbHMiLCJvbWcxMmEiLCJsYW0xMngiLCJzYmV0MTIiLCJjYmV0MTIiLCJkbm0iLCJzYWxwMSIsImNhbHAxIiwic2FscDIiLCJjYWxwMiIsIkxhbWJkYTEyIiwic2xhbTEyMCIsImNsYW0xMjAiLCJkaWZmcCIsIkMzYSIsInNhbHAwIiwiY2FscDAiLCJzb21nMSIsImNvbWcxIiwic29tZzIiLCJjb21nMiIsIkIzMTIiLCJldGEiLCJkb21nMTIiLCJkbGFtMTIiLCJJbnZlcnNlIiwibGF0MSIsImxvbjEiLCJsYXQyIiwibG9uMiIsIkludmVyc2VJbnQiLCJhemkxIiwiYXppMiIsImxvbjEyIiwibG9uMTJzIiwibG9uc2lnbiIsInN3YXBwIiwibGF0c2lnbiIsInMxMngiLCJtMTJ4IiwibWVyaWRpYW4iLCJudW1pdCIsInNhbHAxYSIsImNhbHAxYSIsInNhbHAxYiIsImNhbHAxYiIsInRyaXBuIiwidHJpcGIiLCJkdiIsImRhbHAxIiwic2RhbHAxIiwiY2RhbHAxIiwibnNhbHAxIiwibGVuZ3RobWFzayIsImFscDEyIiwiQTQiLCJDNGEiLCJCNDEiLCJCNDIiLCJkYmV0MSIsImRiZXQyIiwic2FscDEyIiwiY2FscDEyIiwic2RvbWcxMiIsImNkb21nMTIiLCJhMTIiLCJzMTIiLCJtMTIiLCJTMTIiLCJHZW5EaXJlY3QiLCJhcmNtb2RlIiwiczEyX2ExMiIsIkdlblBvc2l0aW9uIiwiRGlyZWN0IiwiQXJjRGlyZWN0IiwiTGluZSIsImNhcHMiLCJEaXJlY3RMaW5lIiwiR2VuRGlyZWN0TGluZSIsIkFyY0RpcmVjdExpbmUiLCJHZW5TZXREaXN0YW5jZSIsIkludmVyc2VMaW5lIiwiU2V0QXJjIiwiUG9seWdvbiIsInBvbHlsaW5lIiwiZ2VvZCIsIl9kbjEiLCJfc2FscDAiLCJfY2FscDAiLCJfc3NpZzEiLCJfc29tZzEiLCJfY3NpZzEiLCJfY29tZzEiLCJfazIiLCJfQTFtMSIsIl9DMWEiLCJfQjExIiwiX3N0YXUxIiwiX2N0YXUxIiwiX0MxcGEiLCJfQTJtMSIsIl9DMmEiLCJfQjIxIiwiX0MzYSIsIl9BM2MiLCJfQjMxIiwiX0M0YSIsIl9BNCIsIl9CNDEiLCJhMTMiLCJzMTMiLCJCMTIiLCJBQjEiLCJ0YXUxMiIsIkUiLCJCMjIiLCJBQjIiLCJQb3NpdGlvbiIsIkFyY1Bvc2l0aW9uIiwiczEzX2ExMyIsIlNldERpc3RhbmNlIiwidHJhbnNpdCIsInRyYW5zaXRkaXJlY3QiLCJBcmVhUmVkdWNlQSIsIkFyZWFSZWR1Y2VCIiwiYXJlYSIsImFyZWEwIiwiY3Jvc3NpbmdzIiwicmV2ZXJzZSIsInNpZ24iLCJfZ2VvZCIsIl9hcmVhMCIsIl9tYXNrIiwiX2FyZWFzdW0iLCJfcGVyaW1ldGVyc3VtIiwiQ2xlYXIiLCJudW0iLCJfY3Jvc3NpbmdzIiwiX2xhdDAiLCJfbG9uMCIsImxhdCIsImxvbiIsIkFkZFBvaW50IiwiQWRkRWRnZSIsImF6aSIsIkNvbXB1dGUiLCJ0ZW1wc3VtIiwibnVtYmVyIiwicGVyaW1ldGVyIiwiVGVzdFBvaW50IiwiVGVzdEVkZ2UiLCJETVMiLCJsb29rdXAiLCJ6ZXJvZmlsbCIsImludGVybmFsRGVjb2RlIiwibnVtTWF0Y2giLCJoZW1pc3BoZXJlc18iLCJzaWduc18iLCJkbXNpbmRpY2F0b3JzXyIsImRtc2luZGljYXRvcnN1XyIsImNvbXBvbmVudHNfIiwidG9VcHBlckNhc2UiLCJERUdSRUUiLCJNSU5VVEUiLCJTRUNPTkQiLCJEZWNvZGUiLCJkbXMiLCJlbmQiLCJtaSIsInBpIiwiaW5kMiIsInBhIiwicGIiLCJkbXNhIiwiaW5kMSIsImluZCIsImJlZyIsImlwaWVjZXMiLCJmcGllY2VzIiwibnBpZWNlIiwiaWN1cnJlbnQiLCJmY3VycmVudCIsIm5jdXJyZW50IiwicG9pbnRzZWVuIiwiZGlnY291bnQiLCJpbnRjb3VudCIsImVycm9ybXNnIiwicDAiLCJwMSIsIlBPU0lUSVZFX0lORklOSVRZIiwiRGVjb2RlTGF0TG9uIiwic3RyYSIsInN0cmIiLCJsb25nZmlyc3QiLCJ2YWxzYSIsInZhbHNiIiwiaWEiLCJpYiIsIkRlY29kZUFuZ2xlIiwiYW5nc3RyIiwiRGVjb2RlQXppbXV0aCIsImF6aXN0ciIsIkVuY29kZSIsImFuZ2xlIiwidHJhaWxpbmciLCJwcmVjIiwiaWRlZ3JlZSIsImZkZWdyZWUiLCJwaWVjZXMiLCJpcCIsImZwIiwic2NhbGUiLCJ0b0ZpeGVkIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdweEZpbGVJbnB1dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdGFydExhdElucHV0Iiwic3RhcnRMb25JbnB1dCIsImVuZExhdElucHV0IiwiZW5kTG9uSW5wdXQiLCJnZXRTY29yZUJ1dHRvbiIsImluZm9CbG9jayIsInNjb3JlQmxvY2siLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwib25iZWZvcmV1bmxvYWQiLCJzZXRJdGVtIiwiaGlkZUluZm9CbG9jayIsInN0eWxlIiwiZGlzcGxheSIsIm9uZXJyb3IiLCJlcnJvciIsImlubmVyVGV4dCIsIm9uaW5wdXQiLCJvbmNsaWNrIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc1RleHQiLCJmaWxlcyIsIm9ubG9hZCIsInBhdGgiLCJncHgiLCJ0cmsiLCJ0cmtzZWciLCJtYXAiLCJzZWdtZW50IiwidHJrcHQiLCJmbGF0IiwidHJhY2tQb2ludCIsInN0cmFpZ2h0TGluZUxlbmd0aCIsInRvdGFsUGF0aExlbmd0aCIsImFyZWFTdW0iLCJzdHJhaWdodExpbmUiLCJzdHJhaWdodExpbmVQb2ludCIsIm1ldGVycyIsInBvaW50T25MaW5lIiwiZGlzdGFuY2UiLCJwb2ludEEiLCJwb2ludEIiLCJhZGQiLCJ4MSIsIngyIiwieTIiLCJzdWJ0cmFjdCIsIm11bHRpcGx5Iiwic2NhbGFyIiwiY3Jvc3NQcm9kdWN0IiwiZ2V0UGVycGVuZGljdWxhciIsImludGVyc2VjdExpbmVzIiwickNyb3NzUyIsInFNaW51c1BDcm9zc1MiLCJxTWludXNQQ3Jvc3NSIiwicmVkdWNlIiwicGF0aFN0YXRzIiwiY3VyUG9pbnQiLCJjdXJQb2ludEluZGV4IiwicHJldlBvaW50IiwiZGlzdGFuY2VGcm9tU3RhcnRUb0N1clBvaW50IiwiY2xvc2VQb2ludE9uU3RyYWlnaHRMaW5lIiwiZ3VpZGVQb2ludE9uU3RyYWlnaHRMaW5lIiwic3RyYWlnaHRMaW5lRGlyZWN0aW9uVmVjdG9yIiwicG9pbnRzRGlmZmVyZW5jZU5vcm1hbCIsInBhdGhJbnRlcnNlY3Rpb25XaXRoU3RyYWlnaHRMaW5lIiwiaW50ZXJzZWN0VmVjdG9yQW5kTGluZSIsInByZXZQb2ludFByb2plY3Rpb24iLCJjdXJQb2ludFByb2plY3Rpb24iLCJhcmVhTXVsdGlwbGllciIsImRvdFByb2R1Y3QiLCJuaWNlaWZ5Il0sIm1hcHBpbmdzIjoid0NBRUEsTUFBTUEsRUFBZSxvQkFFZkMsRUFBaUIsQ0FDckJDLG9CQUFxQixLQUNyQkMsY0FBYyxFQUNkQyxhQUFjLFFBQ2RDLGtCQUFrQixFQUNsQkMsY0FBYyxFQUNkQyxrQkFBbUIsTUFDbkJDLFFBQVEsRUFDUkMsU0FBVSxLQUNWQyxrQkFBa0IsRUFDbEJDLGtCQUFtQixTQUFTQyxHQUMxQixPQUFPQSxHQUVUQyxtQkFBb0IsU0FBU0QsR0FDM0IsT0FBT0EsSUFJTEUsRUFBUSxDQUNaLHNCQUNBLGVBQ0EsZUFDQSxtQkFDQSxlQUNBLG9CQUNBLFNBQ0EsV0FDQSxtQkFDQSxvQkFDQSxzQkFHRixTQUFTQyxFQUFPQyxHQUNkQyxLQUFLRCxRQUFVaEIsRUFBYWdCLEVBQVNmLEVBQWdCYSxHQUNqREcsS0FBS0QsUUFBUVgsa0JBQW9CWSxLQUFLRCxRQUFRYixhQUNoRGMsS0FBS0MsWUFBYyxXQUNqQixPQUFPLElBR1RELEtBQUtFLGNBQWdCRixLQUFLRCxRQUFRZCxvQkFBb0JrQixPQUN0REgsS0FBS0MsWUFBY0EsR0FFakJELEtBQUtELFFBQVFWLGFBQ2ZXLEtBQUtJLFFBQVVBLEVBRWZKLEtBQUtJLFFBQVUsV0FDYixPQUFPLEdBR1hKLEtBQUtLLGdCQUFrQkEsRUFDdkJMLEtBQUtNLGdCQUFrQkEsRUFFbkJO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LEVBQXdCRCxHQUErQixFQUNqRCxHQUFLLEVBRTdDLE1BQU8sSUFDRlAsRUFDSHRCLFFBQVNzQixFQUFVdEIsUUFBVW1DLEdBN0JZLE9BQXJDSixFQUVBLEdBQ0UxQixFQUFTNEIsRUFBcUJSLEdBQzlCcEIsRUFBUzRCLEVBQXFCRixHQUdoQyxHQUNFMUIsRUFBUzZCLEVBQW9CWCxHQUM3QmxCLEVBQVM2QixFQUFvQkgsR0FTakMsSUFKK0IxQixFQUFTNEIsRUFBcUJSLEdBQzdCcEIsRUFBUzZCLEVBQW9CWCxJQUN2Q2xCLEVBQVM0QixFQUFxQkMsSUFjdERuQyxnQkFBaUJ1QixFQUFVdkIsZ0JBQWtCTSxFQUFTb0IsRUFBV0YsTUFFbEUsQ0FDRHpCLG1CQUFvQkcsRUFBYWxKLElBQ2pDaUosUUFBUyxFQUNURCxnQkFBaUIsS0N6RWIsQ0FBYSxDQUFDMWhCLEtBQVVnaEIsRUFBTTdFLElBRTVCNkgsRUFBV2pKLEdBQVdBLEVBQU9pRSxRQUFRLEdBRTNDYyxFQUFXVSxVQUFZLCtCQUNDd0QsRUFBUXZDLDhCQUNadUMsRUFBUXRDLHNCQUNoQnNDLEVBQVFyQyxtRUFDbUNxQyxFQUFRckMsRUFBVUYsa0giLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy9wYXJzZSBFbXB0eSBOb2RlIGFzIHNlbGYgY2xvc2luZyBub2RlXG5jb25zdCBidWlsZE9wdGlvbnMgPSByZXF1aXJlKCcuL3V0aWwnKS5idWlsZE9wdGlvbnM7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnQF8nLFxuICBhdHRyTm9kZU5hbWU6IGZhbHNlLFxuICB0ZXh0Tm9kZU5hbWU6ICcjdGV4dCcsXG4gIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWUsXG4gIGNkYXRhVGFnTmFtZTogZmFsc2UsXG4gIGNkYXRhUG9zaXRpb25DaGFyOiAnXFxcXGMnLFxuICBmb3JtYXQ6IGZhbHNlLFxuICBpbmRlbnRCeTogJyAgJyxcbiAgc3VwcmVzc0VtcHR5Tm9kZTogZmFsc2UsXG4gIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIGF0dHJWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYSkge1xuICAgIHJldHVybiBhO1xuICB9LFxufTtcblxuY29uc3QgcHJvcHMgPSBbXG4gICdhdHRyaWJ1dGVOYW1lUHJlZml4JyxcbiAgJ2F0dHJOb2RlTmFtZScsXG4gICd0ZXh0Tm9kZU5hbWUnLFxuICAnaWdub3JlQXR0cmlidXRlcycsXG4gICdjZGF0YVRhZ05hbWUnLFxuICAnY2RhdGFQb3NpdGlvbkNoYXInLFxuICAnZm9ybWF0JyxcbiAgJ2luZGVudEJ5JyxcbiAgJ3N1cHJlc3NFbXB0eU5vZGUnLFxuICAndGFnVmFsdWVQcm9jZXNzb3InLFxuICAnYXR0clZhbHVlUHJvY2Vzc29yJyxcbl07XG5cbmZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0T3B0aW9ucywgcHJvcHMpO1xuICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgfHwgdGhpcy5vcHRpb25zLmF0dHJOb2RlTmFtZSkge1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBmdW5jdGlvbigvKmEqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hdHRyUHJlZml4TGVuID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoO1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBpc0F0dHJpYnV0ZTtcbiAgfVxuICBpZiAodGhpcy5vcHRpb25zLmNkYXRhVGFnTmFtZSkge1xuICAgIHRoaXMuaXNDREFUQSA9IGlzQ0RBVEE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0NEQVRBID0gZnVuY3Rpb24oLyphKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICB9XG4gIHRoaXMucmVwbGFjZUNEQVRBc3RyID0gcmVwbGFjZUNEQVRBc3RyO1xuICB0aGlzLnJlcGxhY2VDREFUQWFyciA9IHJlcGxhY2VDREFUQWFycjtcblxuICBpZiAodGhpcy5vcHRpb25zLmZvcm1hdCkge1xuICAgIHRoaXMuaW5kZW50YXRlID0gaW5kZW50YXRlO1xuICAgIHRoaXMudGFnRW5kQ2hhciA9ICc+XFxuJztcbiAgICB0aGlzLm5ld0xpbmUgPSAnXFxuJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmluZGVudGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgdGhpcy50YWdFbmRDaGFyID0gJz4nO1xuICAgIHRoaXMubmV3TGluZSA9ICcnO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5zdXByZXNzRW1wdHlOb2RlKSB7XG4gICAgdGhpcy5idWlsZFRleHROb2RlID0gYnVpbGRFbXB0eVRleHROb2RlO1xuICAgIHRoaXMuYnVpbGRPYmpOb2RlID0gYnVpbGRFbXB0eU9iak5vZGU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5idWlsZFRleHROb2RlID0gYnVpbGRUZXh0VmFsTm9kZTtcbiAgICB0aGlzLmJ1aWxkT2JqTm9kZSA9IGJ1aWxkT2JqZWN0Tm9kZTtcbiAgfVxuXG4gIHRoaXMuYnVpbGRUZXh0VmFsTm9kZSA9IGJ1aWxkVGV4dFZhbE5vZGU7XG4gIHRoaXMuYnVpbGRPYmplY3ROb2RlID0gYnVpbGRPYmplY3ROb2RlO1xufVxuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oak9iaikge1xuICByZXR1cm4gdGhpcy5qMngoak9iaiwgMCkudmFsO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5qMnggPSBmdW5jdGlvbihqT2JqLCBsZXZlbCkge1xuICBsZXQgYXR0clN0ciA9ICcnO1xuICBsZXQgdmFsID0gJyc7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhqT2JqKTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICh0eXBlb2Ygak9ialtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gc3VwcmVzcyB1bmRlZmluZWQgbm9kZVxuICAgIH0gZWxzZSBpZiAoak9ialtrZXldID09PSBudWxsKSB7XG4gICAgICB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIH0gZWxzZSBpZiAoak9ialtrZXldIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgdmFsICs9IHRoaXMuYnVpbGRUZXh0Tm9kZShqT2JqW2tleV0sIGtleSwgJycsIGxldmVsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBqT2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAvL3ByZW1pdGl2ZSB0eXBlXG4gICAgICBjb25zdCBhdHRyID0gdGhpcy5pc0F0dHJpYnV0ZShrZXkpO1xuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgYXR0clN0ciArPSAnICcgKyBhdHRyICsgJz1cIicgKyB0aGlzLm9wdGlvbnMuYXR0clZhbHVlUHJvY2Vzc29yKCcnICsgak9ialtrZXldKSArICdcIic7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNDREFUQShrZXkpKSB7XG4gICAgICAgIGlmIChqT2JqW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdKSB7XG4gICAgICAgICAgdmFsICs9IHRoaXMucmVwbGFjZUNEQVRBc3RyKGpPYmpbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0sIGpPYmpba2V5XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsICs9IHRoaXMucmVwbGFjZUNEQVRBc3RyKCcnLCBqT2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL3RhZyB2YWx1ZVxuICAgICAgICBpZiAoa2V5ID09PSB0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lKSB7XG4gICAgICAgICAgaWYgKGpPYmpbdGhpcy5vcHRpb25zLmNkYXRhVGFnTmFtZV0pIHtcbiAgICAgICAgICAgIC8vdmFsdWUgd2lsbCBhZGRlZCB3aGlsZSBwcm9jZXNzaW5nIGNkYXRhXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbCArPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoJycgKyBqT2JqW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5idWlsZFRleHROb2RlKGpPYmpba2V5XSwga2V5LCAnJywgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGpPYmpba2V5XSkpIHtcbiAgICAgIC8vcmVwZWF0ZWQgbm9kZXNcbiAgICAgIGlmICh0aGlzLmlzQ0RBVEEoa2V5KSkge1xuICAgICAgICB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpO1xuICAgICAgICBpZiAoak9ialt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSkge1xuICAgICAgICAgIHZhbCArPSB0aGlzLnJlcGxhY2VDREFUQWFycihqT2JqW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdLCBqT2JqW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCArPSB0aGlzLnJlcGxhY2VDREFUQWFycignJywgak9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9uZXN0ZWQgbm9kZXNcbiAgICAgICAgY29uc3QgYXJyTGVuID0gak9ialtrZXldLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhcnJMZW47IGorKykge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSBqT2JqW2tleV1bal07XG4gICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gc3VwcmVzcyB1bmRlZmluZWQgbm9kZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArICcvJyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5qMngoaXRlbSwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIHZhbCArPSB0aGlzLmJ1aWxkT2JqTm9kZShyZXN1bHQudmFsLCBrZXksIHJlc3VsdC5hdHRyU3RyLCBsZXZlbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbCArPSB0aGlzLmJ1aWxkVGV4dE5vZGUoaXRlbSwga2V5LCAnJywgbGV2ZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL25lc3RlZCBub2RlXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJOb2RlTmFtZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5hdHRyTm9kZU5hbWUpIHtcbiAgICAgICAgY29uc3QgS3MgPSBPYmplY3Qua2V5cyhqT2JqW2tleV0pO1xuICAgICAgICBjb25zdCBMID0gS3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IEw7IGorKykge1xuICAgICAgICAgIGF0dHJTdHIgKz0gJyAnICsgS3Nbal0gKyAnPVwiJyArIHRoaXMub3B0aW9ucy5hdHRyVmFsdWVQcm9jZXNzb3IoJycgKyBqT2JqW2tleV1bS3Nbal1dKSArICdcIic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuajJ4KGpPYmpba2V5XSwgbGV2ZWwgKyAxKTtcbiAgICAgICAgdmFsICs9IHRoaXMuYnVpbGRPYmpOb2RlKHJlc3VsdC52YWwsIGtleSwgcmVzdWx0LmF0dHJTdHIsIGxldmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHthdHRyU3RyOiBhdHRyU3RyLCB2YWw6IHZhbH07XG59O1xuXG5mdW5jdGlvbiByZXBsYWNlQ0RBVEFzdHIoc3RyLCBjZGF0YSkge1xuICBzdHIgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoJycgKyBzdHIpO1xuICBpZiAodGhpcy5vcHRpb25zLmNkYXRhUG9zaXRpb25DaGFyID09PSAnJyB8fCBzdHIgPT09ICcnKSB7XG4gICAgcmV0dXJuIHN0ciArICc8IVtDREFUQVsnICsgY2RhdGEgKyAnXV0nICsgdGhpcy50YWdFbmRDaGFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSh0aGlzLm9wdGlvbnMuY2RhdGFQb3NpdGlvbkNoYXIsICc8IVtDREFUQVsnICsgY2RhdGEgKyAnXV0nICsgdGhpcy50YWdFbmRDaGFyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlQ0RBVEFhcnIoc3RyLCBjZGF0YSkge1xuICBzdHIgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoJycgKyBzdHIpO1xuICBpZiAodGhpcy5vcHRpb25zLmNkYXRhUG9zaXRpb25DaGFyID09PSAnJyB8fCBzdHIgPT09ICcnKSB7XG4gICAgcmV0dXJuIHN0ciArICc8IVtDREFUQVsnICsgY2RhdGEuam9pbignXV0+PCFbQ0RBVEFbJykgKyAnXV0nICsgdGhpcy50YWdFbmRDaGFyO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IHYgaW4gY2RhdGEpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHRoaXMub3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhciwgJzwhW0NEQVRBWycgKyBjZGF0YVt2XSArICddXT4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ciArIHRoaXMubmV3TGluZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBidWlsZE9iamVjdE5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmIChhdHRyU3RyICYmICF2YWwuaW5jbHVkZXMoJzwnKSkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgK1xuICAgICAgJzwnICtcbiAgICAgIGtleSArXG4gICAgICBhdHRyU3RyICtcbiAgICAgICc+JyArXG4gICAgICB2YWwgK1xuICAgICAgLy8rIHRoaXMubmV3TGluZVxuICAgICAgLy8gKyB0aGlzLmluZGVudGF0ZShsZXZlbClcbiAgICAgICc8LycgK1xuICAgICAga2V5ICtcbiAgICAgIHRoaXMudGFnRW5kQ2hhclxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuaW5kZW50YXRlKGxldmVsKSArXG4gICAgICAnPCcgK1xuICAgICAga2V5ICtcbiAgICAgIGF0dHJTdHIgK1xuICAgICAgdGhpcy50YWdFbmRDaGFyICtcbiAgICAgIHZhbCArXG4gICAgICAvLysgdGhpcy5uZXdMaW5lXG4gICAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgK1xuICAgICAgJzwvJyArXG4gICAgICBrZXkgK1xuICAgICAgdGhpcy50YWdFbmRDaGFyXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBidWlsZEVtcHR5T2JqTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgaWYgKHZhbCAhPT0gJycpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZE9iamVjdE5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0ciArICcvJyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAvLysgdGhpcy5uZXdMaW5lXG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRUZXh0VmFsTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgcmV0dXJuIChcbiAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgK1xuICAgICc8JyArXG4gICAga2V5ICtcbiAgICBhdHRyU3RyICtcbiAgICAnPicgK1xuICAgIHRoaXMub3B0aW9ucy50YWdWYWx1ZVByb2Nlc3Nvcih2YWwpICtcbiAgICAnPC8nICtcbiAgICBrZXkgK1xuICAgIHRoaXMudGFnRW5kQ2hhclxuICApO1xufVxuXG5mdW5jdGlvbiBidWlsZEVtcHR5VGV4dE5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmICh2YWwgIT09ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRUZXh0VmFsTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGVudGF0ZShsZXZlbCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLmluZGVudEJ5LnJlcGVhdChsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIGlzQXR0cmlidXRlKG5hbWUgLyosIG9wdGlvbnMqLykge1xuICBpZiAobmFtZS5zdGFydHNXaXRoKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4KSkge1xuICAgIHJldHVybiBuYW1lLnN1YnN0cih0aGlzLmF0dHJQcmVmaXhMZW4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0NEQVRBKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgPT09IHRoaXMub3B0aW9ucy5jZGF0YVRhZ05hbWU7XG59XG5cbi8vZm9ybWF0dGluZ1xuLy9pbmRlbnRhdGlvblxuLy9cXG4gYWZ0ZXIgZWFjaCBjbG9zaW5nIG9yIHNlbGYgY2xvc2luZyB0YWdcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBjaGFyID0gZnVuY3Rpb24oYSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShhKTtcbn07XG5cbmNvbnN0IGNoYXJzID0ge1xuICBuaWxDaGFyOiBjaGFyKDE3NiksXG4gIG1pc3NpbmdDaGFyOiBjaGFyKDIwMSksXG4gIG5pbFByZW1pdGl2ZTogY2hhcigxNzUpLFxuICBtaXNzaW5nUHJlbWl0aXZlOiBjaGFyKDIwMCksXG5cbiAgZW1wdHlDaGFyOiBjaGFyKDE3OCksXG4gIGVtcHR5VmFsdWU6IGNoYXIoMTc3KSwgLy9lbXB0eSBQcmVtaXRpdmVcblxuICBib3VuZHJ5Q2hhcjogY2hhcigxNzkpLFxuXG4gIG9ialN0YXJ0OiBjaGFyKDE5OCksXG4gIGFyclN0YXJ0OiBjaGFyKDIwNCksXG4gIGFycmF5RW5kOiBjaGFyKDE4NSksXG59O1xuXG5jb25zdCBjaGFyc0FyciA9IFtcbiAgY2hhcnMubmlsQ2hhcixcbiAgY2hhcnMubmlsUHJlbWl0aXZlLFxuICBjaGFycy5taXNzaW5nQ2hhcixcbiAgY2hhcnMubWlzc2luZ1ByZW1pdGl2ZSxcbiAgY2hhcnMuYm91bmRyeUNoYXIsXG4gIGNoYXJzLmVtcHR5Q2hhcixcbiAgY2hhcnMuZW1wdHlWYWx1ZSxcbiAgY2hhcnMuYXJyYXlFbmQsXG4gIGNoYXJzLm9ialN0YXJ0LFxuICBjaGFycy5hcnJTdGFydCxcbl07XG5cbmNvbnN0IF9lID0gZnVuY3Rpb24obm9kZSwgZV9zY2hlbWEsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlX3NjaGVtYSA9PT0gJ3N0cmluZycpIHtcbiAgICAvL3ByZW1pdGl2ZVxuICAgIGlmIChub2RlICYmIG5vZGVbMF0gJiYgbm9kZVswXS52YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGdldFZhbHVlKG5vZGVbMF0udmFsLCBlX3NjaGVtYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXRWYWx1ZShub2RlLCBlX3NjaGVtYSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGhhc1ZhbGlkRGF0YSA9IGhhc0RhdGEobm9kZSk7XG4gICAgaWYgKGhhc1ZhbGlkRGF0YSA9PT0gdHJ1ZSkge1xuICAgICAgbGV0IHN0ciA9ICcnO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZV9zY2hlbWEpKSB7XG4gICAgICAgIC8vYXR0cmlidXRlcyBjYW4ndCBiZSByZXBlYXRlZC4gaGVuY2UgY2hlY2sgaW4gY2hpbGRyZW4gdGFncyBvbmx5XG4gICAgICAgIHN0ciArPSBjaGFycy5hcnJTdGFydDtcbiAgICAgICAgY29uc3QgaXRlbVNjaGVtYSA9IGVfc2NoZW1hWzBdO1xuICAgICAgICAvL3ZhciBpdGVtU2NoZW1hVHlwZSA9IGl0ZW1TY2hlbWE7XG4gICAgICAgIGNvbnN0IGFycl9sZW4gPSBub2RlLmxlbmd0aDtcblxuICAgICAgICBpZiAodHlwZW9mIGl0ZW1TY2hlbWEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZm9yIChsZXQgYXJyX2kgPSAwOyBhcnJfaSA8IGFycl9sZW47IGFycl9pKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBnZXRWYWx1ZShub2RlW2Fycl9pXS52YWwsIGl0ZW1TY2hlbWEpO1xuICAgICAgICAgICAgc3RyID0gcHJvY2Vzc1ZhbHVlKHN0ciwgcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobGV0IGFycl9pID0gMDsgYXJyX2kgPCBhcnJfbGVuOyBhcnJfaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByID0gX2Uobm9kZVthcnJfaV0sIGl0ZW1TY2hlbWEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgc3RyID0gcHJvY2Vzc1ZhbHVlKHN0ciwgcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0ciArPSBjaGFycy5hcnJheUVuZDsgLy9pbmRpY2F0ZXMgdGhhdCBuZXh0IGl0ZW0gaXMgbm90IGFycmF5IGl0ZW1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vb2JqZWN0XG4gICAgICAgIHN0ciArPSBjaGFycy5vYmpTdGFydDtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGVfc2NoZW1hKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgICAgICBub2RlID0gbm9kZVswXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpIGluIGtleXMpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIC8vYSBwcm9wZXJ0eSBkZWZpbmVkIGluIHNjaGVtYSBjYW4gYmUgcHJlc2VudCBlaXRoZXIgaW4gYXR0cnNNYXAgb3IgY2hpbGRyZW4gdGFnc1xuICAgICAgICAgIC8vb3B0aW9ucy50ZXh0Tm9kZU5hbWUgd2lsbCBub3QgcHJlc2VudCBpbiBib3RoIG1hcHMsIHRha2UgaXQncyB2YWx1ZSBmcm9tIHZhbFxuICAgICAgICAgIC8vb3B0aW9ucy5hdHRyTm9kZU5hbWUgd2lsbCBiZSBwcmVzZW50IGluIGF0dHJzTWFwXG4gICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgJiYgbm9kZS5hdHRyc01hcCAmJiBub2RlLmF0dHJzTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHIgPSBfZShub2RlLmF0dHJzTWFwW2tleV0sIGVfc2NoZW1hW2tleV0sIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBvcHRpb25zLnRleHROb2RlTmFtZSkge1xuICAgICAgICAgICAgciA9IF9lKG5vZGUudmFsLCBlX3NjaGVtYVtrZXldLCBvcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgciA9IF9lKG5vZGUuY2hpbGRba2V5XSwgZV9zY2hlbWFba2V5XSwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ciA9IHByb2Nlc3NWYWx1ZShzdHIsIHIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFzVmFsaWREYXRhO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgZ2V0VmFsdWUgPSBmdW5jdGlvbihhIC8qLCB0eXBlKi8pIHtcbiAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICByZXR1cm4gY2hhcnMubWlzc2luZ1ByZW1pdGl2ZTtcbiAgICBjYXNlIG51bGw6XG4gICAgICByZXR1cm4gY2hhcnMubmlsUHJlbWl0aXZlO1xuICAgIGNhc2UgJyc6XG4gICAgICByZXR1cm4gY2hhcnMuZW1wdHlWYWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGE7XG4gIH1cbn07XG5cbmNvbnN0IHByb2Nlc3NWYWx1ZSA9IGZ1bmN0aW9uKHN0ciwgcikge1xuICBpZiAoIWlzQXBwQ2hhcihyWzBdKSAmJiAhaXNBcHBDaGFyKHN0cltzdHIubGVuZ3RoIC0gMV0pKSB7XG4gICAgc3RyICs9IGNoYXJzLmJvdW5kcnlDaGFyO1xuICB9XG4gIHJldHVybiBzdHIgKyByO1xufTtcblxuY29uc3QgaXNBcHBDaGFyID0gZnVuY3Rpb24oY2gpIHtcbiAgcmV0dXJuIGNoYXJzQXJyLmluZGV4T2YoY2gpICE9PSAtMTtcbn07XG5cbmZ1bmN0aW9uIGhhc0RhdGEoak9iaikge1xuICBpZiAoak9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoYXJzLm1pc3NpbmdDaGFyO1xuICB9IGVsc2UgaWYgKGpPYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gY2hhcnMubmlsQ2hhcjtcbiAgfSBlbHNlIGlmIChcbiAgICBqT2JqLmNoaWxkICYmXG4gICAgT2JqZWN0LmtleXMoak9iai5jaGlsZCkubGVuZ3RoID09PSAwICYmXG4gICAgKCFqT2JqLmF0dHJzTWFwIHx8IE9iamVjdC5rZXlzKGpPYmouYXR0cnNNYXApLmxlbmd0aCA9PT0gMClcbiAgKSB7XG4gICAgcmV0dXJuIGNoYXJzLmVtcHR5Q2hhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5jb25zdCB4MmogPSByZXF1aXJlKCcuL3htbHN0cjJ4bWxub2RlJyk7XG5jb25zdCBidWlsZE9wdGlvbnMgPSByZXF1aXJlKCcuL3V0aWwnKS5idWlsZE9wdGlvbnM7XG5cbmNvbnN0IGNvbnZlcnQybmltbiA9IGZ1bmN0aW9uKG5vZGUsIGVfc2NoZW1hLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBidWlsZE9wdGlvbnMob3B0aW9ucywgeDJqLmRlZmF1bHRPcHRpb25zLCB4MmoucHJvcHMpO1xuICByZXR1cm4gX2Uobm9kZSwgZV9zY2hlbWEsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5jb252ZXJ0Mm5pbW4gPSBjb252ZXJ0Mm5pbW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY29uc3QgY29udmVydFRvSnNvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgak9iaiA9IHt9O1xuXG4gIC8vd2hlbiBubyBjaGlsZCBub2RlIG9yIGF0dHIgaXMgcHJlc2VudFxuICBpZiAoKCFub2RlLmNoaWxkIHx8IHV0aWwuaXNFbXB0eU9iamVjdChub2RlLmNoaWxkKSkgJiYgKCFub2RlLmF0dHJzTWFwIHx8IHV0aWwuaXNFbXB0eU9iamVjdChub2RlLmF0dHJzTWFwKSkpIHtcbiAgICByZXR1cm4gdXRpbC5pc0V4aXN0KG5vZGUudmFsKSA/IG5vZGUudmFsIDogJyc7XG4gIH0gZWxzZSB7XG4gICAgLy9vdGhlcndpc2UgY3JlYXRlIGEgdGV4dG5vZGUgaWYgbm9kZSBoYXMgc29tZSB0ZXh0XG4gICAgaWYgKHV0aWwuaXNFeGlzdChub2RlLnZhbCkpIHtcbiAgICAgIGlmICghKHR5cGVvZiBub2RlLnZhbCA9PT0gJ3N0cmluZycgJiYgKG5vZGUudmFsID09PSAnJyB8fCBub2RlLnZhbCA9PT0gb3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhcikpKSB7XG4gICAgICAgIGlmKG9wdGlvbnMuYXJyYXlNb2RlID09PSBcInN0cmljdFwiKXtcbiAgICAgICAgICBqT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IFsgbm9kZS52YWwgXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgak9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBub2RlLnZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHV0aWwubWVyZ2Uoak9iaiwgbm9kZS5hdHRyc01hcCwgb3B0aW9ucy5hcnJheU1vZGUpO1xuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhub2RlLmNoaWxkKTtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGtleXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIHRhZ25hbWUgPSBrZXlzW2luZGV4XTtcbiAgICBpZiAobm9kZS5jaGlsZFt0YWduYW1lXSAmJiBub2RlLmNoaWxkW3RhZ25hbWVdLmxlbmd0aCA+IDEpIHtcbiAgICAgIGpPYmpbdGFnbmFtZV0gPSBbXTtcbiAgICAgIGZvciAodmFyIHRhZyBpbiBub2RlLmNoaWxkW3RhZ25hbWVdKSB7XG4gICAgICAgIGpPYmpbdGFnbmFtZV0ucHVzaChjb252ZXJ0VG9Kc29uKG5vZGUuY2hpbGRbdGFnbmFtZV1bdGFnXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZihvcHRpb25zLmFycmF5TW9kZSA9PT0gdHJ1ZSl7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnZlcnRUb0pzb24obm9kZS5jaGlsZFt0YWduYW1lXVswXSwgb3B0aW9ucylcbiAgICAgICAgaWYodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgak9ialt0YWduYW1lXSA9IFsgcmVzdWx0IF07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBqT2JqW3RhZ25hbWVdID0gcmVzdWx0O1xuICAgICAgfWVsc2UgaWYob3B0aW9ucy5hcnJheU1vZGUgPT09IFwic3RyaWN0XCIpe1xuICAgICAgICBqT2JqW3RhZ25hbWVdID0gW2NvbnZlcnRUb0pzb24obm9kZS5jaGlsZFt0YWduYW1lXVswXSwgb3B0aW9ucykgXTtcbiAgICAgIH1lbHNle1xuICAgICAgICBqT2JqW3RhZ25hbWVdID0gY29udmVydFRvSnNvbihub2RlLmNoaWxkW3RhZ25hbWVdWzBdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL2FkZCB2YWx1ZVxuICByZXR1cm4gak9iajtcbn07XG5cbmV4cG9ydHMuY29udmVydFRvSnNvbiA9IGNvbnZlcnRUb0pzb247XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmNvbnN0IGJ1aWxkT3B0aW9ucyA9IHJlcXVpcmUoJy4vdXRpbCcpLmJ1aWxkT3B0aW9ucztcbmNvbnN0IHgyaiA9IHJlcXVpcmUoJy4veG1sc3RyMnhtbG5vZGUnKTtcblxuLy9UT0RPOiBkbyBpdCBsYXRlclxuY29uc3QgY29udmVydFRvSnNvblN0cmluZyA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zLCB4MmouZGVmYXVsdE9wdGlvbnMsIHgyai5wcm9wcyk7XG5cbiAgb3B0aW9ucy5pbmRlbnRCeSA9IG9wdGlvbnMuaW5kZW50QnkgfHwgJyc7XG4gIHJldHVybiBfY1RvSnNvblN0cihub2RlLCBvcHRpb25zLCAwKTtcbn07XG5cbmNvbnN0IF9jVG9Kc29uU3RyID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgbGV0IGpPYmogPSAneyc7XG5cbiAgLy90cmF2ZXIgdGhyb3VnaCBhbGwgdGhlIGNoaWxkcmVuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhub2RlLmNoaWxkKTtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwga2V5cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB2YXIgdGFnbmFtZSA9IGtleXNbaW5kZXhdO1xuICAgIGlmIChub2RlLmNoaWxkW3RhZ25hbWVdICYmIG5vZGUuY2hpbGRbdGFnbmFtZV0ubGVuZ3RoID4gMSkge1xuICAgICAgak9iaiArPSAnXCInICsgdGFnbmFtZSArICdcIiA6IFsgJztcbiAgICAgIGZvciAodmFyIHRhZyBpbiBub2RlLmNoaWxkW3RhZ25hbWVdKSB7XG4gICAgICAgIGpPYmogKz0gX2NUb0pzb25TdHIobm9kZS5jaGlsZFt0YWduYW1lXVt0YWddLCBvcHRpb25zKSArICcgLCAnO1xuICAgICAgfVxuICAgICAgak9iaiA9IGpPYmouc3Vic3RyKDAsIGpPYmoubGVuZ3RoIC0gMSkgKyAnIF0gJzsgLy9yZW1vdmUgZXh0cmEgY29tbWEgaW4gbGFzdFxuICAgIH0gZWxzZSB7XG4gICAgICBqT2JqICs9ICdcIicgKyB0YWduYW1lICsgJ1wiIDogJyArIF9jVG9Kc29uU3RyKG5vZGUuY2hpbGRbdGFnbmFtZV1bMF0sIG9wdGlvbnMpICsgJyAsJztcbiAgICB9XG4gIH1cbiAgdXRpbC5tZXJnZShqT2JqLCBub2RlLmF0dHJzTWFwKTtcbiAgLy9hZGQgYXR0cnNNYXAgYXMgbmV3IGNoaWxkcmVuXG4gIGlmICh1dGlsLmlzRW1wdHlPYmplY3Qoak9iaikpIHtcbiAgICByZXR1cm4gdXRpbC5pc0V4aXN0KG5vZGUudmFsKSA/IG5vZGUudmFsIDogJyc7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHV0aWwuaXNFeGlzdChub2RlLnZhbCkpIHtcbiAgICAgIGlmICghKHR5cGVvZiBub2RlLnZhbCA9PT0gJ3N0cmluZycgJiYgKG5vZGUudmFsID09PSAnJyB8fCBub2RlLnZhbCA9PT0gb3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhcikpKSB7XG4gICAgICAgIGpPYmogKz0gJ1wiJyArIG9wdGlvbnMudGV4dE5vZGVOYW1lICsgJ1wiIDogJyArIHN0cmluZ3ZhbChub2RlLnZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vYWRkIHZhbHVlXG4gIGlmIChqT2JqW2pPYmoubGVuZ3RoIC0gMV0gPT09ICcsJykge1xuICAgIGpPYmogPSBqT2JqLnN1YnN0cigwLCBqT2JqLmxlbmd0aCAtIDIpO1xuICB9XG4gIHJldHVybiBqT2JqICsgJ30nO1xufTtcblxuZnVuY3Rpb24gc3RyaW5ndmFsKHYpIHtcbiAgaWYgKHYgPT09IHRydWUgfHwgdiA9PT0gZmFsc2UgfHwgIWlzTmFOKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICdcIicgKyB2ICsgJ1wiJztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRlbnRhdGUob3B0aW9ucywgbGV2ZWwpIHtcbiAgcmV0dXJuIG9wdGlvbnMuaW5kZW50QnkucmVwZWF0KGxldmVsKTtcbn1cblxuZXhwb3J0cy5jb252ZXJ0VG9Kc29uU3RyaW5nID0gY29udmVydFRvSnNvblN0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgbm9kZVRvSnNvbiA9IHJlcXVpcmUoJy4vbm9kZTJqc29uJyk7XG5jb25zdCB4bWxUb05vZGVvYmogPSByZXF1aXJlKCcuL3htbHN0cjJ4bWxub2RlJyk7XG5jb25zdCB4MnhtbG5vZGUgPSByZXF1aXJlKCcuL3htbHN0cjJ4bWxub2RlJyk7XG5jb25zdCBidWlsZE9wdGlvbnMgPSByZXF1aXJlKCcuL3V0aWwnKS5idWlsZE9wdGlvbnM7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuL3ZhbGlkYXRvcicpO1xuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oeG1sRGF0YSwgb3B0aW9ucywgdmFsaWRhdGlvbk9wdGlvbikge1xuICBpZiggdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgaWYodmFsaWRhdGlvbk9wdGlvbiA9PT0gdHJ1ZSkgdmFsaWRhdGlvbk9wdGlvbiA9IHt9XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdG9yLnZhbGlkYXRlKHhtbERhdGEsIHZhbGlkYXRpb25PcHRpb24pO1xuICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCByZXN1bHQuZXJyLm1zZylcbiAgICB9XG4gIH1cbiAgb3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zLCB4MnhtbG5vZGUuZGVmYXVsdE9wdGlvbnMsIHgyeG1sbm9kZS5wcm9wcyk7XG4gIGNvbnN0IHRyYXZlcnNhYmxlT2JqID0geG1sVG9Ob2Rlb2JqLmdldFRyYXZlcnNhbE9iaih4bWxEYXRhLCBvcHRpb25zKVxuICAvL3ByaW50KHRyYXZlcnNhYmxlT2JqLCBcIiAgXCIpO1xuICByZXR1cm4gbm9kZVRvSnNvbi5jb252ZXJ0VG9Kc29uKHRyYXZlcnNhYmxlT2JqLCBvcHRpb25zKTtcbn07XG5leHBvcnRzLmNvbnZlcnRUb25pbW4gPSByZXF1aXJlKCcuLi9zcmMvbmltbmRhdGEnKS5jb252ZXJ0Mm5pbW47XG5leHBvcnRzLmdldFRyYXZlcnNhbE9iaiA9IHhtbFRvTm9kZW9iai5nZXRUcmF2ZXJzYWxPYmo7XG5leHBvcnRzLmNvbnZlcnRUb0pzb24gPSBub2RlVG9Kc29uLmNvbnZlcnRUb0pzb247XG5leHBvcnRzLmNvbnZlcnRUb0pzb25TdHJpbmcgPSByZXF1aXJlKCcuL25vZGUyanNvbl9zdHInKS5jb252ZXJ0VG9Kc29uU3RyaW5nO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRvci52YWxpZGF0ZTtcbmV4cG9ydHMuajJ4UGFyc2VyID0gcmVxdWlyZSgnLi9qc29uMnhtbCcpO1xuZXhwb3J0cy5wYXJzZVRvTmltbiA9IGZ1bmN0aW9uKHhtbERhdGEsIHNjaGVtYSwgb3B0aW9ucykge1xuICByZXR1cm4gZXhwb3J0cy5jb252ZXJ0VG9uaW1uKGV4cG9ydHMuZ2V0VHJhdmVyc2FsT2JqKHhtbERhdGEsIG9wdGlvbnMpLCBzY2hlbWEsIG9wdGlvbnMpO1xufTtcblxuXG5mdW5jdGlvbiBwcmludCh4bWxOb2RlLCBpbmRlbnRhdGlvbil7XG4gIGlmKHhtbE5vZGUpe1xuICAgIGNvbnNvbGUubG9nKGluZGVudGF0aW9uICsgXCJ7XCIpXG4gICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyBcIiAgXFxcInRhZ05hbWVcXFwiOiBcXFwiXCIgKyB4bWxOb2RlLnRhZ25hbWUgKyBcIlxcXCIsIFwiKTtcbiAgICBpZih4bWxOb2RlLnBhcmVudCl7XG4gICAgICBjb25zb2xlLmxvZyhpbmRlbnRhdGlvbiArIFwiICBcXFwicGFyZW50XFxcIjogXFxcIlwiICsgeG1sTm9kZS5wYXJlbnQudGFnbmFtZSAgKyBcIlxcXCIsIFwiKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyBcIiAgXFxcInZhbFxcXCI6IFxcXCJcIiArIHhtbE5vZGUudmFsICArIFwiXFxcIiwgXCIpO1xuICAgIGNvbnNvbGUubG9nKGluZGVudGF0aW9uICsgXCIgIFxcXCJhdHRyc1xcXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoeG1sTm9kZS5hdHRyc01hcCxudWxsLDQpICArIFwiLCBcIik7XG5cbiAgICBpZih4bWxOb2RlLmNoaWxkKXtcbiAgICAgIGNvbnNvbGUubG9nKGluZGVudGF0aW9uICsgXCJcXFwiY2hpbGRcXFwiOiB7XCIpXG4gICAgICBjb25zdCBpbmRlbnRhdGlvbjIgPSBpbmRlbnRhdGlvbiArIGluZGVudGF0aW9uO1xuICAgICAgT2JqZWN0LmtleXMoeG1sTm9kZS5jaGlsZCkuZm9yRWFjaCggZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB4bWxOb2RlLmNoaWxkW2tleV07XG5cbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShub2RlKSl7XG4gICAgICAgICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyAgXCJcXFwiXCIra2V5K1wiXFxcIiA6W1wiKVxuICAgICAgICAgIG5vZGUuZm9yRWFjaCggZnVuY3Rpb24oaXRlbSxpbmRleCkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhpbmRlbnRhdGlvbiArIFwiIFxcXCJcIitpbmRleCtcIlxcXCIgOiBbXCIpXG4gICAgICAgICAgICBwcmludChpdGVtLCBpbmRlbnRhdGlvbjIpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyBcIl0sXCIpICBcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyBcIiBcXFwiXCIra2V5K1wiXFxcIiA6IHtcIilcbiAgICAgICAgICBwcmludChub2RlLCBpbmRlbnRhdGlvbjIpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGluZGVudGF0aW9uICsgXCJ9LFwiKSAgXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coaW5kZW50YXRpb24gKyBcIn0sXCIpXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGluZGVudGF0aW9uICsgXCJ9LFwiKVxuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lU3RhcnRDaGFyID0gJzpBLVphLXpfXFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkQnO1xuY29uc3QgbmFtZUNoYXIgPSBuYW1lU3RhcnRDaGFyICsgJ1xcXFwtLlxcXFxkXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDAnO1xuY29uc3QgbmFtZVJlZ2V4cCA9ICdbJyArIG5hbWVTdGFydENoYXIgKyAnXVsnICsgbmFtZUNoYXIgKyAnXSonXG5jb25zdCByZWdleE5hbWUgPSBuZXcgUmVnRXhwKCdeJyArIG5hbWVSZWdleHAgKyAnJCcpO1xuXG5jb25zdCBnZXRBbGxNYXRjaGVzID0gZnVuY3Rpb24oc3RyaW5nLCByZWdleCkge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgY29uc3QgYWxsbWF0Y2hlcyA9IFtdO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBhbGxtYXRjaGVzLnB1c2gobWF0Y2hbaW5kZXhdKTtcbiAgICB9XG4gICAgbWF0Y2hlcy5wdXNoKGFsbG1hdGNoZXMpO1xuICAgIG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuY29uc3QgaXNOYW1lID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcmVnZXhOYW1lLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuICEobWF0Y2ggPT09IG51bGwgfHwgdHlwZW9mIG1hdGNoID09PSAndW5kZWZpbmVkJyk7XG59O1xuXG5leHBvcnRzLmlzRXhpc3QgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnRzLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufTtcblxuLyoqXG4gKiBDb3B5IGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIGludG8gYi5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gKiBAcGFyYW0geyp9IGFcbiAqL1xuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uKHRhcmdldCwgYSwgYXJyYXlNb2RlKSB7XG4gIGlmIChhKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBvd24gcHJvcGVydGllc1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYoYXJyYXlNb2RlID09PSAnc3RyaWN0Jyl7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IFsgYVtrZXlzW2ldXSBdO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IGFba2V5c1tpXV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuLyogZXhwb3J0cy5tZXJnZSA9ZnVuY3Rpb24gKGIsYSl7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGIsYSk7XG59ICovXG5cbmV4cG9ydHMuZ2V0VmFsdWUgPSBmdW5jdGlvbih2KSB7XG4gIGlmIChleHBvcnRzLmlzRXhpc3QodikpIHtcbiAgICByZXR1cm4gdjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbi8vIGNvbnN0IGZha2VDYWxsID0gZnVuY3Rpb24oYSkge3JldHVybiBhO307XG4vLyBjb25zdCBmYWtlQ2FsbE5vUmV0dXJuID0gZnVuY3Rpb24oKSB7fTtcblxuZXhwb3J0cy5idWlsZE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zLCBkZWZhdWx0T3B0aW9ucywgcHJvcHMpIHtcbiAgdmFyIG5ld09wdGlvbnMgPSB7fTtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRPcHRpb25zOyAvL2lmIHRoZXJlIGFyZSBub3Qgb3B0aW9uc1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChvcHRpb25zW3Byb3BzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdPcHRpb25zW3Byb3BzW2ldXSA9IG9wdGlvbnNbcHJvcHNbaV1dO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdPcHRpb25zW3Byb3BzW2ldXSA9IGRlZmF1bHRPcHRpb25zW3Byb3BzW2ldXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld09wdGlvbnM7XG59O1xuXG5leHBvcnRzLmlzTmFtZSA9IGlzTmFtZTtcbmV4cG9ydHMuZ2V0QWxsTWF0Y2hlcyA9IGdldEFsbE1hdGNoZXM7XG5leHBvcnRzLm5hbWVSZWdleHAgPSBuYW1lUmVnZXhwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9BIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG59O1xuXG5jb25zdCBwcm9wcyA9IFsnYWxsb3dCb29sZWFuQXR0cmlidXRlcyddO1xuXG4vL2NvbnN0IHRhZ3NQYXR0ZXJuID0gbmV3IFJlZ0V4cChcIjxcXFxcLz8oW1xcXFx3OlxcXFwtX1xcLl0rKVxcXFxzKlxcLz8+XCIsXCJnXCIpO1xuZXhwb3J0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh4bWxEYXRhLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSB1dGlsLmJ1aWxkT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0T3B0aW9ucywgcHJvcHMpO1xuXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSxcIlwiKTsvL21ha2UgaXQgc2luZ2xlIGxpbmVcbiAgLy94bWxEYXRhID0geG1sRGF0YS5yZXBsYWNlKC8oXlxccyo8XFw/eG1sLio/XFw/PikvZyxcIlwiKTsvL1JlbW92ZSBYTUwgc3RhcnRpbmcgdGFnXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKDwhRE9DVFlQRVtcXHNcXHdcXFwiXFwuXFwvXFwtXFw6XSsoXFxbLipcXF0pKlxccyo+KS9nLFwiXCIpOy8vUmVtb3ZlIERPQ1RZUEVcbiAgY29uc3QgdGFncyA9IFtdO1xuICBsZXQgdGFnRm91bmQgPSBmYWxzZTtcblxuICAvL2luZGljYXRlcyB0aGF0IHRoZSByb290IHRhZyBoYXMgYmVlbiBjbG9zZWQgKGFrYS4gZGVwdGggMCBoYXMgYmVlbiByZWFjaGVkKVxuICBsZXQgcmVhY2hlZFJvb3QgPSBmYWxzZTtcblxuICBpZiAoeG1sRGF0YVswXSA9PT0gJ1xcdWZlZmYnKSB7XG4gICAgLy8gY2hlY2sgZm9yIGJ5dGUgb3JkZXIgbWFyayAoQk9NKVxuICAgIHhtbERhdGEgPSB4bWxEYXRhLnN1YnN0cigxKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgIC8vc3RhcnRpbmcgb2YgdGFnXG4gICAgICAvL3JlYWQgdW50aWwgeW91IHJlYWNoIHRvICc+JyBhdm9pZGluZyBhbnkgJz4nIGluIGF0dHJpYnV0ZSB2YWx1ZVxuXG4gICAgICBpKys7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJz8nKSB7XG4gICAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSwgKytpKTtcbiAgICAgICAgaWYgKGkuZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJyEnKSB7XG4gICAgICAgIGkgPSByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjbG9zaW5nVGFnID0gZmFsc2U7XG4gICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnLycpIHtcbiAgICAgICAgICAvL2Nsb3NpbmcgdGFnXG4gICAgICAgICAgY2xvc2luZ1RhZyA9IHRydWU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vcmVhZCB0YWduYW1lXG4gICAgICAgIGxldCB0YWdOYW1lID0gJyc7XG4gICAgICAgIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGggJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnPicgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnICcgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnXFx0JyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICdcXG4nICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJ1xccic7IGkrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0YWdOYW1lICs9IHhtbERhdGFbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudHJpbSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRhZ05hbWUpO1xuXG4gICAgICAgIGlmICh0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgIC8vc2VsZiBjbG9zaW5nIHRhZyB3aXRob3V0IGF0dHJpYnV0ZXNcbiAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHJpbmcoMCwgdGFnTmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAvL2NvbnRpbnVlO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRlVGFnTmFtZSh0YWdOYW1lKSkge1xuICAgICAgICAgIGxldCBtc2c7XG4gICAgICAgICAgaWYgKHRhZ05hbWUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbXNnID0gXCJUaGVyZSBpcyBhbiB1bm5lY2Vzc2FyeSBzcGFjZSBiZXR3ZWVuIHRhZyBuYW1lIGFuZCBiYWNrd2FyZCBzbGFzaCAnPC8gLi4nLlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtc2cgPSBcIlRhZyAnXCIrdGFnTmFtZStcIicgaXMgYW4gaW52YWxpZCBuYW1lLlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBtc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZXMgZm9yICdcIit0YWdOYW1lK1wiJyBoYXZlIG9wZW4gcXVvdGUuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGF0dHJTdHIgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGkgPSByZXN1bHQuaW5kZXg7XG5cbiAgICAgICAgaWYgKGF0dHJTdHJbYXR0clN0ci5sZW5ndGggLSAxXSA9PT0gJy8nKSB7XG4gICAgICAgICAgLy9zZWxmIGNsb3NpbmcgdGFnXG4gICAgICAgICAgYXR0clN0ciA9IGF0dHJTdHIuc3Vic3RyaW5nKDAsIGF0dHJTdHIubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpO1xuICAgICAgICAgIGlmIChpc1ZhbGlkID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0YWdGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnRpbnVlOyAvL3RleHQgbWF5IHByZXNlbnRzIGFmdGVyIHNlbGYgY2xvc2luZyB0YWdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy90aGUgcmVzdWx0IGZyb20gdGhlIG5lc3RlZCBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXJyb3Igd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vaW4gb3JkZXIgdG8gZ2V0IHRoZSAndHJ1ZScgZXJyb3IgbGluZSwgd2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBhdHRyaWJ1dGUgYmVnaW5zIChpIC0gYXR0clN0ci5sZW5ndGgpIGFuZCB0aGVuIGFkZCB0aGUgcG9zaXRpb24gd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vdGhpcyBnaXZlcyB1cyB0aGUgYWJzb2x1dGUgaW5kZXggaW4gdGhlIGVudGlyZSB4bWwsIHdoaWNoIHdlIGNhbiB1c2UgdG8gZmluZCB0aGUgbGluZSBhdCBsYXN0XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoaXNWYWxpZC5lcnIuY29kZSwgaXNWYWxpZC5lcnIubXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSAtIGF0dHJTdHIubGVuZ3RoICsgaXNWYWxpZC5lcnIubGluZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjbG9zaW5nVGFnKSB7XG4gICAgICAgICAgaWYgKCFyZXN1bHQudGFnQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIkNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJyBkb2Vzbid0IGhhdmUgcHJvcGVyIGNsb3NpbmcuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyU3RyLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIkNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJyBjYW4ndCBoYXZlIGF0dHJpYnV0ZXMgb3IgaW52YWxpZCBzdGFydGluZy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb3RnID0gdGFncy5wb3AoKTtcbiAgICAgICAgICAgIGlmICh0YWdOYW1lICE9PSBvdGcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgXCJDbG9zaW5nIHRhZyAnXCIrb3RnK1wiJyBpcyBleHBlY3RlZCBpbnBsYWNlIG9mICdcIit0YWdOYW1lK1wiJy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy93aGVuIHRoZXJlIGFyZSBubyBtb3JlIHRhZ3MsIHdlIHJlYWNoZWQgdGhlIHJvb3QgbGV2ZWwuXG4gICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICByZWFjaGVkUm9vdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKTtcbiAgICAgICAgICBpZiAoaXNWYWxpZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy90aGUgcmVzdWx0IGZyb20gdGhlIG5lc3RlZCBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXJyb3Igd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vaW4gb3JkZXIgdG8gZ2V0IHRoZSAndHJ1ZScgZXJyb3IgbGluZSwgd2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBhdHRyaWJ1dGUgYmVnaW5zIChpIC0gYXR0clN0ci5sZW5ndGgpIGFuZCB0aGVuIGFkZCB0aGUgcG9zaXRpb24gd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vdGhpcyBnaXZlcyB1cyB0aGUgYWJzb2x1dGUgaW5kZXggaW4gdGhlIGVudGlyZSB4bWwsIHdoaWNoIHdlIGNhbiB1c2UgdG8gZmluZCB0aGUgbGluZSBhdCBsYXN0XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoaXNWYWxpZC5lcnIuY29kZSwgaXNWYWxpZC5lcnIubXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSAtIGF0dHJTdHIubGVuZ3RoICsgaXNWYWxpZC5lcnIubGluZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vaWYgdGhlIHJvb3QgbGV2ZWwgaGFzIGJlZW4gcmVhY2hlZCBiZWZvcmUgLi4uXG4gICAgICAgICAgaWYgKHJlYWNoZWRSb290ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCAnTXVsdGlwbGUgcG9zc2libGUgcm9vdCBub2RlcyBmb3VuZC4nLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YWdzLnB1c2godGFnTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhZ0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2tpcCB0YWcgdGV4dCB2YWx1ZVxuICAgICAgICAvL0l0IG1heSBpbmNsdWRlIGNvbW1lbnRzIGFuZCBDREFUQSB2YWx1ZVxuICAgICAgICBmb3IgKGkrKzsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgICAgICBpZiAoeG1sRGF0YVtpICsgMV0gPT09ICchJykge1xuICAgICAgICAgICAgICAvL2NvbW1lbnQgb3IgQ0FEQVRBXG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgaSA9IHJlYWRDb21tZW50QW5kQ0RBVEEoeG1sRGF0YSwgaSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnJicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyQW1wID0gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSk7XG4gICAgICAgICAgICBpZiAoYWZ0ZXJBbXAgPT0gLTEpXG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZENoYXInLCBcImNoYXIgJyYnIGlzIG5vdCBleHBlY3RlZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICAgIGkgPSBhZnRlckFtcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy9lbmQgb2YgcmVhZGluZyB0YWcgdGV4dCB2YWx1ZVxuICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnICcgfHwgeG1sRGF0YVtpXSA9PT0gJ1xcdCcgfHwgeG1sRGF0YVtpXSA9PT0gJ1xcbicgfHwgeG1sRGF0YVtpXSA9PT0gJ1xccicpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRDaGFyJywgXCJjaGFyICdcIit4bWxEYXRhW2ldK1wiJyBpcyBub3QgZXhwZWN0ZWQuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0YWdGb3VuZCkge1xuICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsICdTdGFydCB0YWcgZXhwZWN0ZWQuJywgMSk7XG4gIH0gZWxzZSBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgXCJJbnZhbGlkICdcIitKU09OLnN0cmluZ2lmeSh0YWdzLCBudWxsLCA0KS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKStcIicgZm91bmQuXCIsIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlYWQgUHJvY2Vzc2luZyBpbnNzdHJ1Y3Rpb25zIGFuZCBza2lwXG4gKiBAcGFyYW0geyp9IHhtbERhdGFcbiAqIEBwYXJhbSB7Kn0gaVxuICovXG5mdW5jdGlvbiByZWFkUEkoeG1sRGF0YSwgaSkge1xuICB2YXIgc3RhcnQgPSBpO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PSAnPycgfHwgeG1sRGF0YVtpXSA9PSAnICcpIHtcbiAgICAgIC8vdGFnbmFtZVxuICAgICAgdmFyIHRhZ25hbWUgPSB4bWxEYXRhLnN1YnN0cihzdGFydCwgaSAtIHN0YXJ0KTtcbiAgICAgIGlmIChpID4gNSAmJiB0YWduYW1lID09PSAneG1sJykge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCAnWE1MIGRlY2xhcmF0aW9uIGFsbG93ZWQgb25seSBhdCB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50LicsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT0gJz8nICYmIHhtbERhdGFbaSArIDFdID09ICc+Jykge1xuICAgICAgICAvL2NoZWNrIGlmIHZhbGlkIGF0dHJpYnV0IHN0cmluZ1xuICAgICAgICBpKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpIHtcbiAgaWYgKHhtbERhdGEubGVuZ3RoID4gaSArIDUgJiYgeG1sRGF0YVtpICsgMV0gPT09ICctJyAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gJy0nKSB7XG4gICAgLy9jb21tZW50XG4gICAgZm9yIChpICs9IDM7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJy0nICYmIHhtbERhdGFbaSArIDFdID09PSAnLScgJiYgeG1sRGF0YVtpICsgMl0gPT09ICc+Jykge1xuICAgICAgICBpICs9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB4bWxEYXRhLmxlbmd0aCA+IGkgKyA4ICYmXG4gICAgeG1sRGF0YVtpICsgMV0gPT09ICdEJyAmJlxuICAgIHhtbERhdGFbaSArIDJdID09PSAnTycgJiZcbiAgICB4bWxEYXRhW2kgKyAzXSA9PT0gJ0MnICYmXG4gICAgeG1sRGF0YVtpICsgNF0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSArIDVdID09PSAnWScgJiZcbiAgICB4bWxEYXRhW2kgKyA2XSA9PT0gJ1AnICYmXG4gICAgeG1sRGF0YVtpICsgN10gPT09ICdFJ1xuICApIHtcbiAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTtcbiAgICBmb3IgKGkgKz0gODsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+Jykge1xuICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQtLTtcbiAgICAgICAgaWYgKGFuZ2xlQnJhY2tldHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIHhtbERhdGEubGVuZ3RoID4gaSArIDkgJiZcbiAgICB4bWxEYXRhW2kgKyAxXSA9PT0gJ1snICYmXG4gICAgeG1sRGF0YVtpICsgMl0gPT09ICdDJyAmJlxuICAgIHhtbERhdGFbaSArIDNdID09PSAnRCcgJiZcbiAgICB4bWxEYXRhW2kgKyA0XSA9PT0gJ0EnICYmXG4gICAgeG1sRGF0YVtpICsgNV0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSArIDZdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2kgKyA3XSA9PT0gJ1snXG4gICkge1xuICAgIGZvciAoaSArPSA4OyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICddJyAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gJ10nICYmIHhtbERhdGFbaSArIDJdID09PSAnPicpIHtcbiAgICAgICAgaSArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaTtcbn1cblxudmFyIGRvdWJsZVF1b3RlID0gJ1wiJztcbnZhciBzaW5nbGVRdW90ZSA9IFwiJ1wiO1xuXG4vKipcbiAqIEtlZXAgcmVhZGluZyB4bWxEYXRhIHVudGlsICc8JyBpcyBmb3VuZCBvdXRzaWRlIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30geG1sRGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqL1xuZnVuY3Rpb24gcmVhZEF0dHJpYnV0ZVN0cih4bWxEYXRhLCBpKSB7XG4gIGxldCBhdHRyU3RyID0gJyc7XG4gIGxldCBzdGFydENoYXIgPSAnJztcbiAgbGV0IHRhZ0Nsb3NlZCA9IGZhbHNlO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gZG91YmxlUXVvdGUgfHwgeG1sRGF0YVtpXSA9PT0gc2luZ2xlUXVvdGUpIHtcbiAgICAgIGlmIChzdGFydENoYXIgPT09ICcnKSB7XG4gICAgICAgIHN0YXJ0Q2hhciA9IHhtbERhdGFbaV07XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0Q2hhciAhPT0geG1sRGF0YVtpXSkge1xuICAgICAgICAvL2lmIHZhdWUgaXMgZW5jbG9zZWQgd2l0aCBkb3VibGUgcXVvdGUgdGhlbiBzaW5nbGUgcXVvdGVzIGFyZSBhbGxvd2VkIGluc2lkZSB0aGUgdmFsdWUgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydENoYXIgPSAnJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+Jykge1xuICAgICAgaWYgKHN0YXJ0Q2hhciA9PT0gJycpIHtcbiAgICAgICAgdGFnQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGF0dHJTdHIgKz0geG1sRGF0YVtpXTtcbiAgfVxuICBpZiAoc3RhcnRDaGFyICE9PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGF0dHJTdHIsXG4gICAgaW5kZXg6IGksXG4gICAgdGFnQ2xvc2VkOiB0YWdDbG9zZWRcbiAgfTtcbn1cblxuLyoqXG4gKiBTZWxlY3QgYWxsIHRoZSBhdHRyaWJ1dGVzIHdoZXRoZXIgdmFsaWQgb3IgaW52YWxpZC5cbiAqL1xuY29uc3QgdmFsaWRBdHRyU3RyUmVneHAgPSBuZXcgUmVnRXhwKCcoXFxcXHMqKShbXlxcXFxzPV0rKShcXFxccyo9KT8oXFxcXHMqKFtcXCdcIl0pKChbXFxcXHNcXFxcU10pKj8pXFxcXDUpPycsICdnJyk7XG5cbi8vYXR0ciwgPVwic2RcIiwgYT1cImFtaXQnc1wiLCBhPVwic2RcImI9XCJzYWZcIiwgYWIgIGNkPVwiXCJcblxuZnVuY3Rpb24gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucykge1xuICAvL2NvbnNvbGUubG9nKFwic3RhcnQ6XCIrYXR0clN0citcIjplbmRcIik7XG5cbiAgLy9pZihhdHRyU3RyLnRyaW0oKS5sZW5ndGggPT09IDApIHJldHVybiB0cnVlOyAvL2VtcHR5IHN0cmluZ1xuXG4gIGNvbnN0IG1hdGNoZXMgPSB1dGlsLmdldEFsbE1hdGNoZXMoYXR0clN0ciwgdmFsaWRBdHRyU3RyUmVneHApO1xuICBjb25zdCBhdHRyTmFtZXMgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWF0Y2hlc1tpXVsxXS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vbm9zcGFjZSBiZWZvcmUgYXR0cmlidXRlIG5hbWU6IGE9XCJzZFwiYj1cInNhZlwiXG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK21hdGNoZXNbaV1bMl0rXCInIGhhcyBubyBzcGFjZSBpbiBzdGFydGluZy5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2goYXR0clN0ciwgbWF0Y2hlc1tpXVswXSkpXG4gICAgfSBlbHNlIGlmIChtYXRjaGVzW2ldWzNdID09PSB1bmRlZmluZWQgJiYgIW9wdGlvbnMuYWxsb3dCb29sZWFuQXR0cmlidXRlcykge1xuICAgICAgLy9pbmRlcGVuZGVudCBhdHRyaWJ1dGU6IGFiXG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJib29sZWFuIGF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaXMgbm90IGFsbG93ZWQuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKGF0dHJTdHIsIG1hdGNoZXNbaV1bMF0pKTtcbiAgICB9XG4gICAgLyogZWxzZSBpZihtYXRjaGVzW2ldWzZdID09PSB1bmRlZmluZWQpey8vYXR0cmlidXRlIHdpdGhvdXQgdmFsdWU6IGFiPVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlcnI6IHsgY29kZTpcIkludmFsaWRBdHRyXCIsbXNnOlwiYXR0cmlidXRlIFwiICsgbWF0Y2hlc1tpXVsyXSArIFwiIGhhcyBubyB2YWx1ZSBhc3NpZ25lZC5cIn19O1xuICAgICAgICAgICAgICAgIH0gKi9cbiAgICBjb25zdCBhdHRyTmFtZSA9IG1hdGNoZXNbaV1bMl07XG4gICAgaWYgKCF2YWxpZGF0ZUF0dHJOYW1lKGF0dHJOYW1lKSkge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIithdHRyTmFtZStcIicgaXMgYW4gaW52YWxpZCBuYW1lLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChhdHRyU3RyLCBtYXRjaGVzW2ldWzBdKSk7XG4gICAgfVxuICAgIGlmICghYXR0ck5hbWVzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSkge1xuICAgICAgLy9jaGVjayBmb3IgZHVwbGljYXRlIGF0dHJpYnV0ZS5cbiAgICAgIGF0dHJOYW1lc1thdHRyTmFtZV0gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK2F0dHJOYW1lK1wiJyBpcyByZXBlYXRlZC5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2goYXR0clN0ciwgbWF0Y2hlc1tpXVswXSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlckFtcGVyc2FuZCh4bWxEYXRhLCBpKSB7XG4gIGxldCByZSA9IC9cXGQvO1xuICBpZiAoeG1sRGF0YVtpXSA9PT0gJ3gnKSB7XG4gICAgaSsrO1xuICAgIHJlID0gL1tcXGRhLWZBLUZdLztcbiAgfVxuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzsnKVxuICAgICAgcmV0dXJuIGk7XG4gICAgaWYgKCF4bWxEYXRhW2ldLm1hdGNoKHJlKSlcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSkge1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNkdC1jaGFycmVmXG4gIGkrKztcbiAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICByZXR1cm4gLTE7XG4gIGlmICh4bWxEYXRhW2ldID09PSAnIycpIHtcbiAgICBpKys7XG4gICAgcmV0dXJuIHZhbGlkYXRlTnVtYmVyQW1wZXJzYW5kKHhtbERhdGEsIGkpO1xuICB9XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKywgY291bnQrKykge1xuICAgIGlmICh4bWxEYXRhW2ldLm1hdGNoKC9cXHcvKSAmJiBjb3VudCA8IDIwKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICAgIGJyZWFrO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JPYmplY3QoY29kZSwgbWVzc2FnZSwgbGluZU51bWJlcikge1xuICByZXR1cm4ge1xuICAgIGVycjoge1xuICAgICAgY29kZTogY29kZSxcbiAgICAgIG1zZzogbWVzc2FnZSxcbiAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBdHRyTmFtZShhdHRyTmFtZSkge1xuICByZXR1cm4gdXRpbC5pc05hbWUoYXR0ck5hbWUpO1xufVxuXG4vLyBjb25zdCBzdGFydHNXaXRoWE1MID0gL154bWwvaTtcblxuZnVuY3Rpb24gdmFsaWRhdGVUYWdOYW1lKHRhZ25hbWUpIHtcbiAgcmV0dXJuIHV0aWwuaXNOYW1lKHRhZ25hbWUpIC8qICYmICF0YWduYW1lLm1hdGNoKHN0YXJ0c1dpdGhYTUwpICovO1xufVxuXG4vL3RoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgbGluZSBudW1iZXIgZm9yIHRoZSBjaGFyYWN0ZXIgYXQgdGhlIGdpdmVuIGluZGV4XG5mdW5jdGlvbiBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaW5kZXgpIHtcbiAgdmFyIGxpbmVzID0geG1sRGF0YS5zdWJzdHJpbmcoMCwgaW5kZXgpLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHJldHVybiBsaW5lcy5sZW5ndGg7XG59XG5cbi8vdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgbWF0Y2ggd2l0aGluIGF0dHJTdHJcbmZ1bmN0aW9uIGdldFBvc2l0aW9uRnJvbU1hdGNoKGF0dHJTdHIsIG1hdGNoKSB7XG4gIHJldHVybiBhdHRyU3RyLmluZGV4T2YobWF0Y2gpICsgbWF0Y2gubGVuZ3RoO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhZ25hbWUsIHBhcmVudCwgdmFsKSB7XG4gIHRoaXMudGFnbmFtZSA9IHRhZ25hbWU7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmNoaWxkID0ge307IC8vY2hpbGQgdGFnc1xuICB0aGlzLmF0dHJzTWFwID0ge307IC8vYXR0cmlidXRlcyBtYXBcbiAgdGhpcy52YWwgPSB2YWw7IC8vdGV4dCBvbmx5XG4gIHRoaXMuYWRkQ2hpbGQgPSBmdW5jdGlvbihjaGlsZCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY2hpbGRbY2hpbGQudGFnbmFtZV0pKSB7XG4gICAgICAvL2FscmVhZHkgcHJlc2VudHNcbiAgICAgIHRoaXMuY2hpbGRbY2hpbGQudGFnbmFtZV0ucHVzaChjaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hpbGRbY2hpbGQudGFnbmFtZV0gPSBbY2hpbGRdO1xuICAgIH1cbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmNvbnN0IGJ1aWxkT3B0aW9ucyA9IHJlcXVpcmUoJy4vdXRpbCcpLmJ1aWxkT3B0aW9ucztcbmNvbnN0IHhtbE5vZGUgPSByZXF1aXJlKCcuL3htbE5vZGUnKTtcbmNvbnN0IHJlZ3ggPVxuICAnPCgoIVxcXFxbQ0RBVEFcXFxcWyhbXFxcXHNcXFxcU10qPykoXV0+KSl8KChOQU1FOik/KE5BTUUpKShbXj5dKik+fCgoXFxcXC8pKE5BTUUpXFxcXHMqPikpKFtePF0qKSdcbiAgLnJlcGxhY2UoL05BTUUvZywgdXRpbC5uYW1lUmVnZXhwKTtcblxuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvP1tcXFxcdzpcXFxcLVxcLl9dKykoW14+XSopPihcXFxccypcIitjZGF0YVJlZ3grXCIpKihbXjxdKyk/XCIsXCJnXCIpO1xuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvPykoKFxcXFx3KjopPyhbXFxcXHc6XFxcXC1cXC5fXSspKShbXj5dKik+KFtePF0qKShcIitjZGF0YVJlZ3grXCIoW148XSopKSooW148XSspP1wiLFwiZ1wiKTtcblxuLy9wb2x5ZmlsbFxuaWYgKCFOdW1iZXIucGFyc2VJbnQgJiYgd2luZG93LnBhcnNlSW50KSB7XG4gIE51bWJlci5wYXJzZUludCA9IHdpbmRvdy5wYXJzZUludDtcbn1cbmlmICghTnVtYmVyLnBhcnNlRmxvYXQgJiYgd2luZG93LnBhcnNlRmxvYXQpIHtcbiAgTnVtYmVyLnBhcnNlRmxvYXQgPSB3aW5kb3cucGFyc2VGbG9hdDtcbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXG4gIGF0dHJOb2RlTmFtZTogZmFsc2UsXG4gIHRleHROb2RlTmFtZTogJyN0ZXh0JyxcbiAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgaWdub3JlTmFtZVNwYWNlOiBmYWxzZSxcbiAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vYSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICAvL2lnbm9yZVJvb3RFbGVtZW50IDogZmFsc2UsXG4gIHBhcnNlTm9kZVZhbHVlOiB0cnVlLFxuICBwYXJzZUF0dHJpYnV0ZVZhbHVlOiBmYWxzZSxcbiAgYXJyYXlNb2RlOiBmYWxzZSxcbiAgdHJpbVZhbHVlczogdHJ1ZSwgLy9UcmltIHN0cmluZyB2YWx1ZXMgb2YgdGFnIGFuZCBhdHRyaWJ1dGVzXG4gIGNkYXRhVGFnTmFtZTogZmFsc2UsXG4gIGNkYXRhUG9zaXRpb25DaGFyOiAnXFxcXGMnLFxuICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYSwgdGFnTmFtZSkge1xuICAgIHJldHVybiBhO1xuICB9LFxuICBhdHRyVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGEsIGF0dHJOYW1lKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIHN0b3BOb2RlczogW11cbiAgLy9kZWNvZGVTdHJpY3Q6IGZhbHNlLFxufTtcblxuZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuXG5jb25zdCBwcm9wcyA9IFtcbiAgJ2F0dHJpYnV0ZU5hbWVQcmVmaXgnLFxuICAnYXR0ck5vZGVOYW1lJyxcbiAgJ3RleHROb2RlTmFtZScsXG4gICdpZ25vcmVBdHRyaWJ1dGVzJyxcbiAgJ2lnbm9yZU5hbWVTcGFjZScsXG4gICdhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzJyxcbiAgJ3BhcnNlTm9kZVZhbHVlJyxcbiAgJ3BhcnNlQXR0cmlidXRlVmFsdWUnLFxuICAnYXJyYXlNb2RlJyxcbiAgJ3RyaW1WYWx1ZXMnLFxuICAnY2RhdGFUYWdOYW1lJyxcbiAgJ2NkYXRhUG9zaXRpb25DaGFyJyxcbiAgJ3RhZ1ZhbHVlUHJvY2Vzc29yJyxcbiAgJ2F0dHJWYWx1ZVByb2Nlc3NvcicsXG4gICdwYXJzZVRydWVOdW1iZXJPbmx5JyxcbiAgJ3N0b3BOb2Rlcydcbl07XG5leHBvcnRzLnByb3BzID0gcHJvcHM7XG5cbi8qKlxuICogVHJpbSAtPiB2YWx1ZVByb2Nlc3NvciAtPiBwYXJzZSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NUYWdWYWx1ZSh0YWdOYW1lLCB2YWwsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbCkge1xuICAgIGlmIChvcHRpb25zLnRyaW1WYWx1ZXMpIHtcbiAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgfVxuICAgIHZhbCA9IG9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodmFsLCB0YWdOYW1lKTtcbiAgICB2YWwgPSBwYXJzZVZhbHVlKHZhbCwgb3B0aW9ucy5wYXJzZU5vZGVWYWx1ZSwgb3B0aW9ucy5wYXJzZVRydWVOdW1iZXJPbmx5KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOYW1lU3BhY2UodGFnbmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5pZ25vcmVOYW1lU3BhY2UpIHtcbiAgICBjb25zdCB0YWdzID0gdGFnbmFtZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHByZWZpeCA9IHRhZ25hbWUuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJztcbiAgICBpZiAodGFnc1swXSA9PT0gJ3htbG5zJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAodGFncy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRhZ25hbWUgPSBwcmVmaXggKyB0YWdzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFnbmFtZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZSh2YWwsIHNob3VsZFBhcnNlLCBwYXJzZVRydWVOdW1iZXJPbmx5KSB7XG4gIGlmIChzaG91bGRQYXJzZSAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGxldCBwYXJzZWQ7XG4gICAgaWYgKHZhbC50cmltKCkgPT09ICcnIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgIHBhcnNlZCA9IHZhbCA9PT0gJ3RydWUnID8gdHJ1ZSA6IHZhbCA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsLmluZGV4T2YoJzB4JykgIT09IC0xKSB7XG4gICAgICAgIC8vc3VwcG9ydCBoZXhhIGRlY2ltYWxcbiAgICAgICAgcGFyc2VkID0gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTYpO1xuICAgICAgfSBlbHNlIGlmICh2YWwuaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgICAgICBwYXJzZWQgPSBOdW1iZXIucGFyc2VGbG9hdCh2YWwpO1xuICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSgvXFwuPzArJC8sIFwiXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkID0gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlVHJ1ZU51bWJlck9ubHkpIHtcbiAgICAgICAgcGFyc2VkID0gU3RyaW5nKHBhcnNlZCkgPT09IHZhbCA/IHBhcnNlZCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodXRpbC5pc0V4aXN0KHZhbCkpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn1cblxuLy9UT0RPOiBjaGFuZ2UgcmVnZXggdG8gY2FwdHVyZSBOU1xuLy9jb25zdCBhdHRyc1JlZ3ggPSBuZXcgUmVnRXhwKFwiKFtcXFxcd1xcXFwtXFxcXC5cXFxcOl0rKVxcXFxzKj1cXFxccyooWydcXFwiXSkoKC58XFxuKSo/KVxcXFwyXCIsXCJnbVwiKTtcbmNvbnN0IGF0dHJzUmVneCA9IG5ldyBSZWdFeHAoJyhbXlxcXFxzPV0rKVxcXFxzKig9XFxcXHMqKFtcXCdcIl0pKC4qPylcXFxcMyk/JywgJ2cnKTtcblxuZnVuY3Rpb24gYnVpbGRBdHRyaWJ1dGVzTWFwKGF0dHJTdHIsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgJiYgdHlwZW9mIGF0dHJTdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgYXR0clN0ciA9IGF0dHJTdHIucmVwbGFjZSgvXFxyP1xcbi9nLCAnICcpO1xuICAgIC8vYXR0clN0ciA9IGF0dHJTdHIgfHwgYXR0clN0ci50cmltKCk7XG5cbiAgICBjb25zdCBtYXRjaGVzID0gdXRpbC5nZXRBbGxNYXRjaGVzKGF0dHJTdHIsIGF0dHJzUmVneCk7XG4gICAgY29uc3QgbGVuID0gbWF0Y2hlcy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0dHJOYW1lID0gcmVzb2x2ZU5hbWVTcGFjZShtYXRjaGVzW2ldWzFdLCBvcHRpb25zKTtcbiAgICAgIGlmIChhdHRyTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG1hdGNoZXNbaV1bNF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLnRyaW1WYWx1ZXMpIHtcbiAgICAgICAgICAgIG1hdGNoZXNbaV1bNF0gPSBtYXRjaGVzW2ldWzRdLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWF0Y2hlc1tpXVs0XSA9IG9wdGlvbnMuYXR0clZhbHVlUHJvY2Vzc29yKG1hdGNoZXNbaV1bNF0sIGF0dHJOYW1lKTtcbiAgICAgICAgICBhdHRyc1tvcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXggKyBhdHRyTmFtZV0gPSBwYXJzZVZhbHVlKFxuICAgICAgICAgICAgbWF0Y2hlc1tpXVs0XSxcbiAgICAgICAgICAgIG9wdGlvbnMucGFyc2VBdHRyaWJ1dGVWYWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbnMucGFyc2VUcnVlTnVtYmVyT25seVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5hbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgYXR0cnNbb3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4ICsgYXR0ck5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIU9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYXR0ck5vZGVOYW1lKSB7XG4gICAgICBjb25zdCBhdHRyQ29sbGVjdGlvbiA9IHt9O1xuICAgICAgYXR0ckNvbGxlY3Rpb25bb3B0aW9ucy5hdHRyTm9kZU5hbWVdID0gYXR0cnM7XG4gICAgICByZXR1cm4gYXR0ckNvbGxlY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBhdHRycztcbiAgfVxufVxuXG5jb25zdCBnZXRUcmF2ZXJzYWxPYmogPSBmdW5jdGlvbih4bWxEYXRhLCBvcHRpb25zKSB7XG4gIHhtbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIik7XG4gIG9wdGlvbnMgPSBidWlsZE9wdGlvbnMob3B0aW9ucywgZGVmYXVsdE9wdGlvbnMsIHByb3BzKTtcbiAgY29uc3QgeG1sT2JqID0gbmV3IHhtbE5vZGUoJyF4bWwnKTtcbiAgbGV0IGN1cnJlbnROb2RlID0geG1sT2JqO1xuICBsZXQgdGV4dERhdGEgPSBcIlwiO1xuXG4vL2Z1bmN0aW9uIG1hdGNoKHhtbERhdGEpe1xuICBmb3IobGV0IGk9MDsgaTwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7XG4gICAgY29uc3QgY2ggPSB4bWxEYXRhW2ldO1xuICAgIGlmKGNoID09PSAnPCcpe1xuICAgICAgaWYoIHhtbERhdGFbaSsxXSA9PT0gJy8nKSB7Ly9DbG9zaW5nIFRhZ1xuICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIj5cIiwgaSwgXCJDbG9zaW5nIFRhZyBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICBsZXQgdGFnTmFtZSA9IHhtbERhdGEuc3Vic3RyaW5nKGkrMixjbG9zZUluZGV4KS50cmltKCk7XG5cbiAgICAgICAgaWYob3B0aW9ucy5pZ25vcmVOYW1lU3BhY2Upe1xuICAgICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0YWdOYW1lLmluZGV4T2YoXCI6XCIpO1xuICAgICAgICAgIGlmKGNvbG9uSW5kZXggIT09IC0xKXtcbiAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cihjb2xvbkluZGV4KzEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlmIChjdXJyZW50Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5wYXJlbnQudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS5wYXJlbnQudmFsKSArICcnICsgcHJvY2Vzc1RhZ1ZhbHVlMih0YWdOYW1lLCB0ZXh0RGF0YSAsIG9wdGlvbnMpO1xuICAgICAgICB9ICovXG4gICAgICAgIGlmKGN1cnJlbnROb2RlKXtcbiAgICAgICAgICBpZihjdXJyZW50Tm9kZS52YWwpe1xuICAgICAgICAgICAgY3VycmVudE5vZGUudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS52YWwpICsgJycgKyBwcm9jZXNzVGFnVmFsdWUodGFnTmFtZSwgdGV4dERhdGEgLCBvcHRpb25zKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLnZhbCA9IHByb2Nlc3NUYWdWYWx1ZSh0YWdOYW1lLCB0ZXh0RGF0YSAsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlcy5sZW5ndGggJiYgb3B0aW9ucy5zdG9wTm9kZXMuaW5jbHVkZXMoY3VycmVudE5vZGUudGFnbmFtZSkpIHtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5jaGlsZCA9IFtdXG4gICAgICAgICAgaWYgKGN1cnJlbnROb2RlLmF0dHJzTWFwID09IHVuZGVmaW5lZCkgeyBjdXJyZW50Tm9kZS5hdHRyc01hcCA9IHt9fVxuICAgICAgICAgIGN1cnJlbnROb2RlLnZhbCA9IHhtbERhdGEuc3Vic3RyKGN1cnJlbnROb2RlLnN0YXJ0SW5kZXggKyAxLCBpIC0gY3VycmVudE5vZGUuc3RhcnRJbmRleCAtIDEpXG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnQ7XG4gICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgaSA9IGNsb3NlSW5kZXg7XG4gICAgICB9IGVsc2UgaWYoIHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG4gICAgICAgIGkgPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiPz5cIiwgaSwgXCJQaSBUYWcgaXMgbm90IGNsb3NlZC5cIilcbiAgICAgIH0gZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMykgPT09ICchLS0nKSB7XG4gICAgICAgIGkgPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiLS0+XCIsIGksIFwiQ29tbWVudCBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgfSBlbHNlIGlmKCB4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchRCcpIHtcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIFwiRE9DVFlQRSBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICBjb25zdCB0YWdFeHAgPSB4bWxEYXRhLnN1YnN0cmluZyhpLCBjbG9zZUluZGV4KTtcbiAgICAgICAgaWYodGFnRXhwLmluZGV4T2YoXCJbXCIpID49IDApe1xuICAgICAgICAgIGkgPSB4bWxEYXRhLmluZGV4T2YoXCJdPlwiLCBpKSArIDE7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGkgPSBjbG9zZUluZGV4O1xuICAgICAgICB9XG4gICAgICB9ZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchWycpIHtcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCJdXT5cIiwgaSwgXCJDREFUQSBpcyBub3QgY2xvc2VkLlwiKSAtIDJcbiAgICAgICAgY29uc3QgdGFnRXhwID0geG1sRGF0YS5zdWJzdHJpbmcoaSArIDksY2xvc2VJbmRleCk7XG5cbiAgICAgICAgLy9jb25zaWRlcmF0aW9uc1xuICAgICAgICAvLzEuIENEQVRBIHdpbGwgYWx3YXlzIGhhdmUgcGFyZW50IG5vZGVcbiAgICAgICAgLy8yLiBBIHRhZyB3aXRoIENEQVRBIGlzIG5vdCBhIGxlYWYgbm9kZSBzbyBpdCdzIHZhbHVlIHdvdWxkIGJlIHN0cmluZyB0eXBlLlxuICAgICAgICBpZih0ZXh0RGF0YSl7XG4gICAgICAgICAgY3VycmVudE5vZGUudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS52YWwpICsgJycgKyBwcm9jZXNzVGFnVmFsdWUoY3VycmVudE5vZGUudGFnbmFtZSwgdGV4dERhdGEgLCBvcHRpb25zKTtcbiAgICAgICAgICB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5jZGF0YVRhZ05hbWUpIHtcbiAgICAgICAgICAvL2FkZCBjZGF0YSBub2RlXG4gICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUob3B0aW9ucy5jZGF0YVRhZ05hbWUsIGN1cnJlbnROb2RlLCB0YWdFeHApO1xuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgICAgICAgLy9mb3IgYmFja3RyYWNraW5nXG4gICAgICAgICAgY3VycmVudE5vZGUudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS52YWwpICsgb3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhcjtcbiAgICAgICAgICAvL2FkZCByZXN0IHZhbHVlIHRvIHBhcmVudCBub2RlXG4gICAgICAgICAgaWYgKHRhZ0V4cCkge1xuICAgICAgICAgICAgY2hpbGROb2RlLnZhbCA9IHRhZ0V4cDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudE5vZGUudmFsID0gKGN1cnJlbnROb2RlLnZhbCB8fCAnJykgKyAodGFnRXhwIHx8ICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgPSBjbG9zZUluZGV4ICsgMjtcbiAgICAgIH1lbHNlIHsvL09wZW5pbmcgdGFnXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNsb3NpbmdJbmRleEZvck9wZW5pbmdUYWcoeG1sRGF0YSwgaSsxKVxuICAgICAgICBsZXQgdGFnRXhwID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSByZXN1bHQuaW5kZXg7XG4gICAgICAgIGNvbnN0IHNlcGFyYXRvckluZGV4ID0gdGFnRXhwLmluZGV4T2YoXCIgXCIpO1xuICAgICAgICBsZXQgdGFnTmFtZSA9IHRhZ0V4cDtcbiAgICAgICAgaWYoc2VwYXJhdG9ySW5kZXggIT09IC0xKXtcbiAgICAgICAgICB0YWdOYW1lID0gdGFnRXhwLnN1YnN0cigwLCBzZXBhcmF0b3JJbmRleCkucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cihzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYob3B0aW9ucy5pZ25vcmVOYW1lU3BhY2Upe1xuICAgICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0YWdOYW1lLmluZGV4T2YoXCI6XCIpO1xuICAgICAgICAgIGlmKGNvbG9uSW5kZXggIT09IC0xKXtcbiAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cihjb2xvbkluZGV4KzEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2F2ZSB0ZXh0IHRvIHBhcmVudCBub2RlXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZSAmJiB0ZXh0RGF0YSkge1xuICAgICAgICAgIGlmKGN1cnJlbnROb2RlLnRhZ25hbWUgIT09ICcheG1sJyl7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZS52YWwgPSB1dGlsLmdldFZhbHVlKGN1cnJlbnROb2RlLnZhbCkgKyAnJyArIHByb2Nlc3NUYWdWYWx1ZSggY3VycmVudE5vZGUudGFnbmFtZSwgdGV4dERhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRhZ0V4cC5sZW5ndGggPiAwICYmIHRhZ0V4cC5sYXN0SW5kZXhPZihcIi9cIikgPT09IHRhZ0V4cC5sZW5ndGggLSAxKXsvL3NlbGZDbG9zaW5nIHRhZ1xuXG4gICAgICAgICAgaWYodGFnTmFtZVt0YWdOYW1lLmxlbmd0aCAtIDFdID09PSBcIi9cIil7IC8vcmVtb3ZlIHRyYWlsaW5nICcvJ1xuICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKDAsIHRhZ05hbWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB0YWdFeHAgPSB0YWdOYW1lO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cigwLCB0YWdFeHAubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnTmFtZSwgY3VycmVudE5vZGUsICcnKTtcbiAgICAgICAgICBpZih0YWdOYW1lICE9PSB0YWdFeHApe1xuICAgICAgICAgICAgY2hpbGROb2RlLmF0dHJzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgICAgIH1lbHNley8vb3BlbmluZyB0YWdcblxuICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKCB0YWdOYW1lLCBjdXJyZW50Tm9kZSApO1xuICAgICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlcy5sZW5ndGggJiYgb3B0aW9ucy5zdG9wTm9kZXMuaW5jbHVkZXMoY2hpbGROb2RlLnRhZ25hbWUpKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUuc3RhcnRJbmRleD1jbG9zZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0YWdOYW1lICE9PSB0YWdFeHApe1xuICAgICAgICAgICAgY2hpbGROb2RlLmF0dHJzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dERhdGEgPSBcIlwiO1xuICAgICAgICBpID0gY2xvc2VJbmRleDtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHRleHREYXRhICs9IHhtbERhdGFbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB4bWxPYmo7XG59XG5cbmZ1bmN0aW9uIGNsb3NpbmdJbmRleEZvck9wZW5pbmdUYWcoZGF0YSwgaSl7XG4gIGxldCBhdHRyQm91bmRhcnk7XG4gIGxldCB0YWdFeHAgPSBcIlwiO1xuICBmb3IgKGxldCBpbmRleCA9IGk7IGluZGV4IDwgZGF0YS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgY2ggPSBkYXRhW2luZGV4XTtcbiAgICBpZiAoYXR0ckJvdW5kYXJ5KSB7XG4gICAgICAgIGlmIChjaCA9PT0gYXR0ckJvdW5kYXJ5KSBhdHRyQm91bmRhcnkgPSBcIlwiOy8vcmVzZXRcbiAgICB9IGVsc2UgaWYgKGNoID09PSAnXCInIHx8IGNoID09PSBcIidcIikge1xuICAgICAgICBhdHRyQm91bmRhcnkgPSBjaDtcbiAgICB9IGVsc2UgaWYgKGNoID09PSAnPicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiB0YWdFeHAsXG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoID09PSAnXFx0Jykge1xuICAgICAgY2ggPSBcIiBcIlxuICAgIH1cbiAgICB0YWdFeHAgKz0gY2g7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBzdHIsIGksIGVyck1zZyl7XG4gIGNvbnN0IGNsb3NpbmdJbmRleCA9IHhtbERhdGEuaW5kZXhPZihzdHIsIGkpO1xuICBpZihjbG9zaW5nSW5kZXggPT09IC0xKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKVxuICB9ZWxzZXtcbiAgICByZXR1cm4gY2xvc2luZ0luZGV4ICsgc3RyLmxlbmd0aCAtIDE7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXRUcmF2ZXJzYWxPYmogPSBnZXRUcmF2ZXJzYWxPYmo7XG4iLCIvKlxuICogR2VvZGVzaWMgcm91dGluZXMgZnJvbSBHZW9ncmFwaGljTGliIHRyYW5zbGF0ZWQgdG8gSmF2YVNjcmlwdC4gIFNlZVxuICogaHR0cHM6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLmlvL2h0bWwvanMvXG4gKlxuICogVGhlIGFsZ29yaXRobXMgYXJlIGRlcml2ZWQgaW5cbiAqXG4gKiAgICBDaGFybGVzIEYuIEYuIEthcm5leSxcbiAqICAgIEFsZ29yaXRobXMgZm9yIGdlb2Rlc2ljcywgSi4gR2VvZGVzeSA4NywgNDMtNTUgKDIwMTMpLFxuICogICAgaHR0cHM6Ly9kb2kub3JnLzEwLjEwMDcvczAwMTkwLTAxMi0wNTc4LXpcbiAqICAgIEFkZGVuZGE6IGh0dHBzOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5pby9nZW9kLWFkZGVuZGEuaHRtbFxuICpcbiAqIFRoaXMgZmlsZSBpcyB0aGUgY29uY2F0ZW5hdGlvbiBhbmQgY29tcHJlc3Npb24gb2YgdGhlIEphdmFTY3JpcHQgZmlsZXMgaW5cbiAqIGRvYy9zY3JpcHRzL0dlb2dyYXBoaWNMaWIgaW4gdGhlIHNvdXJjZSB0cmVlIGZvciBHZW9ncmFwaGljTGliLlxuICpcbiAqIENvcHlyaWdodCAoYykgQ2hhcmxlcyBLYXJuZXkgKDIwMTEtMjAxNSkgPGNoYXJsZXNAa2FybmV5LmNvbT4gYW5kIGxpY2Vuc2VkXG4gKiB1bmRlciB0aGUgTUlUL1gxMSBMaWNlbnNlLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICogaHR0cHM6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLmlvL1xuICpcbiAqIFZlcnNpb246IDEuNTFcbiAqIEZpbGUgaW52ZW50b3J5OlxuICogICBNYXRoLmpzIEdlb2Rlc2ljLmpzIEdlb2Rlc2ljTGluZS5qcyBQb2x5Z29uQXJlYS5qcyBETVMuanNcbiAqL1xuXG4oZnVuY3Rpb24oY2IpIHtcblxuLyoqKioqKioqKioqKioqKiogTWF0aC5qcyAqKioqKioqKioqKioqKioqL1xuLypcbiAqIE1hdGguanNcbiAqIFRyYW5zY3JpcHRpb24gb2YgTWF0aC5ocHAsIENvbnN0YW50cy5ocHAsIGFuZCBBY2N1bXVsYXRvci5ocHAgaW50b1xuICogSmF2YVNjcmlwdC5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIENoYXJsZXMgS2FybmV5ICgyMDExLTIwMjApIDxjaGFybGVzQGthcm5leS5jb20+IGFuZCBsaWNlbnNlZFxuICogdW5kZXIgdGhlIE1JVC9YMTEgTGljZW5zZS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbiAqIGh0dHBzOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5pby9cbiAqL1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgR2VvZ3JhcGhpY0xpYlxuICogQGRlc2NyaXB0aW9uIFRoZSBwYXJlbnQgbmFtZXNwYWNlIGZvciB0aGUgZm9sbG93aW5nIG1vZHVsZXM6XG4gKiAtIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpYyBHZW9ncmFwaGljTGliL0dlb2Rlc2ljfSBUaGUgbWFpblxuICogICBlbmdpbmUgZm9yIHNvbHZpbmcgZ2VvZGVzaWMgcHJvYmxlbXMgdmlhIHRoZVxuICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuR2VvZGVzaWMgR2VvZGVzaWN9IGNsYXNzLlxuICogLSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lIEdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lfVxuICogICBjb21wdXRlcyBwb2ludHMgYWxvbmcgYSBzaW5nbGUgZ2VvZGVzaWMgbGluZSB2aWEgdGhlXG4gKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmUuR2VvZGVzaWNMaW5lIEdlb2Rlc2ljTGluZX1cbiAqICAgY2xhc3MuXG4gKiAtIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9Qb2x5Z29uQXJlYSBHZW9ncmFwaGljTGliL1BvbHlnb25BcmVhfVxuICogICBjb21wdXRlcyB0aGUgYXJlYSBvZiBhIGdlb2Rlc2ljIHBvbHlnb24gdmlhIHRoZVxuICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvUG9seWdvbkFyZWEuUG9seWdvbkFyZWEgUG9seWdvbkFyZWF9XG4gKiAgIGNsYXNzLlxuICogLSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvRE1TIEdlb2dyYXBoaWNMaWIvRE1TfSBoYW5kbGVzIHRoZSBkZWNvZGluZ1xuICogICBhbmQgZW5jb2Rpbmcgb2YgYW5nbGVzIGluIGRlZ3JlZSwgbWludXRlcywgYW5kIHNlY29uZHMsIHZpYSBzdGF0aWNcbiAqICAgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlLlxuICogLSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvQ29uc3RhbnRzIEdlb2dyYXBoaWNMaWIvQ29uc3RhbnRzfSBkZWZpbmVzXG4gKiAgIGNvbnN0YW50cyBzcGVjaWZ5aW5nIHRoZSB2ZXJzaW9uIG51bWJlcnMgYW5kIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgV0dTODRcbiAqICAgZWxsaXBzb2lkLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgbW9kdWxlcyBhcmUgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBwYWNrYWdlOlxuICogLSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvTWF0aCBHZW9ncmFwaGljTGliL01hdGh9IGRlZmluZXMgdmFyaW91c1xuICogICBtYXRoZW1hdGljYWwgZnVuY3Rpb25zLlxuICogLSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvQWNjdW11bGF0b3IgR2VvZ3JhcGhpY0xpYi9BY2N1bXVsYXRvcn1cbiAqICAgaW50ZXJhbGx5IHVzZWQgYnlcbiAqICAge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL1BvbHlnb25BcmVhLlBvbHlnb25BcmVhIFBvbHlnb25BcmVhfSAodmlhIHRoZVxuICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvQWNjdW11bGF0b3IuQWNjdW11bGF0b3IgQWNjdW11bGF0b3J9IGNsYXNzKVxuICogICBmb3Igc3VtbWluZyB0aGUgY29udHJpYnV0aW9ucyB0byB0aGUgYXJlYSBvZiBhIHBvbHlnb24uXG4gKi9cblxudmFyIEdlb2dyYXBoaWNMaWIgPSB7fTtcbkdlb2dyYXBoaWNMaWIuQ29uc3RhbnRzID0ge307XG5HZW9ncmFwaGljTGliLk1hdGggPSB7fTtcbkdlb2dyYXBoaWNMaWIuQWNjdW11bGF0b3IgPSB7fTtcblxuKGZ1bmN0aW9uKFxuICAvKipcbiAgICogQGV4cG9ydHMgR2VvZ3JhcGhpY0xpYi9Db25zdGFudHNcbiAgICogQGRlc2NyaXB0aW9uIERlZmluZSBjb25zdGFudHMgZGVmaW5pbmcgdGhlIHZlcnNpb24gYW5kIFdHUzg0IHBhcmFtZXRlcnMuXG4gICAqL1xuICBjKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8qKlxuICAgKiBAY29uc3RhbnRcbiAgICogQHN1bW1hcnkgV0dTODQgcGFyYW1ldGVycy5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGEgdGhlIGVxdWF0b3JpYWwgcmFkaXVzIChtZXRlcnMpLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gZiB0aGUgZmxhdHRlbmluZy5cbiAgICovXG4gIGMuV0dTODQgPSB7IGE6IDYzNzgxMzcsIGY6IDEvMjk4LjI1NzIyMzU2MyB9O1xuICAvKipcbiAgICogQGNvbnN0YW50XG4gICAqIEBzdW1tYXJ5IGFuIGFycmF5IG9mIHZlcnNpb24gbnVtYmVycy5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1ham9yIHRoZSBtYWpvciB2ZXJzaW9uIG51bWJlci5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbm9yIHRoZSBtaW5vciB2ZXJzaW9uIG51bWJlci5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBhdGNoIHRoZSBwYXRjaCBudW1iZXIuXG4gICAqL1xuICBjLnZlcnNpb24gPSB7IG1ham9yOiAxLCBtaW5vcjogNTEsIHBhdGNoOiAwIH07XG4gIC8qKlxuICAgKiBAY29uc3RhbnRcbiAgICogQHN1bW1hcnkgdmVyc2lvbiBzdHJpbmdcbiAgICovXG4gIGMudmVyc2lvbl9zdHJpbmcgPSBcIjEuNTFcIjtcbn0pKEdlb2dyYXBoaWNMaWIuQ29uc3RhbnRzKTtcblxuKGZ1bmN0aW9uKFxuICAvKipcbiAgICogQGV4cG9ydHMgR2VvZ3JhcGhpY0xpYi9NYXRoXG4gICAqIEBkZXNjcmlwdGlvbiBTb21lIHVzZWZ1bCBtYXRoZW1hdGljYWwgY29uc3RhbnRzIGFuZCBmdW5jdGlvbnMgKG1haW5seSBmb3JcbiAgICogICBpbnRlcm5hbCB1c2UpLlxuICAgKi9cbiAgbSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvKipcbiAgICogQHN1bW1hcnkgVGhlIG51bWJlciBvZiBkaWdpdHMgb2YgcHJlY2lzaW9uIGluIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAqIEBjb25zdGFudCB7bnVtYmVyfVxuICAgKi9cbiAgbS5kaWdpdHMgPSA1MztcbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFRoZSBtYWNoaW5lIGVwc2lsb24uXG4gICAqIEBjb25zdGFudCB7bnVtYmVyfVxuICAgKi9cbiAgbS5lcHNpbG9uID0gTWF0aC5wb3coMC41LCBtLmRpZ2l0cyAtIDEpO1xuICAvKipcbiAgICogQHN1bW1hcnkgVGhlIGZhY3RvciB0byBjb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFucy5cbiAgICogQGNvbnN0YW50IHtudW1iZXJ9XG4gICAqL1xuICBtLmRlZ3JlZSA9IE1hdGguUEkvMTgwO1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBTcXVhcmUgYSBudW1iZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSBudW1iZXIuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBzcXVhcmUuXG4gICAqL1xuICBtLnNxID0gZnVuY3Rpb24oeCkgeyByZXR1cm4geCAqIHg7IH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFRoZSBoeXBvdGVudXNlIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgZmlyc3Qgc2lkZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgdGhlIHNlY29uZCBzaWRlLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgaHlwb3RlbnVzZS5cbiAgICovXG4gIG0uaHlwb3QgPSBNYXRoLmh5cG90IHx8IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgYSwgYjtcbiAgICB4ID0gTWF0aC5hYnMoeCk7XG4gICAgeSA9IE1hdGguYWJzKHkpO1xuICAgIGEgPSBNYXRoLm1heCh4LCB5KTsgYiA9IE1hdGgubWluKHgsIHkpIC8gKGEgPyBhIDogMSk7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnNxcnQoMSArIGIgKiBiKTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQ3ViZSByb290IGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgYXJndW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSByZWFsIGN1YmUgcm9vdC5cbiAgICovXG4gIG0uY2JydCA9IE1hdGguY2JydCB8fCBmdW5jdGlvbih4KSB7XG4gICAgdmFyIHkgPSBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMS8zKTtcbiAgICByZXR1cm4geCA+IDAgPyB5IDogKHggPCAwID8gLXkgOiB4KTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgVGhlIGxvZzFwIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgYXJndW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGxvZygxICsgeCkuXG4gICAqL1xuICBtLmxvZzFwID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbih4KSB7XG4gICAgdmFyIHkgPSAxICsgeCxcbiAgICAgICAgeiA9IHkgLSAxO1xuICAgIC8vIEhlcmUncyB0aGUgZXhwbGFuYXRpb24gZm9yIHRoaXMgbWFnaWM6IHkgPSAxICsgeiwgZXhhY3RseSwgYW5kIHpcbiAgICAvLyBhcHByb3ggeCwgdGh1cyBsb2coeSkveiAod2hpY2ggaXMgbmVhcmx5IGNvbnN0YW50IG5lYXIgeiA9IDApIHJldHVybnNcbiAgICAvLyBhIGdvb2QgYXBwcm94aW1hdGlvbiB0byB0aGUgdHJ1ZSBsb2coMSArIHgpL3guICBUaGUgbXVsdGlwbGljYXRpb24geCAqXG4gICAgLy8gKGxvZyh5KS96KSBpbnRyb2R1Y2VzIGxpdHRsZSBhZGRpdGlvbmFsIGVycm9yLlxuICAgIHJldHVybiB6ID09PSAwID8geCA6IHggKiBNYXRoLmxvZyh5KSAvIHo7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEludmVyc2UgaHlwZXJib2xpYyB0YW5nZW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB0aGUgYXJndW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRhbmg8c3VwPiZtaW51czsxPC9zdXA+IHguXG4gICAqL1xuICBtLmF0YW5oID0gTWF0aC5hdGFuaCB8fCBmdW5jdGlvbih4KSB7XG4gICAgdmFyIHkgPSBNYXRoLmFicyh4KTsgICAgICAgICAgLy8gRW5mb3JjZSBvZGQgcGFyaXR5XG4gICAgeSA9IG0ubG9nMXAoMiAqIHkvKDEgLSB5KSkvMjtcbiAgICByZXR1cm4geCA+IDAgPyB5IDogKHggPCAwID8gLXkgOiB4KTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQ29weSB0aGUgc2lnbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggZ2l2ZXMgdGhlIG1hZ2l0dWRlIG9mIHRoZSByZXN1bHQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGdpdmVzIHRoZSBzaWduIG9mIHRoZSByZXN1bHQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHZhbHVlIHdpdGggdGhlIG1hZ25pdHVkZSBvZiB4IGFuZCB3aXRoIHRoZSBzaWduIG9mIHkuXG4gICAqL1xuICBtLmNvcHlzaWduID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBNYXRoLmFicyh4KSAqICh5IDwgMCB8fCAoeSA9PT0gMCAmJiAxL3kgPCAwKSA/IC0xIDogMSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEFuIGVycm9yLWZyZWUgc3VtLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdVxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdW0gd2l0aCBzdW0ucyA9IHJvdW5kKHUgKyB2KSBhbmQgc3VtLnQgaXMgdSArIHYgJm1pbnVzO1xuICAgKiAgIHJvdW5kKHUgKyB2KVxuICAgKi9cbiAgbS5zdW0gPSBmdW5jdGlvbih1LCB2KSB7XG4gICAgdmFyIHMgPSB1ICsgdixcbiAgICAgICAgdXAgPSBzIC0gdixcbiAgICAgICAgdnBwID0gcyAtIHVwLFxuICAgICAgICB0O1xuICAgIHVwIC09IHU7XG4gICAgdnBwIC09IHY7XG4gICAgdCA9IC0odXAgKyB2cHApO1xuICAgIC8vIHUgKyB2ID0gICAgICAgcyAgICAgICsgdFxuICAgIC8vICAgICAgID0gcm91bmQodSArIHYpICsgdFxuICAgIHJldHVybiB7czogcywgdDogdH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEV2YWx1YXRlIGEgcG9seW5vbWlhbC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBOIHRoZSBvcmRlciBvZiB0aGUgcG9seW5vbWlhbC5cbiAgICogQHBhcmFtIHthcnJheX0gcCB0aGUgY29lZmZpY2llbnQgYXJyYXkgKG9mIHNpemUgTiArIDEpIChsZWFkaW5nXG4gICAqICAgb3JkZXIgY29lZmZpY2llbnQgZmlyc3QpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSB2YXJpYWJsZS5cbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIHZhbHVlIG9mIHRoZSBwb2x5bm9taWFsLlxuICAgKi9cbiAgbS5wb2x5dmFsID0gZnVuY3Rpb24oTiwgcCwgcywgeCkge1xuICAgIHZhciB5ID0gTiA8IDAgPyAwIDogcFtzKytdO1xuICAgIHdoaWxlICgtLU4gPj0gMCkgeSA9IHkgKiB4ICsgcFtzKytdO1xuICAgIHJldHVybiB5O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb2Fyc2VuIGEgdmFsdWUgY2xvc2UgdG8gemVyby5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIGNvYXJzZW5lZCB2YWx1ZS5cbiAgICovXG4gIG0uQW5nUm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgLy8gVGhlIG1ha2VzIHRoZSBzbWFsbGVzdCBnYXAgaW4geCA9IDEvMTYgLSBuZXh0YWZ0ZXIoMS8xNiwgMCkgPSAxLzJeNTcgZm9yXG4gICAgLy8gcmVhbHMgPSAwLjcgcG0gb24gdGhlIGVhcnRoIGlmIHggaXMgYW4gYW5nbGUgaW4gZGVncmVlcy4gIChUaGlzIGlzIGFib3V0XG4gICAgLy8gMTAwMCB0aW1lcyBtb3JlIHJlc29sdXRpb24gdGhhbiB3ZSBnZXQgd2l0aCBhbmdsZXMgYXJvdW5kIDkwIGRlZ3JlZXMuKVxuICAgIC8vIFdlIHVzZSB0aGlzIHRvIGF2b2lkIGhhdmluZyB0byBkZWFsIHdpdGggbmVhciBzaW5ndWxhciBjYXNlcyB3aGVuIHggaXNcbiAgICAvLyBub24temVybyBidXQgdGlueSAoZS5nLiwgMS4wZS0yMDApLiAgVGhpcyBjb252ZXJ0cyAtMCB0byArMDsgaG93ZXZlclxuICAgIC8vIHRpbnkgbmVnYXRpdmUgbnVtYmVycyBnZXQgY29udmVydGVkIHRvIC0wLlxuICAgIGlmICh4ID09PSAwKSByZXR1cm4geDtcbiAgICB2YXIgeiA9IDEvMTYsXG4gICAgICAgIHkgPSBNYXRoLmFicyh4KTtcbiAgICAvLyBUaGUgY29tcGlsZXIgbXVzdG4ndCBcInNpbXBsaWZ5XCIgeiAtICh6IC0geSkgdG8geVxuICAgIHkgPSB5IDwgeiA/IHogLSAoeiAtIHkpIDogeTtcbiAgICByZXR1cm4geCA8IDAgPyAteSA6IHk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFRoZSByZW1haW5kZXIgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSBudW1lcmF0b3Igb2YgdGhlIGRpdmlzaW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IHRoZSBkZW5vbWluYXRvciBvZiB0aGUgZGl2aXNpb25cbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgcmVtYWluZGVyIGluIHRoZSByYW5nZSBbJm1pbnVzO3kvMiwgeS8yXS5cbiAgICogPHA+XG4gICAqIFRoZSByYW5nZSBvZiB4IGlzIHVucmVzdHJpY3RlZDsgeSBtdXN0IGJlIHBvc2l0aXZlLlxuICAgKi9cbiAgbS5yZW1haW5kZXIgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9IHggJSB5O1xuICAgIHJldHVybiB4IDwgLXkvMiA/IHggKyB5IDogKHggPCB5LzIgPyB4IDogeCAtIHkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBOb3JtYWxpemUgYW4gYW5nbGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSBhbmdsZSBpbiBkZWdyZWVzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgYW5nbGUgcmVkdWNlZCB0byB0aGUgcmFuZ2UgKCZtaW51czsxODAmZGVnOyxcbiAgICogICAxODAmZGVnO10uXG4gICAqL1xuICBtLkFuZ05vcm1hbGl6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAvLyBQbGFjZSBhbmdsZSBpbiAoLTE4MCwgMTgwXS5cbiAgICB4ID0gbS5yZW1haW5kZXIoeCwgMzYwKTtcbiAgICByZXR1cm4geCA9PSAtMTgwID8gMTgwIDogeDtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgTm9ybWFsaXplIGEgbGF0aXR1ZGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHRoZSBhbmdsZSBpbiBkZWdyZWVzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB4IGlmIGl0IGlzIGluIHRoZSByYW5nZSBbJm1pbnVzOzkwJmRlZzssIDkwJmRlZztdLFxuICAgKiAgIG90aGVyd2lzZSByZXR1cm4gTmFOLlxuICAgKi9cbiAgbS5MYXRGaXggPSBmdW5jdGlvbih4KSB7XG4gICAgLy8gUmVwbGFjZSBhbmdsZSB3aXRoIE5hTiBpZiBvdXRzaWRlIFstOTAsIDkwXS5cbiAgICByZXR1cm4gTWF0aC5hYnMoeCkgPiA5MCA/IE51bWJlci5OYU4gOiB4O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBUaGUgZXhhY3QgZGlmZmVyZW5jZSBvZiB0d28gYW5nbGVzIHJlZHVjZWQgdG8gKCZtaW51czsxODAmZGVnOyxcbiAgICogICAxODAmZGVnO11cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggdGhlIGZpcnN0IGFuZ2xlIGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IHRoZSBzZWNvbmQgYW5nbGUgaW4gZGVncmVlcy5cbiAgICogQHJldHVybiB7b2JqZWN0fSBkaWZmIHRoZSBleGFjdCBkaWZmZXJlbmNlLCB5ICZtaW51czsgeC5cbiAgICpcbiAgICogVGhpcyBjb21wdXRlcyB6ID0geSAmbWludXM7IHggZXhhY3RseSwgcmVkdWNlZCB0byAoJm1pbnVzOzE4MCZkZWc7LFxuICAgKiAxODAmZGVnO107IGFuZCB0aGVuIHNldHMgZGlmZi5zID0gZCA9IHJvdW5kKHopIGFuZCBkaWZmLnQgPSBlID0geiAmbWludXM7XG4gICAqIHJvdW5kKHopLiAgSWYgZCA9ICZtaW51czsxODAsIHRoZW4gZSAmZ3Q7IDA7IElmIGQgPSAxODAsIHRoZW4gZSAmbGU7IDAuXG4gICAqL1xuICBtLkFuZ0RpZmYgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgLy8gQ29tcHV0ZSB5IC0geCBhbmQgcmVkdWNlIHRvIFstMTgwLDE4MF0gYWNjdXJhdGVseS5cbiAgICB2YXIgciA9IG0uc3VtKG0uQW5nTm9ybWFsaXplKC14KSwgbS5BbmdOb3JtYWxpemUoeSkpLFxuICAgICAgICBkID0gbS5BbmdOb3JtYWxpemUoci5zKSxcbiAgICAgICAgdCA9IHIudDtcbiAgICByZXR1cm4gbS5zdW0oZCA9PT0gMTgwICYmIHQgPiAwID8gLTE4MCA6IGQsIHQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBFdmFsdWF0ZSB0aGUgc2luZSBhbmQgY29zaW5lIGZ1bmN0aW9uIHdpdGggdGhlIGFyZ3VtZW50IGluXG4gICAqICAgZGVncmVlc1xuICAgKiBAcGFyYW0ge251bWJlcn0geCBpbiBkZWdyZWVzLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSByIHdpdGggci5zID0gc2luKHgpIGFuZCByLmMgPSBjb3MoeCkuXG4gICAqL1xuICBtLnNpbmNvc2QgPSBmdW5jdGlvbih4KSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gbWluaW1pemUgcm91bmQtb2ZmIGVycm9ycywgdGhpcyBmdW5jdGlvbiBleGFjdGx5IHJlZHVjZXNcbiAgICAvLyB0aGUgYXJndW1lbnQgdG8gdGhlIHJhbmdlIFstNDUsIDQ1XSBiZWZvcmUgY29udmVydGluZyBpdCB0byByYWRpYW5zLlxuICAgIHZhciByLCBxLCBzLCBjLCBzaW54LCBjb3N4O1xuICAgIHIgPSB4ICUgMzYwO1xuICAgIHEgPSAwICsgTWF0aC5yb3VuZChyIC8gOTApOyAvLyBJZiByIGlzIE5hTiB0aGlzIHJldHVybnMgTmFOXG4gICAgciAtPSA5MCAqIHE7XG4gICAgLy8gbm93IGFicyhyKSA8PSA0NVxuICAgIHIgKj0gdGhpcy5kZWdyZWU7XG4gICAgLy8gUG9zc2libHkgY291bGQgY2FsbCB0aGUgZ251IGV4dGVuc2lvbiBzaW5jb3NcbiAgICBzID0gTWF0aC5zaW4ocik7IGMgPSBNYXRoLmNvcyhyKTtcbiAgICBzd2l0Y2ggKHEgJiAzKSB7XG4gICAgICBjYXNlIDA6ICBzaW54ID0gIHM7IGNvc3ggPSAgYzsgYnJlYWs7XG4gICAgICBjYXNlIDE6ICBzaW54ID0gIGM7IGNvc3ggPSAtczsgYnJlYWs7XG4gICAgICBjYXNlIDI6ICBzaW54ID0gLXM7IGNvc3ggPSAtYzsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBzaW54ID0gLWM7IGNvc3ggPSAgczsgYnJlYWs7IC8vIGNhc2UgM1xuICAgIH1cbiAgICBpZiAoeCAhPT0gMCkgeyBzaW54ICs9IDA7IGNvc3ggKz0gMDsgfVxuICAgIHJldHVybiB7czogc2lueCwgYzogY29zeH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEV2YWx1YXRlIHRoZSBhdGFuMiBmdW5jdGlvbiB3aXRoIHRoZSByZXN1bHQgaW4gZGVncmVlc1xuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcmV0dXJucyBhdGFuMih5LCB4KSBpbiBkZWdyZWVzLCBpbiB0aGUgcmFuZ2UgKCZtaW51czsxODAmZGVnO1xuICAgKiAgIDE4MCZkZWc7XS5cbiAgICovXG4gIG0uYXRhbjJkID0gZnVuY3Rpb24oeSwgeCkge1xuICAgIC8vIEluIG9yZGVyIHRvIG1pbmltaXplIHJvdW5kLW9mZiBlcnJvcnMsIHRoaXMgZnVuY3Rpb24gcmVhcnJhbmdlcyB0aGVcbiAgICAvLyBhcmd1bWVudHMgc28gdGhhdCByZXN1bHQgb2YgYXRhbjIgaXMgaW4gdGhlIHJhbmdlIFstcGkvNCwgcGkvNF0gYmVmb3JlXG4gICAgLy8gY29udmVydGluZyBpdCB0byBkZWdyZWVzIGFuZCBtYXBwaW5nIHRoZSByZXN1bHQgdG8gdGhlIGNvcnJlY3RcbiAgICAvLyBxdWFkcmFudC5cbiAgICB2YXIgcSA9IDAsIHQsIGFuZztcbiAgICBpZiAoTWF0aC5hYnMoeSkgPiBNYXRoLmFicyh4KSkgeyB0ID0geDsgeCA9IHk7IHkgPSB0OyBxID0gMjsgfVxuICAgIGlmICh4IDwgMCkgeyB4ID0gLXg7ICsrcTsgfVxuICAgIC8vIGhlcmUgeCA+PSAwIGFuZCB4ID49IGFicyh5KSwgc28gYW5nbGUgaXMgaW4gWy1waS80LCBwaS80XVxuICAgIGFuZyA9IE1hdGguYXRhbjIoeSwgeCkgLyB0aGlzLmRlZ3JlZTtcbiAgICBzd2l0Y2ggKHEpIHtcbiAgICAgIC8vIE5vdGUgdGhhdCBhdGFuMmQoLTAuMCwgMS4wKSB3aWxsIHJldHVybiAtMC4gIEhvd2V2ZXIsIHdlIGV4cGVjdCB0aGF0XG4gICAgICAvLyBhdGFuMmQgd2lsbCBub3QgYmUgY2FsbGVkIHdpdGggeSA9IC0wLiAgSWYgbmVlZCBiZSwgaW5jbHVkZVxuICAgICAgLy9cbiAgICAgIC8vICAgY2FzZSAwOiBhbmcgPSAwICsgYW5nOyBicmVhaztcbiAgICAgIC8vXG4gICAgICAvLyBhbmQgaGFuZGxlIG1wZnIgYXMgaW4gQW5nUm91bmQuXG4gICAgICBjYXNlIDE6IGFuZyA9ICh5ID49IDAgPyAxODAgOiAtMTgwKSAtIGFuZzsgYnJlYWs7XG4gICAgICBjYXNlIDI6IGFuZyA9ICA5MCAtIGFuZzsgYnJlYWs7XG4gICAgICBjYXNlIDM6IGFuZyA9IC05MCArIGFuZzsgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhbmc7XG4gIH07XG59KShHZW9ncmFwaGljTGliLk1hdGgpO1xuXG4oZnVuY3Rpb24oXG4gIC8qKlxuICAgKiBAZXhwb3J0cyBHZW9ncmFwaGljTGliL0FjY3VtdWxhdG9yXG4gICAqIEBkZXNjcmlwdGlvbiBBY2N1cmF0ZSBzdW1tYXRpb24gdmlhIHRoZVxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9BY2N1bXVsYXRvci5BY2N1bXVsYXRvciBBY2N1bXVsYXRvcn0gY2xhc3NcbiAgICogICAobWFpbmx5IGZvciBpbnRlcm5hbCB1c2UpLlxuICAgKi9cbiAgYSwgbSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBzdW1tYXJ5IEFjY3VyYXRlIHN1bW1hdGlvbiBvZiBtYW55IG51bWJlcnMuXG4gICAqIEBjbGFzc2Rlc2MgVGhpcyBhbGxvd3MgbWFueSBudW1iZXJzIHRvIGJlIGFkZGVkIHRvZ2V0aGVyIHdpdGggdHdpY2UgdGhlXG4gICAqICAgbm9ybWFsIHByZWNpc2lvbi4gIEluIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBtZW1iZXIgZnVuY3Rpb25zLCBzdW1cbiAgICogICBzdGFuZHMgZm9yIHRoZSB2YWx1ZSBjdXJyZW50bHkgaGVsZCBpbiB0aGUgYWNjdW11bGF0b3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgQWNjdW11bGF0b3J9IFt5ID0gMF0gIHNldCBzdW0gPSB5LlxuICAgKi9cbiAgYS5BY2N1bXVsYXRvciA9IGZ1bmN0aW9uKHkpIHtcbiAgICB0aGlzLlNldCh5KTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgU2V0IHRoZSBhY2N1bXVsYXRvciB0byBhIG51bWJlci5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBBY2N1bXVsYXRvcn0gW3kgPSAwXSBzZXQgc3VtID0geS5cbiAgICovXG4gIGEuQWNjdW11bGF0b3IucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uKHkpIHtcbiAgICBpZiAoIXkpIHkgPSAwO1xuICAgIGlmICh5LmNvbnN0cnVjdG9yID09PSBhLkFjY3VtdWxhdG9yKSB7XG4gICAgICB0aGlzLl9zID0geS5fcztcbiAgICAgIHRoaXMuX3QgPSB5Ll90O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zID0geTtcbiAgICAgIHRoaXMuX3QgPSAwO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQWRkIGEgbnVtYmVyIHRvIHRoZSBhY2N1bXVsYXRvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5ID0gMF0gc2V0IHN1bSArPSB5LlxuICAgKi9cbiAgYS5BY2N1bXVsYXRvci5wcm90b3R5cGUuQWRkID0gZnVuY3Rpb24oeSkge1xuICAgIC8vIEhlcmUncyBTaGV3Y2h1aydzIHNvbHV0aW9uLi4uXG4gICAgLy8gQWNjdW11bGF0ZSBzdGFydGluZyBhdCBsZWFzdCBzaWduaWZpY2FudCBlbmRcbiAgICB2YXIgdSA9IG0uc3VtKHksIHRoaXMuX3QpLFxuICAgICAgICB2ID0gbS5zdW0odS5zLCB0aGlzLl9zKTtcbiAgICB1ID0gdS50O1xuICAgIHRoaXMuX3MgPSB2LnM7XG4gICAgdGhpcy5fdCA9IHYudDtcbiAgICAvLyBTdGFydCBpcyBfcywgX3QgZGVjcmVhc2luZyBhbmQgbm9uLWFkamFjZW50LiAgU3VtIGlzIG5vdyAocyArIHQgKyB1KVxuICAgIC8vIGV4YWN0bHkgd2l0aCBzLCB0LCB1IG5vbi1hZGphY2VudCBhbmQgaW4gZGVjcmVhc2luZyBvcmRlciAoZXhjZXB0XG4gICAgLy8gZm9yIHBvc3NpYmxlIHplcm9zKS4gIFRoZSBmb2xsb3dpbmcgY29kZSB0cmllcyB0byBub3JtYWxpemUgdGhlXG4gICAgLy8gcmVzdWx0LiAgSWRlYWxseSwgd2Ugd2FudCBfcyA9IHJvdW5kKHMrdCt1KSBhbmQgX3UgPSByb3VuZChzK3QrdSAtXG4gICAgLy8gX3MpLiAgVGhlIGZvbGxvdyBkb2VzIGFuIGFwcHJveGltYXRlIGpvYiAoYW5kIG1haW50YWlucyB0aGVcbiAgICAvLyBkZWNyZWFzaW5nIG5vbi1hZGphY2VudCBwcm9wZXJ0eSkuICBIZXJlIGFyZSB0d28gXCJmYWlsdXJlc1wiIHVzaW5nXG4gICAgLy8gMy1iaXQgZmxvYXRzOlxuICAgIC8vXG4gICAgLy8gQ2FzZSAxOiBfcyBpcyBub3QgZXF1YWwgdG8gcm91bmQocyt0K3UpIC0tIG9mZiBieSAxIHVscFxuICAgIC8vIFsxMiwgLTFdIC0gOCAtPiBbNCwgMCwgLTFdIC0+IFs0LCAtMV0gPSAzIHNob3VsZCBiZSBbMywgMF0gPSAzXG4gICAgLy9cbiAgICAvLyBDYXNlIDI6IF9zK190IGlzIG5vdCBhcyBjbG9zZSB0byBzK3QrdSBhcyBpdCBzaG9sZCBiZVxuICAgIC8vIFs2NCwgNV0gKyA0IC0+IFs2NCwgOCwgMV0gLT4gWzY0LCAgOF0gPSA3MiAob2ZmIGJ5IDEpXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBbODAsIC03XSA9IDczIChleGFjdClcbiAgICAvL1xuICAgIC8vIFwiRml4aW5nXCIgdGhlc2UgcHJvYmxlbXMgaXMgcHJvYmFibHkgbm90IHdvcnRoIHRoZSBleHBlbnNlLiAgVGhlXG4gICAgLy8gcmVwcmVzZW50YXRpb24gaW5ldml0YWJseSBsZWFkcyB0byBzbWFsbCBlcnJvcnMgaW4gdGhlIGFjY3VtdWxhdGVkXG4gICAgLy8gdmFsdWVzLiAgVGhlIGFkZGl0aW9uYWwgZXJyb3JzIGlsbHVzdHJhdGVkIGhlcmUgYW1vdW50IHRvIDEgdWxwIG9mXG4gICAgLy8gdGhlIGxlc3Mgc2lnbmlmaWNhbnQgd29yZCBkdXJpbmcgZWFjaCBhZGRpdGlvbiB0byB0aGUgQWNjdW11bGF0b3JcbiAgICAvLyBhbmQgYW4gYWRkaXRpb25hbCBwb3NzaWJsZSBlcnJvciBvZiAxIHVscCBpbiB0aGUgcmVwb3J0ZWQgc3VtLlxuICAgIC8vXG4gICAgLy8gSW5jaWRlbnRhbGx5LCB0aGUgXCJpZGVhbFwiIHJlcHJlc2VudGF0aW9uIGRlc2NyaWJlZCBhYm92ZSBpcyBub3RcbiAgICAvLyBjYW5vbmljYWwsIGJlY2F1c2UgX3MgPSByb3VuZChfcyArIF90KSBtYXkgbm90IGJlIHRydWUuICBGb3JcbiAgICAvLyBleGFtcGxlLCB3aXRoIDMtYml0IGZsb2F0czpcbiAgICAvL1xuICAgIC8vIFsxMjgsIDE2XSArIDEgLT4gWzE2MCwgLTE2XSAtLSAxNjAgPSByb3VuZCgxNDUpLlxuICAgIC8vIEJ1dCBbMTYwLCAwXSAtIDE2IC0+IFsxMjgsIDE2XSAtLSAxMjggPSByb3VuZCgxNDQpLlxuICAgIC8vXG4gICAgaWYgKHRoaXMuX3MgPT09IDApICAgICAgICAgIC8vIFRoaXMgaW1wbGllcyB0ID09IDAsXG4gICAgICB0aGlzLl9zID0gdTsgICAgICAgICAgICAgIC8vIHNvIHJlc3VsdCBpcyB1XG4gICAgZWxzZVxuICAgICAgdGhpcy5fdCArPSB1OyAgICAgICAgICAgICAvLyBvdGhlcndpc2UganVzdCBhY2N1bXVsYXRlIHUgdG8gdC5cbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgUmV0dXJuIHRoZSByZXN1bHQgb2YgYWRkaW5nIGEgbnVtYmVyIHRvIHN1bSAoYnV0XG4gICAqICAgZG9uJ3QgY2hhbmdlIHN1bSkuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeSA9IDBdIHRoZSBudW1iZXIgdG8gYmUgYWRkZWQgdG8gdGhlIHN1bS5cbiAgICogQHJldHVybiBzdW0gKyB5LlxuICAgKi9cbiAgYS5BY2N1bXVsYXRvci5wcm90b3R5cGUuU3VtID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBiO1xuICAgIGlmICgheSlcbiAgICAgIHJldHVybiB0aGlzLl9zO1xuICAgIGVsc2Uge1xuICAgICAgYiA9IG5ldyBhLkFjY3VtdWxhdG9yKHRoaXMpO1xuICAgICAgYi5BZGQoeSk7XG4gICAgICByZXR1cm4gYi5fcztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNldCBzdW0gPSAmbWludXM7c3VtLlxuICAgKi9cbiAgYS5BY2N1bXVsYXRvci5wcm90b3R5cGUuTmVnYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcyAqPSAtMTtcbiAgICB0aGlzLl90ICo9IC0xO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBUYWtlIHRoZSByZW1haW5kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgdGhlIGRpdmlzb3Igb2YgdGhlIHJlbWFpbmRlciBvcGVyYXRpb24uXG4gICAqIEByZXR1cm4gc3VtIGluIHJhbmdlIFsmbWludXM7eS8yLCB5LzJdLlxuICAgKi9cbiAgYS5BY2N1bXVsYXRvci5wcm90b3R5cGUuUmVtYWluZGVyID0gZnVuY3Rpb24oeSkge1xuICAgIHRoaXMuX3MgPSBtLnJlbWFpbmRlcih0aGlzLl9zLCB5KTtcbiAgICB0aGlzLkFkZCgwKTtcbiAgfTtcbn0pKEdlb2dyYXBoaWNMaWIuQWNjdW11bGF0b3IsIEdlb2dyYXBoaWNMaWIuTWF0aCk7XG5cbi8qKioqKioqKioqKioqKioqIEdlb2Rlc2ljLmpzICoqKioqKioqKioqKioqKiovXG4vKlxuICogR2VvZGVzaWMuanNcbiAqIFRyYW5zY3JpcHRpb24gb2YgR2VvZGVzaWMuW2NoXXBwIGludG8gSmF2YVNjcmlwdC5cbiAqXG4gKiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBDKysgY2xhc3MuICBUaGUgY29udmVyc2lvbiBpcyBhIGxpdGVyYWxcbiAqIGNvbnZlcnNpb24gZnJvbSBDKysuXG4gKlxuICogVGhlIGFsZ29yaXRobXMgYXJlIGRlcml2ZWQgaW5cbiAqXG4gKiAgICBDaGFybGVzIEYuIEYuIEthcm5leSxcbiAqICAgIEFsZ29yaXRobXMgZm9yIGdlb2Rlc2ljcywgSi4gR2VvZGVzeSA4NywgNDMtNTUgKDIwMTMpO1xuICogICAgaHR0cHM6Ly9kb2kub3JnLzEwLjEwMDcvczAwMTkwLTAxMi0wNTc4LXpcbiAqICAgIEFkZGVuZGE6IGh0dHBzOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5pby9nZW9kLWFkZGVuZGEuaHRtbFxuICpcbiAqIENvcHlyaWdodCAoYykgQ2hhcmxlcyBLYXJuZXkgKDIwMTEtMjAxNykgPGNoYXJsZXNAa2FybmV5LmNvbT4gYW5kIGxpY2Vuc2VkXG4gKiB1bmRlciB0aGUgTUlUL1gxMSBMaWNlbnNlLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICogaHR0cHM6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLmlvL1xuICovXG5cbi8vIExvYWQgQUZURVIgTWF0aC5qc1xuXG5HZW9ncmFwaGljTGliLkdlb2Rlc2ljID0ge307XG5HZW9ncmFwaGljTGliLkdlb2Rlc2ljTGluZSA9IHt9O1xuR2VvZ3JhcGhpY0xpYi5Qb2x5Z29uQXJlYSA9IHt9O1xuXG4oZnVuY3Rpb24oXG4gIC8qKlxuICAgKiBAZXhwb3J0cyBHZW9ncmFwaGljTGliL0dlb2Rlc2ljXG4gICAqIEBkZXNjcmlwdGlvbiBTb2x2ZSBnZW9kZXNpYyBwcm9ibGVtcyB2aWEgdGhlXG4gICAqICAge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0dlb2Rlc2ljLkdlb2Rlc2ljIEdlb2Rlc2ljfSBjbGFzcy5cbiAgICovXG4gIGcsIGwsIHAsIG0sIGMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVIgPSA2LFxuICAgICAgbkExXyA9IEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVIsXG4gICAgICBuQTJfID0gR0VPR1JBUEhJQ0xJQl9HRU9ERVNJQ19PUkRFUixcbiAgICAgIG5BM18gPSBHRU9HUkFQSElDTElCX0dFT0RFU0lDX09SREVSLFxuICAgICAgbkEzeF8gPSBuQTNfLFxuICAgICAgbkMzeF8sIG5DNHhfLFxuICAgICAgbWF4aXQxXyA9IDIwLFxuICAgICAgbWF4aXQyXyA9IG1heGl0MV8gKyBtLmRpZ2l0cyArIDEwLFxuICAgICAgdG9sMF8gPSBtLmVwc2lsb24sXG4gICAgICB0b2wxXyA9IDIwMCAqIHRvbDBfLFxuICAgICAgdG9sMl8gPSBNYXRoLnNxcnQodG9sMF8pLFxuICAgICAgdG9sYl8gPSB0b2wwXyAqIHRvbDFfLFxuICAgICAgeHRocmVzaF8gPSAxMDAwICogdG9sMl8sXG4gICAgICBDQVBfTk9ORSA9IDAsXG4gICAgICBDQVBfQUxMICA9IDB4MUYsXG4gICAgICBDQVBfTUFTSyA9IENBUF9BTEwsXG4gICAgICBPVVRfQUxMICA9IDB4N0Y4MCxcbiAgICAgIGFzdHJvaWQsXG4gICAgICBBMW0xZl9jb2VmZiwgQzFmX2NvZWZmLCBDMXBmX2NvZWZmLFxuICAgICAgQTJtMWZfY29lZmYsIEMyZl9jb2VmZixcbiAgICAgIEEzX2NvZWZmLCBDM19jb2VmZiwgQzRfY29lZmY7XG5cbiAgZy50aW55XyA9IE1hdGguc3FydChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgZy5uQzFfID0gR0VPR1JBUEhJQ0xJQl9HRU9ERVNJQ19PUkRFUjtcbiAgZy5uQzFwXyA9IEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVI7XG4gIGcubkMyXyA9IEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVI7XG4gIGcubkMzXyA9IEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVI7XG4gIGcubkM0XyA9IEdFT0dSQVBISUNMSUJfR0VPREVTSUNfT1JERVI7XG4gIG5DM3hfID0gKGcubkMzXyAqIChnLm5DM18gLSAxKSkgLyAyO1xuICBuQzR4XyA9IChnLm5DNF8gKiAoZy5uQzRfICsgMSkpIC8gMjtcbiAgZy5DQVBfQzEgICA9IDE8PDA7XG4gIGcuQ0FQX0MxcCAgPSAxPDwxO1xuICBnLkNBUF9DMiAgID0gMTw8MjtcbiAgZy5DQVBfQzMgICA9IDE8PDM7XG4gIGcuQ0FQX0M0ICAgPSAxPDw0O1xuXG4gIGcuTk9ORSAgICAgICAgICA9IDA7XG4gIGcuQVJDICAgICAgICAgICA9IDE8PDY7XG4gIGcuTEFUSVRVREUgICAgICA9IDE8PDcgIHwgQ0FQX05PTkU7XG4gIGcuTE9OR0lUVURFICAgICA9IDE8PDggIHwgZy5DQVBfQzM7XG4gIGcuQVpJTVVUSCAgICAgICA9IDE8PDkgIHwgQ0FQX05PTkU7XG4gIGcuRElTVEFOQ0UgICAgICA9IDE8PDEwIHwgZy5DQVBfQzE7XG4gIGcuU1RBTkRBUkQgICAgICA9IGcuTEFUSVRVREUgfCBnLkxPTkdJVFVERSB8IGcuQVpJTVVUSCB8IGcuRElTVEFOQ0U7XG4gIGcuRElTVEFOQ0VfSU4gICA9IDE8PDExIHwgZy5DQVBfQzEgfCBnLkNBUF9DMXA7XG4gIGcuUkVEVUNFRExFTkdUSCA9IDE8PDEyIHwgZy5DQVBfQzEgfCBnLkNBUF9DMjtcbiAgZy5HRU9ERVNJQ1NDQUxFID0gMTw8MTMgfCBnLkNBUF9DMSB8IGcuQ0FQX0MyO1xuICBnLkFSRUEgICAgICAgICAgPSAxPDwxNCB8IGcuQ0FQX0M0O1xuICBnLkFMTCAgICAgICAgICAgPSBPVVRfQUxMfCBDQVBfQUxMO1xuICBnLkxPTkdfVU5ST0xMICAgPSAxPDwxNTtcbiAgZy5PVVRfTUFTSyAgICAgID0gT1VUX0FMTHwgZy5MT05HX1VOUk9MTDtcblxuICBnLlNpbkNvc1NlcmllcyA9IGZ1bmN0aW9uKHNpbnAsIHNpbngsIGNvc3gsIGMpIHtcbiAgICAvLyBFdmFsdWF0ZVxuICAgIC8vIHkgPSBzaW5wID8gc3VtKGNbaV0gKiBzaW4oIDIqaSAgICAqIHgpLCBpLCAxLCBuKSA6XG4gICAgLy8gICAgICAgICAgICBzdW0oY1tpXSAqIGNvcygoMippKzEpICogeCksIGksIDAsIG4tMSlcbiAgICAvLyB1c2luZyBDbGVuc2hhdyBzdW1tYXRpb24uICBOLkIuIGNbMF0gaXMgdW51c2VkIGZvciBzaW4gc2VyaWVzXG4gICAgLy8gQXBwcm94IG9wZXJhdGlvbiBjb3VudCA9IChuICsgNSkgbXVsdCBhbmQgKDIgKiBuICsgMikgYWRkXG4gICAgdmFyIGsgPSBjLmxlbmd0aCwgICAgICAgICAgIC8vIFBvaW50IHRvIG9uZSBiZXlvbmQgbGFzdCBlbGVtZW50XG4gICAgICAgIG4gPSBrIC0gKHNpbnAgPyAxIDogMCksXG4gICAgICAgIGFyID0gMiAqIChjb3N4IC0gc2lueCkgKiAoY29zeCArIHNpbngpLCAvLyAyICogY29zKDIgKiB4KVxuICAgICAgICB5MCA9IG4gJiAxID8gY1stLWtdIDogMCwgeTEgPSAwOyAgICAgICAgLy8gYWNjdW11bGF0b3JzIGZvciBzdW1cbiAgICAvLyBOb3cgbiBpcyBldmVuXG4gICAgbiA9IE1hdGguZmxvb3Iobi8yKTtcbiAgICB3aGlsZSAobi0tKSB7XG4gICAgICAvLyBVbnJvbGwgbG9vcCB4IDIsIHNvIGFjY3VtdWxhdG9ycyByZXR1cm4gdG8gdGhlaXIgb3JpZ2luYWwgcm9sZVxuICAgICAgeTEgPSBhciAqIHkwIC0geTEgKyBjWy0ta107XG4gICAgICB5MCA9IGFyICogeTEgLSB5MCArIGNbLS1rXTtcbiAgICB9XG4gICAgcmV0dXJuIChzaW5wID8gMiAqIHNpbnggKiBjb3N4ICogeTAgOiAvLyBzaW4oMiAqIHgpICogeTBcbiAgICAgICAgICAgIGNvc3ggKiAoeTAgLSB5MSkpOyAgICAgICAgICAgIC8vIGNvcyh4KSAqICh5MCAtIHkxKVxuICB9O1xuXG4gIGFzdHJvaWQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgLy8gU29sdmUga140KzIqa14zLSh4XjIreV4yLTEpKmteMi0yKnleMiprLXleMiA9IDAgZm9yIHBvc2l0aXZlXG4gICAgLy8gcm9vdCBrLiAgVGhpcyBzb2x1dGlvbiBpcyBhZGFwdGVkIGZyb20gR2VvY2VudHJpYzo6UmV2ZXJzZS5cbiAgICB2YXIgayxcbiAgICAgICAgcCA9IG0uc3EoeCksXG4gICAgICAgIHEgPSBtLnNxKHkpLFxuICAgICAgICByID0gKHAgKyBxIC0gMSkgLyA2LFxuICAgICAgICBTLCByMiwgcjMsIGRpc2MsIHUsIFQzLCBULCBhbmcsIHYsIHV2LCB3O1xuICAgIGlmICggIShxID09PSAwICYmIHIgPD0gMCkgKSB7XG4gICAgICAvLyBBdm9pZCBwb3NzaWJsZSBkaXZpc2lvbiBieSB6ZXJvIHdoZW4gciA9IDAgYnkgbXVsdGlwbHlpbmdcbiAgICAgIC8vIGVxdWF0aW9ucyBmb3IgcyBhbmQgdCBieSByXjMgYW5kIHIsIHJlc3AuXG4gICAgICBTID0gcCAqIHEgLyA0OyAgICAgICAgICAgIC8vIFMgPSByXjMgKiBzXG4gICAgICByMiA9IG0uc3Eocik7XG4gICAgICByMyA9IHIgKiByMjtcbiAgICAgIC8vIFRoZSBkaXNjcmltaW5hbnQgb2YgdGhlIHF1YWRyYXRpYyBlcXVhdGlvbiBmb3IgVDMuICBUaGlzIGlzXG4gICAgICAvLyB6ZXJvIG9uIHRoZSBldm9sdXRlIGN1cnZlIHBeKDEvMykrcV4oMS8zKSA9IDFcbiAgICAgIGRpc2MgPSBTICogKFMgKyAyICogcjMpO1xuICAgICAgdSA9IHI7XG4gICAgICBpZiAoZGlzYyA+PSAwKSB7XG4gICAgICAgIFQzID0gUyArIHIzO1xuICAgICAgICAvLyBQaWNrIHRoZSBzaWduIG9uIHRoZSBzcXJ0IHRvIG1heGltaXplIGFicyhUMykuICBUaGlzXG4gICAgICAgIC8vIG1pbmltaXplcyBsb3NzIG9mIHByZWNpc2lvbiBkdWUgdG8gY2FuY2VsbGF0aW9uLiAgVGhlXG4gICAgICAgIC8vIHJlc3VsdCBpcyB1bmNoYW5nZWQgYmVjYXVzZSBvZiB0aGUgd2F5IHRoZSBUIGlzIHVzZWRcbiAgICAgICAgLy8gaW4gZGVmaW5pdGlvbiBvZiB1LlxuICAgICAgICBUMyArPSBUMyA8IDAgPyAtTWF0aC5zcXJ0KGRpc2MpIDogTWF0aC5zcXJ0KGRpc2MpOyAgICAvLyBUMyA9IChyICogdCleM1xuICAgICAgICAvLyBOLkIuIGNicnQgYWx3YXlzIHJldHVybnMgdGhlIHJlYWwgcm9vdC4gIGNicnQoLTgpID0gLTIuXG4gICAgICAgIFQgPSBtLmNicnQoVDMpOyAgICAgLy8gVCA9IHIgKiB0XG4gICAgICAgIC8vIFQgY2FuIGJlIHplcm87IGJ1dCB0aGVuIHIyIC8gVCAtPiAwLlxuICAgICAgICB1ICs9IFQgKyAoVCAhPT0gMCA/IHIyIC8gVCA6IDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVCBpcyBjb21wbGV4LCBidXQgdGhlIHdheSB1IGlzIGRlZmluZWQgdGhlIHJlc3VsdCBpcyByZWFsLlxuICAgICAgICBhbmcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgtZGlzYyksIC0oUyArIHIzKSk7XG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBwb3NzaWJsZSBjdWJlIHJvb3RzLiAgV2UgY2hvb3NlIHRoZVxuICAgICAgICAvLyByb290IHdoaWNoIGF2b2lkcyBjYW5jZWxsYXRpb24uICBOb3RlIHRoYXQgZGlzYyA8IDBcbiAgICAgICAgLy8gaW1wbGllcyB0aGF0IHIgPCAwLlxuICAgICAgICB1ICs9IDIgKiByICogTWF0aC5jb3MoYW5nIC8gMyk7XG4gICAgICB9XG4gICAgICB2ID0gTWF0aC5zcXJ0KG0uc3EodSkgKyBxKTsgICAgICAgLy8gZ3VhcmFudGVlZCBwb3NpdGl2ZVxuICAgICAgLy8gQXZvaWQgbG9zcyBvZiBhY2N1cmFjeSB3aGVuIHUgPCAwLlxuICAgICAgdXYgPSB1IDwgMCA/IHEgLyAodiAtIHUpIDogdSArIHY7IC8vIHUrdiwgZ3VhcmFudGVlZCBwb3NpdGl2ZVxuICAgICAgdyA9ICh1diAtIHEpIC8gKDIgKiB2KTsgICAgICAgICAgIC8vIHBvc2l0aXZlP1xuICAgICAgLy8gUmVhcnJhbmdlIGV4cHJlc3Npb24gZm9yIGsgdG8gYXZvaWQgbG9zcyBvZiBhY2N1cmFjeSBkdWUgdG9cbiAgICAgIC8vIHN1YnRyYWN0aW9uLiAgRGl2aXNpb24gYnkgMCBub3QgcG9zc2libGUgYmVjYXVzZSB1diA+IDAsIHcgPj0gMC5cbiAgICAgIGsgPSB1diAvIChNYXRoLnNxcnQodXYgKyBtLnNxKHcpKSArIHcpOyAvLyBndWFyYW50ZWVkIHBvc2l0aXZlXG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcSA9PSAwICYmIHIgPD0gMFxuICAgICAgLy8geSA9IDAgd2l0aCB8eHwgPD0gMS4gIEhhbmRsZSB0aGlzIGNhc2UgZGlyZWN0bHkuXG4gICAgICAvLyBmb3IgeSBzbWFsbCwgcG9zaXRpdmUgcm9vdCBpcyBrID0gYWJzKHkpL3NxcnQoMS14XjIpXG4gICAgICBrID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGs7XG4gIH07XG5cbiAgQTFtMWZfY29lZmYgPSBbXG4gICAgLy8gKDEtZXBzKSpBMS0xLCBwb2x5bm9taWFsIGluIGVwczIgb2Ygb3JkZXIgM1xuICAgICAgKzEsIDQsIDY0LCAwLCAyNTZcbiAgXTtcblxuICAvLyBUaGUgc2NhbGUgZmFjdG9yIEExLTEgPSBtZWFuIHZhbHVlIG9mIChkL2RzaWdtYSlJMSAtIDFcbiAgZy5BMW0xZiA9IGZ1bmN0aW9uKGVwcykge1xuICAgIHZhciBwID0gTWF0aC5mbG9vcihuQTFfLzIpLFxuICAgICAgICB0ID0gbS5wb2x5dmFsKHAsIEExbTFmX2NvZWZmLCAwLCBtLnNxKGVwcykpIC8gQTFtMWZfY29lZmZbcCArIDFdO1xuICAgIHJldHVybiAodCArIGVwcykgLyAoMSAtIGVwcyk7XG4gIH07XG5cbiAgQzFmX2NvZWZmID0gW1xuICAgIC8vIEMxWzFdL2Vwc14xLCBwb2x5bm9taWFsIGluIGVwczIgb2Ygb3JkZXIgMlxuICAgICAgLTEsIDYsIC0xNiwgMzIsXG4gICAgLy8gQzFbMl0vZXBzXjIsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAyXG4gICAgICAtOSwgNjQsIC0xMjgsIDIwNDgsXG4gICAgLy8gQzFbM10vZXBzXjMsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICArOSwgLTE2LCA3NjgsXG4gICAgLy8gQzFbNF0vZXBzXjQsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICArMywgLTUsIDUxMixcbiAgICAvLyBDMVs1XS9lcHNeNSwgcG9seW5vbWlhbCBpbiBlcHMyIG9mIG9yZGVyIDBcbiAgICAgIC03LCAxMjgwLFxuICAgIC8vIEMxWzZdL2Vwc142LCBwb2x5bm9taWFsIGluIGVwczIgb2Ygb3JkZXIgMFxuICAgICAgLTcsIDIwNDhcbiAgXTtcblxuICAvLyBUaGUgY29lZmZpY2llbnRzIEMxW2xdIGluIHRoZSBGb3VyaWVyIGV4cGFuc2lvbiBvZiBCMVxuICBnLkMxZiA9IGZ1bmN0aW9uKGVwcywgYykge1xuICAgIHZhciBlcHMyID0gbS5zcShlcHMpLFxuICAgICAgICBkID0gZXBzLFxuICAgICAgICBvID0gMCxcbiAgICAgICAgbCwgcDtcbiAgICBmb3IgKGwgPSAxOyBsIDw9IGcubkMxXzsgKytsKSB7ICAgICAvLyBsIGlzIGluZGV4IG9mIEMxcFtsXVxuICAgICAgcCA9IE1hdGguZmxvb3IoKGcubkMxXyAtIGwpIC8gMik7IC8vIG9yZGVyIG9mIHBvbHlub21pYWwgaW4gZXBzXjJcbiAgICAgIGNbbF0gPSBkICogbS5wb2x5dmFsKHAsIEMxZl9jb2VmZiwgbywgZXBzMikgLyBDMWZfY29lZmZbbyArIHAgKyAxXTtcbiAgICAgIG8gKz0gcCArIDI7XG4gICAgICBkICo9IGVwcztcbiAgICB9XG4gIH07XG5cbiAgQzFwZl9jb2VmZiA9IFtcbiAgICAvLyBDMXBbMV0vZXBzXjEsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAyXG4gICAgICArMjA1LCAtNDMyLCA3NjgsIDE1MzYsXG4gICAgLy8gQzFwWzJdL2Vwc14yLCBwb2x5bm9taWFsIGluIGVwczIgb2Ygb3JkZXIgMlxuICAgICAgKzQwMDUsIC00NzM2LCAzODQwLCAxMjI4OCxcbiAgICAvLyBDMXBbM10vZXBzXjMsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICAtMjI1LCAxMTYsIDM4NCxcbiAgICAvLyBDMXBbNF0vZXBzXjQsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICAtNzE3MywgMjY5NSwgNzY4MCxcbiAgICAvLyBDMXBbNV0vZXBzXjUsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAwXG4gICAgICArMzQ2NywgNzY4MCxcbiAgICAvLyBDMXBbNl0vZXBzXjYsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAwXG4gICAgICArMzgwODEsIDYxNDQwXG4gIF07XG5cbiAgLy8gVGhlIGNvZWZmaWNpZW50cyBDMXBbbF0gaW4gdGhlIEZvdXJpZXIgZXhwYW5zaW9uIG9mIEIxcFxuICBnLkMxcGYgPSBmdW5jdGlvbihlcHMsIGMpIHtcbiAgICB2YXIgZXBzMiA9IG0uc3EoZXBzKSxcbiAgICAgICAgZCA9IGVwcyxcbiAgICAgICAgbyA9IDAsXG4gICAgICAgIGwsIHA7XG4gICAgZm9yIChsID0gMTsgbCA8PSBnLm5DMXBfOyArK2wpIHsgICAgIC8vIGwgaXMgaW5kZXggb2YgQzFwW2xdXG4gICAgICBwID0gTWF0aC5mbG9vcigoZy5uQzFwXyAtIGwpIC8gMik7IC8vIG9yZGVyIG9mIHBvbHlub21pYWwgaW4gZXBzXjJcbiAgICAgIGNbbF0gPSBkICogbS5wb2x5dmFsKHAsIEMxcGZfY29lZmYsIG8sIGVwczIpIC8gQzFwZl9jb2VmZltvICsgcCArIDFdO1xuICAgICAgbyArPSBwICsgMjtcbiAgICAgIGQgKj0gZXBzO1xuICAgIH1cbiAgfTtcblxuICBBMm0xZl9jb2VmZiA9IFtcbiAgICAvLyAoZXBzKzEpKkEyLTEsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAzXG4gICAgICAtMTEsIC0yOCwgLTE5MiwgMCwgMjU2XG4gIF07XG5cbiAgLy8gVGhlIHNjYWxlIGZhY3RvciBBMi0xID0gbWVhbiB2YWx1ZSBvZiAoZC9kc2lnbWEpSTIgLSAxXG4gIGcuQTJtMWYgPSBmdW5jdGlvbihlcHMpIHtcbiAgICB2YXIgcCA9IE1hdGguZmxvb3IobkEyXy8yKSxcbiAgICAgICAgdCA9IG0ucG9seXZhbChwLCBBMm0xZl9jb2VmZiwgMCwgbS5zcShlcHMpKSAvIEEybTFmX2NvZWZmW3AgKyAxXTtcbiAgICByZXR1cm4gKHQgLSBlcHMpIC8gKDEgKyBlcHMpO1xuICB9O1xuXG4gIEMyZl9jb2VmZiA9IFtcbiAgICAvLyBDMlsxXS9lcHNeMSwgcG9seW5vbWlhbCBpbiBlcHMyIG9mIG9yZGVyIDJcbiAgICAgICsxLCAyLCAxNiwgMzIsXG4gICAgLy8gQzJbMl0vZXBzXjIsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAyXG4gICAgICArMzUsIDY0LCAzODQsIDIwNDgsXG4gICAgLy8gQzJbM10vZXBzXjMsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICArMTUsIDgwLCA3NjgsXG4gICAgLy8gQzJbNF0vZXBzXjQsIHBvbHlub21pYWwgaW4gZXBzMiBvZiBvcmRlciAxXG4gICAgICArNywgMzUsIDUxMixcbiAgICAvLyBDMls1XS9lcHNeNSwgcG9seW5vbWlhbCBpbiBlcHMyIG9mIG9yZGVyIDBcbiAgICAgICs2MywgMTI4MCxcbiAgICAvLyBDMls2XS9lcHNeNiwgcG9seW5vbWlhbCBpbiBlcHMyIG9mIG9yZGVyIDBcbiAgICAgICs3NywgMjA0OFxuICBdO1xuXG4gIC8vIFRoZSBjb2VmZmljaWVudHMgQzJbbF0gaW4gdGhlIEZvdXJpZXIgZXhwYW5zaW9uIG9mIEIyXG4gIGcuQzJmID0gZnVuY3Rpb24oZXBzLCBjKSB7XG4gICAgdmFyIGVwczIgPSBtLnNxKGVwcyksXG4gICAgICAgIGQgPSBlcHMsXG4gICAgICAgIG8gPSAwLFxuICAgICAgICBsLCBwO1xuICAgIGZvciAobCA9IDE7IGwgPD0gZy5uQzJfOyArK2wpIHsgICAgIC8vIGwgaXMgaW5kZXggb2YgQzJbbF1cbiAgICAgIHAgPSBNYXRoLmZsb29yKChnLm5DMl8gLSBsKSAvIDIpOyAvLyBvcmRlciBvZiBwb2x5bm9taWFsIGluIGVwc14yXG4gICAgICBjW2xdID0gZCAqIG0ucG9seXZhbChwLCBDMmZfY29lZmYsIG8sIGVwczIpIC8gQzJmX2NvZWZmW28gKyBwICsgMV07XG4gICAgICBvICs9IHAgKyAyO1xuICAgICAgZCAqPSBlcHM7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGEgdGhlIGVxdWF0b3JpYWwgcmFkaXVzIChtZXRlcnMpLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gZiB0aGUgZmxhdHRlbmluZy5cbiAgICogQHN1bW1hcnkgSW5pdGlhbGl6ZSBhIEdlb2Rlc2ljIG9iamVjdCBmb3IgYSBzcGVjaWZpYyBlbGxpcHNvaWQuXG4gICAqIEBjbGFzc2Rlc2MgUGVyZm9ybXMgZ2VvZGVzaWMgY2FsY3VsYXRpb25zIG9uIGFuIGVsbGlwc29pZCBvZiByZXZvbHV0aW9uLlxuICAgKiAgIFRoZSByb3V0aW5lcyBmb3Igc29sdmluZyB0aGUgZGlyZWN0IGFuZCBpbnZlcnNlIHByb2JsZW1zIHJldHVybiBhblxuICAgKiAgIG9iamVjdCB3aXRoIHNvbWUgb2YgdGhlIGZvbGxvd2luZyBmaWVsZHMgc2V0OiBsYXQxLCBsb24xLCBhemkxLCBsYXQyLFxuICAgKiAgIGxvbjIsIGF6aTIsIHMxMiwgYTEyLCBtMTIsIE0xMiwgTTIxLCBTMTIuICBTZWUge0B0dXRvcmlhbCAyLWludGVyZmFjZX0sXG4gICAqICAgXCJUaGUgcmVzdWx0c1wiLlxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgR2VvZ3JhcGhpY0xpYiA9IHJlcXVpcmUoXCJnZW9ncmFwaGljbGliXCIpLFxuICAgKiAgICAgZ2VvZCA9IEdlb2dyYXBoaWNMaWIuR2VvZGVzaWMuV0dTODQ7XG4gICAqIHZhciBpbnYgPSBnZW9kLkludmVyc2UoMSwyLDMsNCk7XG4gICAqIGNvbnNvbGUubG9nKFwibGF0MSA9IFwiICsgaW52LmxhdDEgKyBcIiwgbG9uMSA9IFwiICsgaW52LmxvbjEgK1xuICAgKiAgICAgICAgICAgICBcIiwgbGF0MiA9IFwiICsgaW52LmxhdDIgKyBcIiwgbG9uMiA9IFwiICsgaW52LmxvbjIgK1xuICAgKiAgICAgICAgICAgICBcIixcXG5hemkxID0gXCIgKyBpbnYuYXppMSArIFwiLCBhemkyID0gXCIgKyBpbnYuYXppMiArXG4gICAqICAgICAgICAgICAgIFwiLCBzMTIgPSBcIiArIGludi5zMTIpO1xuICAgKiBAcGFyYW0ge251bWJlcn0gYSB0aGUgZXF1YXRvcmlhbCByYWRpdXMgb2YgdGhlIGVsbGlwc29pZCAobWV0ZXJzKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGYgdGhlIGZsYXR0ZW5pbmcgb2YgdGhlIGVsbGlwc29pZC4gIFNldHRpbmcgZiA9IDAgZ2l2ZXNcbiAgICogICBhIHNwaGVyZSAob24gd2hpY2ggZ2VvZGVzaWNzIGFyZSBncmVhdCBjaXJjbGVzKS4gIE5lZ2F0aXZlIGYgZ2l2ZXMgYVxuICAgKiAgIHByb2xhdGUgZWxsaXBzb2lkLlxuICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwYXJhbWV0ZXJzIGFyZSBpbGxlZ2FsLlxuICAgKi9cbiAgZy5HZW9kZXNpYyA9IGZ1bmN0aW9uKGEsIGYpIHtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuZiA9IGY7XG4gICAgdGhpcy5fZjEgPSAxIC0gdGhpcy5mO1xuICAgIHRoaXMuX2UyID0gdGhpcy5mICogKDIgLSB0aGlzLmYpO1xuICAgIHRoaXMuX2VwMiA9IHRoaXMuX2UyIC8gbS5zcSh0aGlzLl9mMSk7IC8vIGUyIC8gKDEgLSBlMilcbiAgICB0aGlzLl9uID0gdGhpcy5mIC8gKCAyIC0gdGhpcy5mKTtcbiAgICB0aGlzLl9iID0gdGhpcy5hICogdGhpcy5fZjE7XG4gICAgLy8gYXV0aGFsaWMgcmFkaXVzIHNxdWFyZWRcbiAgICB0aGlzLl9jMiA9IChtLnNxKHRoaXMuYSkgKyBtLnNxKHRoaXMuX2IpICpcbiAgICAgICAgICAgICAgICAodGhpcy5fZTIgPT09IDAgPyAxIDpcbiAgICAgICAgICAgICAgICAgKHRoaXMuX2UyID4gMCA/IG0uYXRhbmgoTWF0aC5zcXJ0KHRoaXMuX2UyKSkgOlxuICAgICAgICAgICAgICAgICAgTWF0aC5hdGFuKE1hdGguc3FydCgtdGhpcy5fZTIpKSkgL1xuICAgICAgICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5hYnModGhpcy5fZTIpKSkpLzI7XG4gICAgLy8gVGhlIHNpZzEyIHRocmVzaG9sZCBmb3IgXCJyZWFsbHkgc2hvcnRcIi4gIFVzaW5nIHRoZSBhdXhpbGlhcnkgc3BoZXJlXG4gICAgLy8gc29sdXRpb24gd2l0aCBkbm0gY29tcHV0ZWQgYXQgKGJldDEgKyBiZXQyKSAvIDIsIHRoZSByZWxhdGl2ZSBlcnJvciBpblxuICAgIC8vIHRoZSBhemltdXRoIGNvbnNpc3RlbmN5IGNoZWNrIGlzIHNpZzEyXjIgKiBhYnMoZikgKiBtaW4oMSwgMS1mLzIpIC8gMi5cbiAgICAvLyAoRXJyb3IgbWVhc3VyZWQgZm9yIDEvMTAwIDwgYi9hIDwgMTAwIGFuZCBhYnMoZikgPj0gMS8xMDAwLiAgRm9yIGEgZ2l2ZW5cbiAgICAvLyBmIGFuZCBzaWcxMiwgdGhlIG1heCBlcnJvciBvY2N1cnMgZm9yIGxpbmVzIG5lYXIgdGhlIHBvbGUuICBJZiB0aGUgb2xkXG4gICAgLy8gcnVsZSBmb3IgY29tcHV0aW5nIGRubSA9IChkbjEgKyBkbjIpLzIgaXMgdXNlZCwgdGhlbiB0aGUgZXJyb3IgaW5jcmVhc2VzXG4gICAgLy8gYnkgYSBmYWN0b3Igb2YgMi4pICBTZXR0aW5nIHRoaXMgZXF1YWwgdG8gZXBzaWxvbiBnaXZlcyBzaWcxMiA9IGV0b2wyLlxuICAgIC8vIEhlcmUgMC4xIGlzIGEgc2FmZXR5IGZhY3RvciAoZXJyb3IgZGVjcmVhc2VkIGJ5IDEwMCkgYW5kIG1heCgwLjAwMSxcbiAgICAvLyBhYnMoZikpIHN0b3BzIGV0b2wyIGdldHRpbmcgdG9vIGxhcmdlIGluIHRoZSBuZWFybHkgc3BoZXJpY2FsIGNhc2UuXG4gICAgdGhpcy5fZXRvbDIgPSAwLjEgKiB0b2wyXyAvXG4gICAgICBNYXRoLnNxcnQoIE1hdGgubWF4KDAuMDAxLCBNYXRoLmFicyh0aGlzLmYpKSAqXG4gICAgICAgICAgICAgICAgIE1hdGgubWluKDEuMCwgMSAtIHRoaXMuZi8yKSAvIDIgKTtcbiAgICBpZiAoIShpc0Zpbml0ZSh0aGlzLmEpICYmIHRoaXMuYSA+IDApKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXF1YXRvcmlhbCByYWRpdXMgaXMgbm90IHBvc2l0aXZlXCIpO1xuICAgIGlmICghKGlzRmluaXRlKHRoaXMuX2IpICYmIHRoaXMuX2IgPiAwKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvbGFyIHNlbWktYXhpcyBpcyBub3QgcG9zaXRpdmVcIik7XG4gICAgdGhpcy5fQTN4ID0gbmV3IEFycmF5KG5BM3hfKTtcbiAgICB0aGlzLl9DM3ggPSBuZXcgQXJyYXkobkMzeF8pO1xuICAgIHRoaXMuX0M0eCA9IG5ldyBBcnJheShuQzR4Xyk7XG4gICAgdGhpcy5BM2NvZWZmKCk7XG4gICAgdGhpcy5DM2NvZWZmKCk7XG4gICAgdGhpcy5DNGNvZWZmKCk7XG4gIH07XG5cbiAgQTNfY29lZmYgPSBbXG4gICAgLy8gQTMsIGNvZWZmIG9mIGVwc141LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMFxuICAgICAgLTMsIDEyOCxcbiAgICAvLyBBMywgY29lZmYgb2YgZXBzXjQsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAxXG4gICAgICAtMiwgLTMsIDY0LFxuICAgIC8vIEEzLCBjb2VmZiBvZiBlcHNeMywgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgIC0xLCAtMywgLTEsIDE2LFxuICAgIC8vIEEzLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgICszLCAtMSwgLTIsIDgsXG4gICAgLy8gQTMsIGNvZWZmIG9mIGVwc14xLCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMVxuICAgICAgKzEsIC0xLCAyLFxuICAgIC8vIEEzLCBjb2VmZiBvZiBlcHNeMCwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgICsxLCAxXG4gIF07XG5cbiAgLy8gVGhlIHNjYWxlIGZhY3RvciBBMyA9IG1lYW4gdmFsdWUgb2YgKGQvZHNpZ21hKUkzXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkEzY29lZmYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbyA9IDAsIGsgPSAwLFxuICAgICAgICBqLCBwO1xuICAgIGZvciAoaiA9IG5BM18gLSAxOyBqID49IDA7IC0taikgeyAvLyBjb2VmZiBvZiBlcHNealxuICAgICAgcCA9IE1hdGgubWluKG5BM18gLSBqIC0gMSwgaik7ICAvLyBvcmRlciBvZiBwb2x5bm9taWFsIGluIG5cbiAgICAgIHRoaXMuX0EzeFtrKytdID0gbS5wb2x5dmFsKHAsIEEzX2NvZWZmLCBvLCB0aGlzLl9uKSAvXG4gICAgICAgIEEzX2NvZWZmW28gKyBwICsgMV07XG4gICAgICBvICs9IHAgKyAyO1xuICAgIH1cbiAgfTtcblxuICBDM19jb2VmZiA9IFtcbiAgICAvLyBDM1sxXSwgY29lZmYgb2YgZXBzXjUsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAwXG4gICAgICArMywgMTI4LFxuICAgIC8vIEMzWzFdLCBjb2VmZiBvZiBlcHNeNCwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDFcbiAgICAgICsyLCA1LCAxMjgsXG4gICAgLy8gQzNbMV0sIGNvZWZmIG9mIGVwc14zLCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMlxuICAgICAgLTEsIDMsIDMsIDY0LFxuICAgIC8vIEMzWzFdLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgIC0xLCAwLCAxLCA4LFxuICAgIC8vIEMzWzFdLCBjb2VmZiBvZiBlcHNeMSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDFcbiAgICAgIC0xLCAxLCA0LFxuICAgIC8vIEMzWzJdLCBjb2VmZiBvZiBlcHNeNSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgICs1LCAyNTYsXG4gICAgLy8gQzNbMl0sIGNvZWZmIG9mIGVwc140LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMVxuICAgICAgKzEsIDMsIDEyOCxcbiAgICAvLyBDM1syXSwgY29lZmYgb2YgZXBzXjMsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAyXG4gICAgICAtMywgLTIsIDMsIDY0LFxuICAgIC8vIEMzWzJdLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgICsxLCAtMywgMiwgMzIsXG4gICAgLy8gQzNbM10sIGNvZWZmIG9mIGVwc141LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMFxuICAgICAgKzcsIDUxMixcbiAgICAvLyBDM1szXSwgY29lZmYgb2YgZXBzXjQsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAxXG4gICAgICAtMTAsIDksIDM4NCxcbiAgICAvLyBDM1szXSwgY29lZmYgb2YgZXBzXjMsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAyXG4gICAgICArNSwgLTksIDUsIDE5MixcbiAgICAvLyBDM1s0XSwgY29lZmYgb2YgZXBzXjUsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAwXG4gICAgICArNywgNTEyLFxuICAgIC8vIEMzWzRdLCBjb2VmZiBvZiBlcHNeNCwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDFcbiAgICAgIC0xNCwgNywgNTEyLFxuICAgIC8vIEMzWzVdLCBjb2VmZiBvZiBlcHNeNSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgICsyMSwgMjU2MFxuICBdO1xuXG4gIC8vIFRoZSBjb2VmZmljaWVudHMgQzNbbF0gaW4gdGhlIEZvdXJpZXIgZXhwYW5zaW9uIG9mIEIzXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkMzY29lZmYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbyA9IDAsIGsgPSAwLFxuICAgICAgICBsLCBqLCBwO1xuICAgIGZvciAobCA9IDE7IGwgPCBnLm5DM187ICsrbCkgeyAgICAgICAgLy8gbCBpcyBpbmRleCBvZiBDM1tsXVxuICAgICAgZm9yIChqID0gZy5uQzNfIC0gMTsgaiA+PSBsOyAtLWopIHsgLy8gY29lZmYgb2YgZXBzXmpcbiAgICAgICAgcCA9IE1hdGgubWluKGcubkMzXyAtIGogLSAxLCBqKTsgIC8vIG9yZGVyIG9mIHBvbHlub21pYWwgaW4gblxuICAgICAgICB0aGlzLl9DM3hbaysrXSA9IG0ucG9seXZhbChwLCBDM19jb2VmZiwgbywgdGhpcy5fbikgL1xuICAgICAgICAgIEMzX2NvZWZmW28gKyBwICsgMV07XG4gICAgICAgIG8gKz0gcCArIDI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEM0X2NvZWZmID0gW1xuICAgIC8vIEM0WzBdLCBjb2VmZiBvZiBlcHNeNSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgICs5NywgMTUwMTUsXG4gICAgLy8gQzRbMF0sIGNvZWZmIG9mIGVwc140LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMVxuICAgICAgKzEwODgsIDE1NiwgNDUwNDUsXG4gICAgLy8gQzRbMF0sIGNvZWZmIG9mIGVwc14zLCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMlxuICAgICAgLTIyNCwgLTQ3ODQsIDE1NzMsIDQ1MDQ1LFxuICAgIC8vIEM0WzBdLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDNcbiAgICAgIC0xMDY1NiwgMTQxNDQsIC00NTc2LCAtODU4LCA0NTA0NSxcbiAgICAvLyBDNFswXSwgY29lZmYgb2YgZXBzXjEsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciA0XG4gICAgICArNjQsIDYyNCwgLTQ1NzYsIDY4NjQsIC0zMDAzLCAxNTAxNSxcbiAgICAvLyBDNFswXSwgY29lZmYgb2YgZXBzXjAsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciA1XG4gICAgICArMTAwLCAyMDgsIDU3MiwgMzQzMiwgLTEyMDEyLCAzMDAzMCwgNDUwNDUsXG4gICAgLy8gQzRbMV0sIGNvZWZmIG9mIGVwc141LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMFxuICAgICAgKzEsIDkwMDksXG4gICAgLy8gQzRbMV0sIGNvZWZmIG9mIGVwc140LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMVxuICAgICAgLTI5NDQsIDQ2OCwgMTM1MTM1LFxuICAgIC8vIEM0WzFdLCBjb2VmZiBvZiBlcHNeMywgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgICs1NzkyLCAxMDQwLCAtMTI4NywgMTM1MTM1LFxuICAgIC8vIEM0WzFdLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDNcbiAgICAgICs1OTUyLCAtMTE2NDgsIDkxNTIsIC0yNTc0LCAxMzUxMzUsXG4gICAgLy8gQzRbMV0sIGNvZWZmIG9mIGVwc14xLCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgNFxuICAgICAgLTY0LCAtNjI0LCA0NTc2LCAtNjg2NCwgMzAwMywgMTM1MTM1LFxuICAgIC8vIEM0WzJdLCBjb2VmZiBvZiBlcHNeNSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgICs4LCAxMDcyNSxcbiAgICAvLyBDNFsyXSwgY29lZmYgb2YgZXBzXjQsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAxXG4gICAgICArMTg1NiwgLTkzNiwgMjI1MjI1LFxuICAgIC8vIEM0WzJdLCBjb2VmZiBvZiBlcHNeMywgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDJcbiAgICAgIC04NDQ4LCA0OTkyLCAtMTE0NCwgMjI1MjI1LFxuICAgIC8vIEM0WzJdLCBjb2VmZiBvZiBlcHNeMiwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDNcbiAgICAgIC0xNDQwLCA0MTYwLCAtNDU3NiwgMTcxNiwgMjI1MjI1LFxuICAgIC8vIEM0WzNdLCBjb2VmZiBvZiBlcHNeNSwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDBcbiAgICAgIC0xMzYsIDYzMDYzLFxuICAgIC8vIEM0WzNdLCBjb2VmZiBvZiBlcHNeNCwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDFcbiAgICAgICsxMDI0LCAtMjA4LCAxMDUxMDUsXG4gICAgLy8gQzRbM10sIGNvZWZmIG9mIGVwc14zLCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMlxuICAgICAgKzM1ODQsIC0zMzI4LCAxMTQ0LCAzMTUzMTUsXG4gICAgLy8gQzRbNF0sIGNvZWZmIG9mIGVwc141LCBwb2x5bm9taWFsIGluIG4gb2Ygb3JkZXIgMFxuICAgICAgLTEyOCwgMTM1MTM1LFxuICAgIC8vIEM0WzRdLCBjb2VmZiBvZiBlcHNeNCwgcG9seW5vbWlhbCBpbiBuIG9mIG9yZGVyIDFcbiAgICAgIC0yNTYwLCA4MzIsIDQwNTQwNSxcbiAgICAvLyBDNFs1XSwgY29lZmYgb2YgZXBzXjUsIHBvbHlub21pYWwgaW4gbiBvZiBvcmRlciAwXG4gICAgICArMTI4LCA5OTA5OVxuICBdO1xuXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkM0Y29lZmYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbyA9IDAsIGsgPSAwLFxuICAgICAgICBsLCBqLCBwO1xuICAgIGZvciAobCA9IDA7IGwgPCBnLm5DNF87ICsrbCkgeyAgICAgICAgLy8gbCBpcyBpbmRleCBvZiBDNFtsXVxuICAgICAgZm9yIChqID0gZy5uQzRfIC0gMTsgaiA+PSBsOyAtLWopIHsgLy8gY29lZmYgb2YgZXBzXmpcbiAgICAgICAgcCA9IGcubkM0XyAtIGogLSAxOyAgICAgICAgICAgICAgIC8vIG9yZGVyIG9mIHBvbHlub21pYWwgaW4gblxuICAgICAgICB0aGlzLl9DNHhbaysrXSA9IG0ucG9seXZhbChwLCBDNF9jb2VmZiwgbywgdGhpcy5fbikgL1xuICAgICAgICAgIEM0X2NvZWZmW28gKyBwICsgMV07XG4gICAgICAgIG8gKz0gcCArIDI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkEzZiA9IGZ1bmN0aW9uKGVwcykge1xuICAgIC8vIEV2YWx1YXRlIEEzXG4gICAgcmV0dXJuIG0ucG9seXZhbChuQTN4XyAtIDEsIHRoaXMuX0EzeCwgMCwgZXBzKTtcbiAgfTtcblxuICBnLkdlb2Rlc2ljLnByb3RvdHlwZS5DM2YgPSBmdW5jdGlvbihlcHMsIGMpIHtcbiAgICAvLyBFdmFsdWF0ZSBDMyBjb2VmZnNcbiAgICAvLyBFbGVtZW50cyBjWzFdIHRocnUgY1tuQzNfIC0gMV0gYXJlIHNldFxuICAgIHZhciBtdWx0ID0gMSxcbiAgICAgICAgbyA9IDAsXG4gICAgICAgIGwsIHA7XG4gICAgZm9yIChsID0gMTsgbCA8IGcubkMzXzsgKytsKSB7IC8vIGwgaXMgaW5kZXggb2YgQzNbbF1cbiAgICAgIHAgPSBnLm5DM18gLSBsIC0gMTsgICAgICAgICAgLy8gb3JkZXIgb2YgcG9seW5vbWlhbCBpbiBlcHNcbiAgICAgIG11bHQgKj0gZXBzO1xuICAgICAgY1tsXSA9IG11bHQgKiBtLnBvbHl2YWwocCwgdGhpcy5fQzN4LCBvLCBlcHMpO1xuICAgICAgbyArPSBwICsgMTtcbiAgICB9XG4gIH07XG5cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuQzRmID0gZnVuY3Rpb24oZXBzLCBjKSB7XG4gICAgLy8gRXZhbHVhdGUgQzQgY29lZmZzXG4gICAgLy8gRWxlbWVudHMgY1swXSB0aHJ1IGNbZy5uQzRfIC0gMV0gYXJlIHNldFxuICAgIHZhciBtdWx0ID0gMSxcbiAgICAgICAgbyA9IDAsXG4gICAgICAgIGwsIHA7XG4gICAgZm9yIChsID0gMDsgbCA8IGcubkM0XzsgKytsKSB7IC8vIGwgaXMgaW5kZXggb2YgQzRbbF1cbiAgICAgIHAgPSBnLm5DNF8gLSBsIC0gMTsgICAgICAgICAgLy8gb3JkZXIgb2YgcG9seW5vbWlhbCBpbiBlcHNcbiAgICAgIGNbbF0gPSBtdWx0ICogbS5wb2x5dmFsKHAsIHRoaXMuX0M0eCwgbywgZXBzKTtcbiAgICAgIG8gKz0gcCArIDE7XG4gICAgICBtdWx0ICo9IGVwcztcbiAgICB9XG4gIH07XG5cbiAgLy8gcmV0dXJuIHMxMmIsIG0xMmIsIG0wLCBNMTIsIE0yMVxuICBnLkdlb2Rlc2ljLnByb3RvdHlwZS5MZW5ndGhzID0gZnVuY3Rpb24oZXBzLCBzaWcxMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNzaWcxLCBjc2lnMSwgZG4xLCBzc2lnMiwgY3NpZzIsIGRuMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiZXQxLCBjYmV0Miwgb3V0bWFzayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMxYSwgQzJhKSB7XG4gICAgLy8gUmV0dXJuIG0xMmIgPSAocmVkdWNlZCBsZW5ndGgpL19iOyBhbHNvIGNhbGN1bGF0ZSBzMTJiID1cbiAgICAvLyBkaXN0YW5jZS9fYiwgYW5kIG0wID0gY29lZmZpY2llbnQgb2Ygc2VjdWxhciB0ZXJtIGluXG4gICAgLy8gZXhwcmVzc2lvbiBmb3IgcmVkdWNlZCBsZW5ndGguXG4gICAgb3V0bWFzayAmPSBnLk9VVF9NQVNLO1xuICAgIHZhciB2YWxzID0ge30sXG4gICAgICAgIG0weCA9IDAsIEoxMiA9IDAsIEExID0gMCwgQTIgPSAwLFxuICAgICAgICBCMSwgQjIsIGwsIGNzaWcxMiwgdDtcbiAgICBpZiAob3V0bWFzayAmIChnLkRJU1RBTkNFIHwgZy5SRURVQ0VETEVOR1RIIHwgZy5HRU9ERVNJQ1NDQUxFKSkge1xuICAgICAgQTEgPSBnLkExbTFmKGVwcyk7XG4gICAgICBnLkMxZihlcHMsIEMxYSk7XG4gICAgICBpZiAob3V0bWFzayAmIChnLlJFRFVDRURMRU5HVEggfCBnLkdFT0RFU0lDU0NBTEUpKSB7XG4gICAgICAgIEEyID0gZy5BMm0xZihlcHMpO1xuICAgICAgICBnLkMyZihlcHMsIEMyYSk7XG4gICAgICAgIG0weCA9IEExIC0gQTI7XG4gICAgICAgIEEyID0gMSArIEEyO1xuICAgICAgfVxuICAgICAgQTEgPSAxICsgQTE7XG4gICAgfVxuICAgIGlmIChvdXRtYXNrICYgZy5ESVNUQU5DRSkge1xuICAgICAgQjEgPSBnLlNpbkNvc1Nlcmllcyh0cnVlLCBzc2lnMiwgY3NpZzIsIEMxYSkgLVxuICAgICAgICBnLlNpbkNvc1Nlcmllcyh0cnVlLCBzc2lnMSwgY3NpZzEsIEMxYSk7XG4gICAgICAvLyBNaXNzaW5nIGEgZmFjdG9yIG9mIF9iXG4gICAgICB2YWxzLnMxMmIgPSBBMSAqIChzaWcxMiArIEIxKTtcbiAgICAgIGlmIChvdXRtYXNrICYgKGcuUkVEVUNFRExFTkdUSCB8IGcuR0VPREVTSUNTQ0FMRSkpIHtcbiAgICAgICAgQjIgPSBnLlNpbkNvc1Nlcmllcyh0cnVlLCBzc2lnMiwgY3NpZzIsIEMyYSkgLVxuICAgICAgICAgIGcuU2luQ29zU2VyaWVzKHRydWUsIHNzaWcxLCBjc2lnMSwgQzJhKTtcbiAgICAgICAgSjEyID0gbTB4ICogc2lnMTIgKyAoQTEgKiBCMSAtIEEyICogQjIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0bWFzayAmIChnLlJFRFVDRURMRU5HVEggfCBnLkdFT0RFU0lDU0NBTEUpKSB7XG4gICAgICAvLyBBc3N1bWUgaGVyZSB0aGF0IG5DMV8gPj0gbkMyX1xuICAgICAgZm9yIChsID0gMTsgbCA8PSBnLm5DMl87ICsrbClcbiAgICAgICAgQzJhW2xdID0gQTEgKiBDMWFbbF0gLSBBMiAqIEMyYVtsXTtcbiAgICAgIEoxMiA9IG0weCAqIHNpZzEyICsgKGcuU2luQ29zU2VyaWVzKHRydWUsIHNzaWcyLCBjc2lnMiwgQzJhKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBnLlNpbkNvc1Nlcmllcyh0cnVlLCBzc2lnMSwgY3NpZzEsIEMyYSkpO1xuICAgIH1cbiAgICBpZiAob3V0bWFzayAmIGcuUkVEVUNFRExFTkdUSCkge1xuICAgICAgdmFscy5tMCA9IG0weDtcbiAgICAgIC8vIE1pc3NpbmcgYSBmYWN0b3Igb2YgX2IuXG4gICAgICAvLyBBZGQgcGFyZW5zIGFyb3VuZCAoY3NpZzEgKiBzc2lnMikgYW5kIChzc2lnMSAqIGNzaWcyKSB0byBlbnN1cmVcbiAgICAgIC8vIGFjY3VyYXRlIGNhbmNlbGxhdGlvbiBpbiB0aGUgY2FzZSBvZiBjb2luY2lkZW50IHBvaW50cy5cbiAgICAgIHZhbHMubTEyYiA9IGRuMiAqIChjc2lnMSAqIHNzaWcyKSAtIGRuMSAqIChzc2lnMSAqIGNzaWcyKSAtXG4gICAgICAgIGNzaWcxICogY3NpZzIgKiBKMTI7XG4gICAgfVxuICAgIGlmIChvdXRtYXNrICYgZy5HRU9ERVNJQ1NDQUxFKSB7XG4gICAgICBjc2lnMTIgPSBjc2lnMSAqIGNzaWcyICsgc3NpZzEgKiBzc2lnMjtcbiAgICAgIHQgPSB0aGlzLl9lcDIgKiAoY2JldDEgLSBjYmV0MikgKiAoY2JldDEgKyBjYmV0MikgLyAoZG4xICsgZG4yKTtcbiAgICAgIHZhbHMuTTEyID0gY3NpZzEyICsgKHQgKiBzc2lnMiAtIGNzaWcyICogSjEyKSAqIHNzaWcxIC8gZG4xO1xuICAgICAgdmFscy5NMjEgPSBjc2lnMTIgLSAodCAqIHNzaWcxIC0gY3NpZzEgKiBKMTIpICogc3NpZzIgLyBkbjI7XG4gICAgfVxuICAgIHJldHVybiB2YWxzO1xuICB9O1xuXG4gIC8vIHJldHVybiBzaWcxMiwgc2FscDEsIGNhbHAxLCBzYWxwMiwgY2FscDIsIGRubVxuICBnLkdlb2Rlc2ljLnByb3RvdHlwZS5JbnZlcnNlU3RhcnQgPSBmdW5jdGlvbihzYmV0MSwgY2JldDEsIGRuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2JldDIsIGNiZXQyLCBkbjIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbTEyLCBzbGFtMTIsIGNsYW0xMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQzFhLCBDMmEpIHtcbiAgICAvLyBSZXR1cm4gYSBzdGFydGluZyBwb2ludCBmb3IgTmV3dG9uJ3MgbWV0aG9kIGluIHNhbHAxIGFuZCBjYWxwMVxuICAgIC8vIChmdW5jdGlvbiB2YWx1ZSBpcyAtMSkuICBJZiBOZXd0b24ncyBtZXRob2QgZG9lc24ndCBuZWVkIHRvIGJlXG4gICAgLy8gdXNlZCwgcmV0dXJuIGFsc28gc2FscDIgYW5kIGNhbHAyIGFuZCBmdW5jdGlvbiB2YWx1ZSBpcyBzaWcxMi5cbiAgICAvLyBzYWxwMiwgY2FscDIgb25seSB1cGRhdGVkIGlmIHJldHVybiB2YWwgPj0gMC5cbiAgICB2YXIgdmFscyA9IHt9LFxuICAgICAgICAvLyBiZXQxMiA9IGJldDIgLSBiZXQxIGluIFswLCBwaSk7IGJldDEyYSA9IGJldDIgKyBiZXQxIGluICgtcGksIDBdXG4gICAgICAgIHNiZXQxMiA9IHNiZXQyICogY2JldDEgLSBjYmV0MiAqIHNiZXQxLFxuICAgICAgICBjYmV0MTIgPSBjYmV0MiAqIGNiZXQxICsgc2JldDIgKiBzYmV0MSxcbiAgICAgICAgc2JldDEyYSwgc2hvcnRsaW5lLCBvbWcxMiwgc2JldG0yLCBzb21nMTIsIGNvbWcxMiwgdCwgc3NpZzEyLCBjc2lnMTIsXG4gICAgICAgIHgsIHksIGxhbXNjYWxlLCBiZXRzY2FsZSwgazIsIGVwcywgY2JldDEyYSwgYmV0MTJhLCBtMTJiLCBtMCwgbnZhbHMsXG4gICAgICAgIGssIG9tZzEyYSwgbGFtMTJ4O1xuICAgIHZhbHMuc2lnMTIgPSAtMTsgICAgICAgIC8vIFJldHVybiB2YWx1ZVxuICAgIC8vIFZvbGF0aWxlIGRlY2xhcmF0aW9uIG5lZWRlZCB0byBmaXggaW52ZXJzZSBjYXNlc1xuICAgIC8vIDg4LjIwMjQ5OTQ1MTg1NyAwIC04OC4yMDI0OTk0NTE4NTcgMTc5Ljk4MTAyMjAzMjk5Mjg1OTU5MlxuICAgIC8vIDg5LjI2MjA4MDM4OTIxOCAwIC04OS4yNjIwODAzODkyMTggMTc5Ljk5MjIwNzk4Mjc3NTM3NTY2MlxuICAgIC8vIDg5LjMzMzEyMzU4MDAzMyAwIC04OS4zMzMxMjM1ODAwMzI5OTc2ODcgMTc5Ljk5Mjk1ODEyMzYwMTQ4NDIyXG4gICAgLy8gd2hpY2ggb3RoZXJ3aXNlIGZhaWwgd2l0aCBnKysgNC40LjQgeDg2IC1PM1xuICAgIHNiZXQxMmEgPSBzYmV0MiAqIGNiZXQxO1xuICAgIHNiZXQxMmEgKz0gY2JldDIgKiBzYmV0MTtcblxuICAgIHNob3J0bGluZSA9IGNiZXQxMiA+PSAwICYmIHNiZXQxMiA8IDAuNSAmJiBjYmV0MiAqIGxhbTEyIDwgMC41O1xuICAgIGlmIChzaG9ydGxpbmUpIHtcbiAgICAgIHNiZXRtMiA9IG0uc3Eoc2JldDEgKyBzYmV0Mik7XG4gICAgICAvLyBzaW4oKGJldDErYmV0MikvMileMlxuICAgICAgLy8gPSAgKHNiZXQxICsgc2JldDIpXjIgLyAoKHNiZXQxICsgc2JldDIpXjIgKyAoY2JldDEgKyBjYmV0MileMilcbiAgICAgIHNiZXRtMiAvPSBzYmV0bTIgKyBtLnNxKGNiZXQxICsgY2JldDIpO1xuICAgICAgdmFscy5kbm0gPSBNYXRoLnNxcnQoMSArIHRoaXMuX2VwMiAqIHNiZXRtMik7XG4gICAgICBvbWcxMiA9IGxhbTEyIC8gKHRoaXMuX2YxICogdmFscy5kbm0pO1xuICAgICAgc29tZzEyID0gTWF0aC5zaW4ob21nMTIpOyBjb21nMTIgPSBNYXRoLmNvcyhvbWcxMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvbWcxMiA9IHNsYW0xMjsgY29tZzEyID0gY2xhbTEyO1xuICAgIH1cblxuICAgIHZhbHMuc2FscDEgPSBjYmV0MiAqIHNvbWcxMjtcbiAgICB2YWxzLmNhbHAxID0gY29tZzEyID49IDAgP1xuICAgICAgc2JldDEyICsgY2JldDIgKiBzYmV0MSAqIG0uc3Eoc29tZzEyKSAvICgxICsgY29tZzEyKSA6XG4gICAgICBzYmV0MTJhIC0gY2JldDIgKiBzYmV0MSAqIG0uc3Eoc29tZzEyKSAvICgxIC0gY29tZzEyKTtcblxuICAgIHNzaWcxMiA9IG0uaHlwb3QodmFscy5zYWxwMSwgdmFscy5jYWxwMSk7XG4gICAgY3NpZzEyID0gc2JldDEgKiBzYmV0MiArIGNiZXQxICogY2JldDIgKiBjb21nMTI7XG4gICAgaWYgKHNob3J0bGluZSAmJiBzc2lnMTIgPCB0aGlzLl9ldG9sMikge1xuICAgICAgLy8gcmVhbGx5IHNob3J0IGxpbmVzXG4gICAgICB2YWxzLnNhbHAyID0gY2JldDEgKiBzb21nMTI7XG4gICAgICB2YWxzLmNhbHAyID0gc2JldDEyIC0gY2JldDEgKiBzYmV0MiAqXG4gICAgICAgIChjb21nMTIgPj0gMCA/IG0uc3Eoc29tZzEyKSAvICgxICsgY29tZzEyKSA6IDEgLSBjb21nMTIpO1xuICAgICAgLy8gbm9ybSh2YWxzLnNhbHAyLCB2YWxzLmNhbHAyKTtcbiAgICAgIHQgPSBtLmh5cG90KHZhbHMuc2FscDIsIHZhbHMuY2FscDIpOyB2YWxzLnNhbHAyIC89IHQ7IHZhbHMuY2FscDIgLz0gdDtcbiAgICAgIC8vIFNldCByZXR1cm4gdmFsdWVcbiAgICAgIHZhbHMuc2lnMTIgPSBNYXRoLmF0YW4yKHNzaWcxMiwgY3NpZzEyKTtcbiAgICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX24pID4gMC4xIHx8IC8vIFNraXAgYXN0cm9pZCBjYWxjIGlmIHRvbyBlY2NlbnRyaWNcbiAgICAgICAgICAgICAgIGNzaWcxMiA+PSAwIHx8XG4gICAgICAgICAgICAgICBzc2lnMTIgPj0gNiAqIE1hdGguYWJzKHRoaXMuX24pICogTWF0aC5QSSAqIG0uc3EoY2JldDEpKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvLCB6ZXJvdGggb3JkZXIgc3BoZXJpY2FsIGFwcHJveGltYXRpb24gaXMgT0tcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2NhbGUgbGFtMTIgYW5kIGJldDIgdG8geCwgeSBjb29yZGluYXRlIHN5c3RlbSB3aGVyZSBhbnRpcG9kYWxcbiAgICAgIC8vIHBvaW50IGlzIGF0IG9yaWdpbiBhbmQgc2luZ3VsYXIgcG9pbnQgaXMgYXQgeSA9IDAsIHggPSAtMS5cbiAgICAgIGxhbTEyeCA9IE1hdGguYXRhbjIoLXNsYW0xMiwgLWNsYW0xMik7IC8vIGxhbTEyIC0gcGlcbiAgICAgIGlmICh0aGlzLmYgPj0gMCkgeyAgICAgICAvLyBJbiBmYWN0IGYgPT0gMCBkb2VzIG5vdCBnZXQgaGVyZVxuICAgICAgICAvLyB4ID0gZGxvbmcsIHkgPSBkbGF0XG4gICAgICAgIGsyID0gbS5zcShzYmV0MSkgKiB0aGlzLl9lcDI7XG4gICAgICAgIGVwcyA9IGsyIC8gKDIgKiAoMSArIE1hdGguc3FydCgxICsgazIpKSArIGsyKTtcbiAgICAgICAgbGFtc2NhbGUgPSB0aGlzLmYgKiBjYmV0MSAqIHRoaXMuQTNmKGVwcykgKiBNYXRoLlBJO1xuICAgICAgICBiZXRzY2FsZSA9IGxhbXNjYWxlICogY2JldDE7XG5cbiAgICAgICAgeCA9IGxhbTEyeCAvIGxhbXNjYWxlO1xuICAgICAgICB5ID0gc2JldDEyYSAvIGJldHNjYWxlO1xuICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAvLyBmIDwgMFxuICAgICAgICAvLyB4ID0gZGxhdCwgeSA9IGRsb25nXG4gICAgICAgIGNiZXQxMmEgPSBjYmV0MiAqIGNiZXQxIC0gc2JldDIgKiBzYmV0MTtcbiAgICAgICAgYmV0MTJhID0gTWF0aC5hdGFuMihzYmV0MTJhLCBjYmV0MTJhKTtcbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgbG9uMTIgPSAxODAsIHRoaXMgcmVwZWF0cyBhIGNhbGN1bGF0aW9uIG1hZGVcbiAgICAgICAgLy8gaW4gSW52ZXJzZS5cbiAgICAgICAgbnZhbHMgPSB0aGlzLkxlbmd0aHModGhpcy5fbiwgTWF0aC5QSSArIGJldDEyYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2JldDEsIC1jYmV0MSwgZG4xLCBzYmV0MiwgY2JldDIsIGRuMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2JldDEsIGNiZXQyLCBnLlJFRFVDRURMRU5HVEgsIEMxYSwgQzJhKTtcbiAgICAgICAgbTEyYiA9IG52YWxzLm0xMmI7IG0wID0gbnZhbHMubTA7XG4gICAgICAgIHggPSAtMSArIG0xMmIgLyAoY2JldDEgKiBjYmV0MiAqIG0wICogTWF0aC5QSSk7XG4gICAgICAgIGJldHNjYWxlID0geCA8IC0wLjAxID8gc2JldDEyYSAvIHggOlxuICAgICAgICAgIC10aGlzLmYgKiBtLnNxKGNiZXQxKSAqIE1hdGguUEk7XG4gICAgICAgIGxhbXNjYWxlID0gYmV0c2NhbGUgLyBjYmV0MTtcbiAgICAgICAgeSA9IGxhbTEyIC8gbGFtc2NhbGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh5ID4gLXRvbDFfICYmIHggPiAtMSAtIHh0aHJlc2hfKSB7XG4gICAgICAgIC8vIHN0cmlwIG5lYXIgY3V0XG4gICAgICAgIGlmICh0aGlzLmYgPj0gMCkge1xuICAgICAgICAgIHZhbHMuc2FscDEgPSBNYXRoLm1pbigxLCAteCk7XG4gICAgICAgICAgdmFscy5jYWxwMSA9IC1NYXRoLnNxcnQoMSAtIG0uc3EodmFscy5zYWxwMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHMuY2FscDEgPSBNYXRoLm1heCh4ID4gLXRvbDFfID8gMCA6IC0xLCB4KTtcbiAgICAgICAgICB2YWxzLnNhbHAxID0gTWF0aC5zcXJ0KDEgLSBtLnNxKHZhbHMuY2FscDEpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRXN0aW1hdGUgYWxwMSwgYnkgc29sdmluZyB0aGUgYXN0cm9pZCBwcm9ibGVtLlxuICAgICAgICAvL1xuICAgICAgICAvLyBDb3VsZCBlc3RpbWF0ZSBhbHBoYTEgPSB0aGV0YSArIHBpLzIsIGRpcmVjdGx5LCBpLmUuLFxuICAgICAgICAvLyAgIGNhbHAxID0geS9rOyBzYWxwMSA9IC14LygxK2spOyAgZm9yIGYgPj0gMFxuICAgICAgICAvLyAgIGNhbHAxID0geC8oMStrKTsgc2FscDEgPSAteS9rOyAgZm9yIGYgPCAwIChuZWVkIHRvIGNoZWNrKVxuICAgICAgICAvL1xuICAgICAgICAvLyBIb3dldmVyLCBpdCdzIGJldHRlciB0byBlc3RpbWF0ZSBvbWcxMiBmcm9tIGFzdHJvaWQgYW5kIHVzZVxuICAgICAgICAvLyBzcGhlcmljYWwgZm9ybXVsYSB0byBjb21wdXRlIGFscDEuICBUaGlzIHJlZHVjZXMgdGhlIG1lYW4gbnVtYmVyIG9mXG4gICAgICAgIC8vIE5ld3RvbiBpdGVyYXRpb25zIGZvciBhc3Ryb2lkIGNhc2VzIGZyb20gMi4yNCAobWluIDAsIG1heCA2KSB0byAyLjEyXG4gICAgICAgIC8vIChtaW4gMCBtYXggNSkuICBUaGUgY2hhbmdlcyBpbiB0aGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgYXJlIGFzXG4gICAgICAgIC8vIGZvbGxvd3M6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNoYW5nZSBwZXJjZW50XG4gICAgICAgIC8vICAgIDEgICAgICAgNVxuICAgICAgICAvLyAgICAwICAgICAgNzhcbiAgICAgICAgLy8gICAtMSAgICAgIDE2XG4gICAgICAgIC8vICAgLTIgICAgICAgMC42XG4gICAgICAgIC8vICAgLTMgICAgICAgMC4wNFxuICAgICAgICAvLyAgIC00ICAgICAgIDAuMDAyXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBoaXN0b2dyYW0gb2YgaXRlcmF0aW9ucyBpcyAobSA9IG51bWJlciBvZiBpdGVyYXRpb25zIGVzdGltYXRpbmdcbiAgICAgICAgLy8gYWxwMSBkaXJlY3RseSwgbiA9IG51bWJlciBvZiBpdGVyYXRpb25zIGVzdGltYXRpbmcgdmlhIG9tZzEyLCB0b3RhbFxuICAgICAgICAvLyBudW1iZXIgb2YgdHJpYWxzID0gMTQ4NjA1KTpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gIGl0ZXIgICAgbSAgICAgIG5cbiAgICAgICAgLy8gICAgMCAgIDE0OCAgICAxODZcbiAgICAgICAgLy8gICAgMSAxMzA0NiAgMTM4NDVcbiAgICAgICAgLy8gICAgMiA5MzMxNSAxMDIyMjVcbiAgICAgICAgLy8gICAgMyAzNjE4OSAgMzIzNDFcbiAgICAgICAgLy8gICAgNCAgNTM5NiAgICAgIDdcbiAgICAgICAgLy8gICAgNSAgIDQ1NSAgICAgIDFcbiAgICAgICAgLy8gICAgNiAgICA1NiAgICAgIDBcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQmVjYXVzZSBvbWcxMiBpcyBuZWFyIHBpLCBlc3RpbWF0ZSB3b3JrIHdpdGggb21nMTJhID0gcGkgLSBvbWcxMlxuICAgICAgICBrID0gYXN0cm9pZCh4LCB5KTtcbiAgICAgICAgb21nMTJhID0gbGFtc2NhbGUgKiAoIHRoaXMuZiA+PSAwID8gLXggKiBrLygxICsgaykgOiAteSAqICgxICsgaykvayApO1xuICAgICAgICBzb21nMTIgPSBNYXRoLnNpbihvbWcxMmEpOyBjb21nMTIgPSAtTWF0aC5jb3Mob21nMTJhKTtcbiAgICAgICAgLy8gVXBkYXRlIHNwaGVyaWNhbCBlc3RpbWF0ZSBvZiBhbHAxIHVzaW5nIG9tZzEyIGluc3RlYWQgb2ZcbiAgICAgICAgLy8gbGFtMTJcbiAgICAgICAgdmFscy5zYWxwMSA9IGNiZXQyICogc29tZzEyO1xuICAgICAgICB2YWxzLmNhbHAxID0gc2JldDEyYSAtXG4gICAgICAgICAgY2JldDIgKiBzYmV0MSAqIG0uc3Eoc29tZzEyKSAvICgxIC0gY29tZzEyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU2FuaXR5IGNoZWNrIG9uIHN0YXJ0aW5nIGd1ZXNzLiAgQmFja3dhcmRzIGNoZWNrIGFsbG93cyBOYU4gdGhyb3VnaC5cbiAgICBpZiAoISh2YWxzLnNhbHAxIDw9IDAuMCkpIHtcbiAgICAgIC8vIG5vcm0odmFscy5zYWxwMSwgdmFscy5jYWxwMSk7XG4gICAgICB0ID0gbS5oeXBvdCh2YWxzLnNhbHAxLCB2YWxzLmNhbHAxKTsgdmFscy5zYWxwMSAvPSB0OyB2YWxzLmNhbHAxIC89IHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHMuc2FscDEgPSAxOyB2YWxzLmNhbHAxID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHM7XG4gIH07XG5cbiAgLy8gcmV0dXJuIGxhbTEyLCBzYWxwMiwgY2FscDIsIHNpZzEyLCBzc2lnMSwgY3NpZzEsIHNzaWcyLCBjc2lnMiwgZXBzLFxuICAvLyBkb21nMTIsIGRsYW0xMixcbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuTGFtYmRhMTIgPSBmdW5jdGlvbihzYmV0MSwgY2JldDEsIGRuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYmV0MiwgY2JldDIsIGRuMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWxwMSwgY2FscDEsIHNsYW0xMjAsIGNsYW0xMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZnAsIEMxYSwgQzJhLCBDM2EpIHtcbiAgICB2YXIgdmFscyA9IHt9LFxuICAgICAgICB0LCBzYWxwMCwgY2FscDAsXG4gICAgICAgIHNvbWcxLCBjb21nMSwgc29tZzIsIGNvbWcyLCBzb21nMTIsIGNvbWcxMiwgQjMxMiwgZXRhLCBrMiwgbnZhbHM7XG4gICAgaWYgKHNiZXQxID09PSAwICYmIGNhbHAxID09PSAwKVxuICAgICAgLy8gQnJlYWsgZGVnZW5lcmFjeSBvZiBlcXVhdG9yaWFsIGxpbmUuICBUaGlzIGNhc2UgaGFzIGFscmVhZHkgYmVlblxuICAgICAgLy8gaGFuZGxlZC5cbiAgICAgIGNhbHAxID0gLWcudGlueV87XG5cbiAgICAvLyBzaW4oYWxwMSkgKiBjb3MoYmV0MSkgPSBzaW4oYWxwMClcbiAgICBzYWxwMCA9IHNhbHAxICogY2JldDE7XG4gICAgY2FscDAgPSBtLmh5cG90KGNhbHAxLCBzYWxwMSAqIHNiZXQxKTsgLy8gY2FscDAgPiAwXG5cbiAgICAvLyB0YW4oYmV0MSkgPSB0YW4oc2lnMSkgKiBjb3MoYWxwMSlcbiAgICAvLyB0YW4ob21nMSkgPSBzaW4oYWxwMCkgKiB0YW4oc2lnMSkgPSB0YW4ob21nMSk9dGFuKGFscDEpKnNpbihiZXQxKVxuICAgIHZhbHMuc3NpZzEgPSBzYmV0MTsgc29tZzEgPSBzYWxwMCAqIHNiZXQxO1xuICAgIHZhbHMuY3NpZzEgPSBjb21nMSA9IGNhbHAxICogY2JldDE7XG4gICAgLy8gbm9ybSh2YWxzLnNzaWcxLCB2YWxzLmNzaWcxKTtcbiAgICB0ID0gbS5oeXBvdCh2YWxzLnNzaWcxLCB2YWxzLmNzaWcxKTsgdmFscy5zc2lnMSAvPSB0OyB2YWxzLmNzaWcxIC89IHQ7XG4gICAgLy8gbm9ybShzb21nMSwgY29tZzEpOyAtLSBkb24ndCBuZWVkIHRvIG5vcm1hbGl6ZSFcblxuICAgIC8vIEVuZm9yY2Ugc3ltbWV0cmllcyBpbiB0aGUgY2FzZSBhYnMoYmV0MikgPSAtYmV0MS4gIE5lZWQgdG8gYmUgY2FyZWZ1bFxuICAgIC8vIGFib3V0IHRoaXMgY2FzZSwgc2luY2UgdGhpcyBjYW4geWllbGQgc2luZ3VsYXJpdGllcyBpbiB0aGUgTmV3dG9uXG4gICAgLy8gaXRlcmF0aW9uLlxuICAgIC8vIHNpbihhbHAyKSAqIGNvcyhiZXQyKSA9IHNpbihhbHAwKVxuICAgIHZhbHMuc2FscDIgPSBjYmV0MiAhPT0gY2JldDEgPyBzYWxwMCAvIGNiZXQyIDogc2FscDE7XG4gICAgLy8gY2FscDIgPSBzcXJ0KDEgLSBzcShzYWxwMikpXG4gICAgLy8gICAgICAgPSBzcXJ0KHNxKGNhbHAwKSAtIHNxKHNiZXQyKSkgLyBjYmV0MlxuICAgIC8vIGFuZCBzdWJzdCBmb3IgY2FscDAgYW5kIHJlYXJyYW5nZSB0byBnaXZlIChjaG9vc2UgcG9zaXRpdmUgc3FydFxuICAgIC8vIHRvIGdpdmUgYWxwMiBpbiBbMCwgcGkvMl0pLlxuICAgIHZhbHMuY2FscDIgPSBjYmV0MiAhPT0gY2JldDEgfHwgTWF0aC5hYnMoc2JldDIpICE9PSAtc2JldDEgP1xuICAgICAgTWF0aC5zcXJ0KG0uc3EoY2FscDEgKiBjYmV0MSkgKyAoY2JldDEgPCAtc2JldDEgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNiZXQyIC0gY2JldDEpICogKGNiZXQxICsgY2JldDIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzYmV0MSAtIHNiZXQyKSAqIChzYmV0MSArIHNiZXQyKSkpIC9cbiAgICAgIGNiZXQyIDogTWF0aC5hYnMoY2FscDEpO1xuICAgIC8vIHRhbihiZXQyKSA9IHRhbihzaWcyKSAqIGNvcyhhbHAyKVxuICAgIC8vIHRhbihvbWcyKSA9IHNpbihhbHAwKSAqIHRhbihzaWcyKS5cbiAgICB2YWxzLnNzaWcyID0gc2JldDI7IHNvbWcyID0gc2FscDAgKiBzYmV0MjtcbiAgICB2YWxzLmNzaWcyID0gY29tZzIgPSB2YWxzLmNhbHAyICogY2JldDI7XG4gICAgLy8gbm9ybSh2YWxzLnNzaWcyLCB2YWxzLmNzaWcyKTtcbiAgICB0ID0gbS5oeXBvdCh2YWxzLnNzaWcyLCB2YWxzLmNzaWcyKTsgdmFscy5zc2lnMiAvPSB0OyB2YWxzLmNzaWcyIC89IHQ7XG4gICAgLy8gbm9ybShzb21nMiwgY29tZzIpOyAtLSBkb24ndCBuZWVkIHRvIG5vcm1hbGl6ZSFcblxuICAgIC8vIHNpZzEyID0gc2lnMiAtIHNpZzEsIGxpbWl0IHRvIFswLCBwaV1cbiAgICB2YWxzLnNpZzEyID0gTWF0aC5hdGFuMihNYXRoLm1heCgwLCB2YWxzLmNzaWcxICogdmFscy5zc2lnMiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFscy5zc2lnMSAqIHZhbHMuY3NpZzIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHMuY3NpZzEgKiB2YWxzLmNzaWcyICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxzLnNzaWcxICogdmFscy5zc2lnMik7XG5cbiAgICAvLyBvbWcxMiA9IG9tZzIgLSBvbWcxLCBsaW1pdCB0byBbMCwgcGldXG4gICAgc29tZzEyID0gTWF0aC5tYXgoMCwgY29tZzEgKiBzb21nMiAtIHNvbWcxICogY29tZzIpO1xuICAgIGNvbWcxMiA9ICAgICAgICAgICAgIGNvbWcxICogY29tZzIgKyBzb21nMSAqIHNvbWcyO1xuICAgIC8vIGV0YSA9IG9tZzEyIC0gbGFtMTIwXG4gICAgZXRhID0gTWF0aC5hdGFuMihzb21nMTIgKiBjbGFtMTIwIC0gY29tZzEyICogc2xhbTEyMCxcbiAgICAgICAgICAgICAgICAgICAgIGNvbWcxMiAqIGNsYW0xMjAgKyBzb21nMTIgKiBzbGFtMTIwKTtcbiAgICBrMiA9IG0uc3EoY2FscDApICogdGhpcy5fZXAyO1xuICAgIHZhbHMuZXBzID0gazIgLyAoMiAqICgxICsgTWF0aC5zcXJ0KDEgKyBrMikpICsgazIpO1xuICAgIHRoaXMuQzNmKHZhbHMuZXBzLCBDM2EpO1xuICAgIEIzMTIgPSAoZy5TaW5Db3NTZXJpZXModHJ1ZSwgdmFscy5zc2lnMiwgdmFscy5jc2lnMiwgQzNhKSAtXG4gICAgICAgICAgICBnLlNpbkNvc1Nlcmllcyh0cnVlLCB2YWxzLnNzaWcxLCB2YWxzLmNzaWcxLCBDM2EpKTtcbiAgICB2YWxzLmRvbWcxMiA9ICAtdGhpcy5mICogdGhpcy5BM2YodmFscy5lcHMpICogc2FscDAgKiAodmFscy5zaWcxMiArIEIzMTIpO1xuICAgIHZhbHMubGFtMTIgPSBldGEgKyB2YWxzLmRvbWcxMjtcbiAgICBpZiAoZGlmZnApIHtcbiAgICAgIGlmICh2YWxzLmNhbHAyID09PSAwKVxuICAgICAgICB2YWxzLmRsYW0xMiA9IC0yICogdGhpcy5fZjEgKiBkbjEgLyBzYmV0MTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBudmFscyA9IHRoaXMuTGVuZ3Rocyh2YWxzLmVwcywgdmFscy5zaWcxMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFscy5zc2lnMSwgdmFscy5jc2lnMSwgZG4xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxzLnNzaWcyLCB2YWxzLmNzaWcyLCBkbjIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiZXQxLCBjYmV0MiwgZy5SRURVQ0VETEVOR1RILCBDMWEsIEMyYSk7XG4gICAgICAgIHZhbHMuZGxhbTEyID0gbnZhbHMubTEyYjtcbiAgICAgICAgdmFscy5kbGFtMTIgKj0gdGhpcy5fZjEgLyAodmFscy5jYWxwMiAqIGNiZXQyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNvbHZlIHRoZSBpbnZlcnNlIGdlb2Rlc2ljIHByb2JsZW0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXQxIHRoZSBsYXRpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvbjEgdGhlIGxvbmdpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdDIgdGhlIGxhdGl0dWRlIG9mIHRoZSBzZWNvbmQgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvbjIgdGhlIGxvbmdpdHVkZSBvZiB0aGUgc2Vjb25kIHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW291dG1hc2sgPSBTVEFOREFSRF0gd2hpY2ggcmVzdWx0cyB0byBpbmNsdWRlLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgcmVxdWVzdGVkIHJlc3VsdHNcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBsYXQxLCBsb24xLCBsYXQyLCBsb24yLCBhbmQgYTEyIGZpZWxkcyBvZiB0aGUgcmVzdWx0IGFyZVxuICAgKiAgIGFsd2F5cyBzZXQuICBGb3IgZGV0YWlscyBvbiB0aGUgb3V0bWFzayBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsXG4gICAqICAgMi1pbnRlcmZhY2V9LCBcIlRoZSBvdXRtYXNrIGFuZCBjYXBzIHBhcmFtZXRlcnNcIi5cbiAgICovXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkludmVyc2UgPSBmdW5jdGlvbihsYXQxLCBsb24xLCBsYXQyLCBsb24yLCBvdXRtYXNrKSB7XG4gICAgdmFyIHIsIHZhbHM7XG4gICAgaWYgKCFvdXRtYXNrKSBvdXRtYXNrID0gZy5TVEFOREFSRDtcbiAgICBpZiAob3V0bWFzayA9PT0gZy5MT05HX1VOUk9MTCkgb3V0bWFzayB8PSBnLlNUQU5EQVJEO1xuICAgIG91dG1hc2sgJj0gZy5PVVRfTUFTSztcbiAgICByID0gdGhpcy5JbnZlcnNlSW50KGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIsIG91dG1hc2spO1xuICAgIHZhbHMgPSByLnZhbHM7XG4gICAgaWYgKG91dG1hc2sgJiBnLkFaSU1VVEgpIHtcbiAgICAgIHZhbHMuYXppMSA9IG0uYXRhbjJkKHIuc2FscDEsIHIuY2FscDEpO1xuICAgICAgdmFscy5hemkyID0gbS5hdGFuMmQoci5zYWxwMiwgci5jYWxwMik7XG4gICAgfVxuICAgIHJldHVybiB2YWxzO1xuICB9O1xuXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkludmVyc2VJbnQgPSBmdW5jdGlvbihsYXQxLCBsb24xLCBsYXQyLCBsb24yLCBvdXRtYXNrKSB7XG4gICAgdmFyIHZhbHMgPSB7fSxcbiAgICAgICAgbG9uMTIsIGxvbjEycywgbG9uc2lnbiwgdCwgc3dhcHAsIGxhdHNpZ24sXG4gICAgICAgIHNiZXQxLCBjYmV0MSwgc2JldDIsIGNiZXQyLCBzMTJ4LCBtMTJ4LFxuICAgICAgICBkbjEsIGRuMiwgbGFtMTIsIHNsYW0xMiwgY2xhbTEyLFxuICAgICAgICBzaWcxMiwgY2FscDEsIHNhbHAxLCBjYWxwMiwgc2FscDIsIEMxYSwgQzJhLCBDM2EsIG1lcmlkaWFuLCBudmFscyxcbiAgICAgICAgc3NpZzEsIGNzaWcxLCBzc2lnMiwgY3NpZzIsIGVwcywgb21nMTIsIGRubSxcbiAgICAgICAgbnVtaXQsIHNhbHAxYSwgY2FscDFhLCBzYWxwMWIsIGNhbHAxYixcbiAgICAgICAgdHJpcG4sIHRyaXBiLCB2LCBkdiwgZGFscDEsIHNkYWxwMSwgY2RhbHAxLCBuc2FscDEsXG4gICAgICAgIGxlbmd0aG1hc2ssIHNhbHAwLCBjYWxwMCwgYWxwMTIsIGsyLCBBNCwgQzRhLCBCNDEsIEI0MixcbiAgICAgICAgc29tZzEyLCBjb21nMTIsIGRvbWcxMiwgZGJldDEsIGRiZXQyLCBzYWxwMTIsIGNhbHAxMiwgc2RvbWcxMiwgY2RvbWcxMjtcbiAgICAvLyBDb21wdXRlIGxvbmdpdHVkZSBkaWZmZXJlbmNlIChBbmdEaWZmIGRvZXMgdGhpcyBjYXJlZnVsbHkpLiAgUmVzdWx0IGlzXG4gICAgLy8gaW4gWy0xODAsIDE4MF0gYnV0IC0xODAgaXMgb25seSBmb3Igd2VzdC1nb2luZyBnZW9kZXNpY3MuICAxODAgaXMgZm9yXG4gICAgLy8gZWFzdC1nb2luZyBhbmQgbWVyaWRpb25hbCBnZW9kZXNpY3MuXG4gICAgdmFscy5sYXQxID0gbGF0MSA9IG0uTGF0Rml4KGxhdDEpOyB2YWxzLmxhdDIgPSBsYXQyID0gbS5MYXRGaXgobGF0Mik7XG4gICAgLy8gSWYgcmVhbGx5IGNsb3NlIHRvIHRoZSBlcXVhdG9yLCB0cmVhdCBhcyBvbiBlcXVhdG9yLlxuICAgIGxhdDEgPSBtLkFuZ1JvdW5kKGxhdDEpO1xuICAgIGxhdDIgPSBtLkFuZ1JvdW5kKGxhdDIpO1xuICAgIGxvbjEyID0gbS5BbmdEaWZmKGxvbjEsIGxvbjIpOyBsb24xMnMgPSBsb24xMi50OyBsb24xMiA9IGxvbjEyLnM7XG4gICAgaWYgKG91dG1hc2sgJiBnLkxPTkdfVU5ST0xMKSB7XG4gICAgICB2YWxzLmxvbjEgPSBsb24xOyB2YWxzLmxvbjIgPSAobG9uMSArIGxvbjEyKSArIGxvbjEycztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFscy5sb24xID0gbS5BbmdOb3JtYWxpemUobG9uMSk7IHZhbHMubG9uMiA9IG0uQW5nTm9ybWFsaXplKGxvbjIpO1xuICAgIH1cbiAgICAvLyBNYWtlIGxvbmdpdHVkZSBkaWZmZXJlbmNlIHBvc2l0aXZlLlxuICAgIGxvbnNpZ24gPSBsb24xMiA+PSAwID8gMSA6IC0xO1xuICAgIC8vIElmIHZlcnkgY2xvc2UgdG8gYmVpbmcgb24gdGhlIHNhbWUgaGFsZi1tZXJpZGlhbiwgdGhlbiBtYWtlIGl0IHNvLlxuICAgIGxvbjEyID0gbG9uc2lnbiAqIG0uQW5nUm91bmQobG9uMTIpO1xuICAgIGxvbjEycyA9IG0uQW5nUm91bmQoKDE4MCAtIGxvbjEyKSAtIGxvbnNpZ24gKiBsb24xMnMpO1xuICAgIGxhbTEyID0gbG9uMTIgKiBtLmRlZ3JlZTtcbiAgICB0ID0gbS5zaW5jb3NkKGxvbjEyID4gOTAgPyBsb24xMnMgOiBsb24xMik7XG4gICAgc2xhbTEyID0gdC5zOyBjbGFtMTIgPSAobG9uMTIgPiA5MCA/IC0xIDogMSkgKiB0LmM7XG5cbiAgICAvLyBTd2FwIHBvaW50cyBzbyB0aGF0IHBvaW50IHdpdGggaGlnaGVyIChhYnMpIGxhdGl0dWRlIGlzIHBvaW50IDFcbiAgICAvLyBJZiBvbmUgbGF0aXR1ZGUgaXMgYSBuYW4sIHRoZW4gaXQgYmVjb21lcyBsYXQxLlxuICAgIHN3YXBwID0gTWF0aC5hYnMobGF0MSkgPCBNYXRoLmFicyhsYXQyKSA/IC0xIDogMTtcbiAgICBpZiAoc3dhcHAgPCAwKSB7XG4gICAgICBsb25zaWduICo9IC0xO1xuICAgICAgdCA9IGxhdDE7XG4gICAgICBsYXQxID0gbGF0MjtcbiAgICAgIGxhdDIgPSB0O1xuICAgICAgLy8gc3dhcChsYXQxLCBsYXQyKTtcbiAgICB9XG4gICAgLy8gTWFrZSBsYXQxIDw9IDBcbiAgICBsYXRzaWduID0gbGF0MSA8IDAgPyAxIDogLTE7XG4gICAgbGF0MSAqPSBsYXRzaWduO1xuICAgIGxhdDIgKj0gbGF0c2lnbjtcbiAgICAvLyBOb3cgd2UgaGF2ZVxuICAgIC8vXG4gICAgLy8gICAgIDAgPD0gbG9uMTIgPD0gMTgwXG4gICAgLy8gICAgIC05MCA8PSBsYXQxIDw9IDBcbiAgICAvLyAgICAgbGF0MSA8PSBsYXQyIDw9IC1sYXQxXG4gICAgLy9cbiAgICAvLyBsb25nc2lnbiwgc3dhcHAsIGxhdHNpZ24gcmVnaXN0ZXIgdGhlIHRyYW5zZm9ybWF0aW9uIHRvIGJyaW5nIHRoZVxuICAgIC8vIGNvb3JkaW5hdGVzIHRvIHRoaXMgY2Fub25pY2FsIGZvcm0uICBJbiBhbGwgY2FzZXMsIDEgbWVhbnMgbm8gY2hhbmdlIHdhc1xuICAgIC8vIG1hZGUuICBXZSBtYWtlIHRoZXNlIHRyYW5zZm9ybWF0aW9ucyBzbyB0aGF0IHRoZXJlIGFyZSBmZXcgY2FzZXMgdG9cbiAgICAvLyBjaGVjaywgZS5nLiwgb24gdmVyaWZ5aW5nIHF1YWRyYW50cyBpbiBhdGFuMi4gIEluIGFkZGl0aW9uLCB0aGlzXG4gICAgLy8gZW5mb3JjZXMgc29tZSBzeW1tZXRyaWVzIGluIHRoZSByZXN1bHRzIHJldHVybmVkLlxuXG4gICAgdCA9IG0uc2luY29zZChsYXQxKTsgc2JldDEgPSB0aGlzLl9mMSAqIHQuczsgY2JldDEgPSB0LmM7XG4gICAgLy8gbm9ybShzYmV0MSwgY2JldDEpO1xuICAgIHQgPSBtLmh5cG90KHNiZXQxLCBjYmV0MSk7IHNiZXQxIC89IHQ7IGNiZXQxIC89IHQ7XG4gICAgLy8gRW5zdXJlIGNiZXQxID0gK2Vwc2lsb24gYXQgcG9sZXNcbiAgICBjYmV0MSA9IE1hdGgubWF4KGcudGlueV8sIGNiZXQxKTtcblxuICAgIHQgPSBtLnNpbmNvc2QobGF0Mik7IHNiZXQyID0gdGhpcy5fZjEgKiB0LnM7IGNiZXQyID0gdC5jO1xuICAgIC8vIG5vcm0oc2JldDIsIGNiZXQyKTtcbiAgICB0ID0gbS5oeXBvdChzYmV0MiwgY2JldDIpOyBzYmV0MiAvPSB0OyBjYmV0MiAvPSB0O1xuICAgIC8vIEVuc3VyZSBjYmV0MiA9ICtlcHNpbG9uIGF0IHBvbGVzXG4gICAgY2JldDIgPSBNYXRoLm1heChnLnRpbnlfLCBjYmV0Mik7XG5cbiAgICAvLyBJZiBjYmV0MSA8IC1zYmV0MSwgdGhlbiBjYmV0MiAtIGNiZXQxIGlzIGEgc2Vuc2l0aXZlIG1lYXN1cmUgb2YgdGhlXG4gICAgLy8gfGJldDF8IC0gfGJldDJ8LiAgQWx0ZXJuYXRpdmVseSAoY2JldDEgPj0gLXNiZXQxKSwgYWJzKHNiZXQyKSArIHNiZXQxIGlzXG4gICAgLy8gYSBiZXR0ZXIgbWVhc3VyZS4gIFRoaXMgbG9naWMgaXMgdXNlZCBpbiBhc3NpZ25pbmcgY2FscDIgaW4gTGFtYmRhMTIuXG4gICAgLy8gU29tZXRpbWVzIHRoZXNlIHF1YW50aXRpZXMgdmFuaXNoIGFuZCBpbiB0aGF0IGNhc2Ugd2UgZm9yY2UgYmV0MiA9ICsvLVxuICAgIC8vIGJldDEgZXhhY3RseS4gIEFuIGV4YW1wbGUgd2hlcmUgaXMgaXMgbmVjZXNzYXJ5IGlzIHRoZSBpbnZlcnNlIHByb2JsZW1cbiAgICAvLyA0OC41MjI4NzY3MzU0NTkgMCAtNDguNTIyODc2NzM1NDU4OTgyOTMgMTc5LjU5OTcyMDQ1NjIyMzA3OTY0M1xuICAgIC8vIHdoaWNoIGZhaWxlZCB3aXRoIFZpc3VhbCBTdHVkaW8gMTAgKFJlbGVhc2UgYW5kIERlYnVnKVxuXG4gICAgaWYgKGNiZXQxIDwgLXNiZXQxKSB7XG4gICAgICBpZiAoY2JldDIgPT09IGNiZXQxKVxuICAgICAgICBzYmV0MiA9IHNiZXQyIDwgMCA/IHNiZXQxIDogLXNiZXQxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoTWF0aC5hYnMoc2JldDIpID09PSAtc2JldDEpXG4gICAgICAgIGNiZXQyID0gY2JldDE7XG4gICAgfVxuXG4gICAgZG4xID0gTWF0aC5zcXJ0KDEgKyB0aGlzLl9lcDIgKiBtLnNxKHNiZXQxKSk7XG4gICAgZG4yID0gTWF0aC5zcXJ0KDEgKyB0aGlzLl9lcDIgKiBtLnNxKHNiZXQyKSk7XG5cbiAgICAvLyBpbmRleCB6ZXJvIGVsZW1lbnRzIG9mIHRoZXNlIGFycmF5cyBhcmUgdW51c2VkXG4gICAgQzFhID0gbmV3IEFycmF5KGcubkMxXyArIDEpO1xuICAgIEMyYSA9IG5ldyBBcnJheShnLm5DMl8gKyAxKTtcbiAgICBDM2EgPSBuZXcgQXJyYXkoZy5uQzNfKTtcblxuICAgIG1lcmlkaWFuID0gbGF0MSA9PT0gLTkwIHx8IHNsYW0xMiA9PT0gMDtcbiAgICBpZiAobWVyaWRpYW4pIHtcblxuICAgICAgLy8gRW5kcG9pbnRzIGFyZSBvbiBhIHNpbmdsZSBmdWxsIG1lcmlkaWFuLCBzbyB0aGUgZ2VvZGVzaWMgbWlnaHRcbiAgICAgIC8vIGxpZSBvbiBhIG1lcmlkaWFuLlxuXG4gICAgICBjYWxwMSA9IGNsYW0xMjsgc2FscDEgPSBzbGFtMTI7IC8vIEhlYWQgdG8gdGhlIHRhcmdldCBsb25naXR1ZGVcbiAgICAgIGNhbHAyID0gMTsgc2FscDIgPSAwOyAgICAgICAgICAgLy8gQXQgdGhlIHRhcmdldCB3ZSdyZSBoZWFkaW5nIG5vcnRoXG5cbiAgICAgIC8vIHRhbihiZXQpID0gdGFuKHNpZykgKiBjb3MoYWxwKVxuICAgICAgc3NpZzEgPSBzYmV0MTsgY3NpZzEgPSBjYWxwMSAqIGNiZXQxO1xuICAgICAgc3NpZzIgPSBzYmV0MjsgY3NpZzIgPSBjYWxwMiAqIGNiZXQyO1xuXG4gICAgICAvLyBzaWcxMiA9IHNpZzIgLSBzaWcxXG4gICAgICBzaWcxMiA9IE1hdGguYXRhbjIoTWF0aC5tYXgoMCwgY3NpZzEgKiBzc2lnMiAtIHNzaWcxICogY3NpZzIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzaWcxICogY3NpZzIgKyBzc2lnMSAqIHNzaWcyKTtcbiAgICAgIG52YWxzID0gdGhpcy5MZW5ndGhzKHRoaXMuX24sIHNpZzEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3NpZzEsIGNzaWcxLCBkbjEsIHNzaWcyLCBjc2lnMiwgZG4yLCBjYmV0MSwgY2JldDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRtYXNrIHwgZy5ESVNUQU5DRSB8IGcuUkVEVUNFRExFTkdUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEMxYSwgQzJhKTtcbiAgICAgIHMxMnggPSBudmFscy5zMTJiO1xuICAgICAgbTEyeCA9IG52YWxzLm0xMmI7XG4gICAgICAvLyBJZ25vcmUgbTBcbiAgICAgIGlmIChvdXRtYXNrICYgZy5HRU9ERVNJQ1NDQUxFKSB7XG4gICAgICAgIHZhbHMuTTEyID0gbnZhbHMuTTEyO1xuICAgICAgICB2YWxzLk0yMSA9IG52YWxzLk0yMTtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCB0aGUgY2hlY2sgZm9yIHNpZzEyIHNpbmNlIHplcm8gbGVuZ3RoIGdlb2Rlc2ljcyBtaWdodCB5aWVsZFxuICAgICAgLy8gbTEyIDwgMC4gIFRlc3QgY2FzZSB3YXNcbiAgICAgIC8vXG4gICAgICAvLyAgICBlY2hvIDIwLjAwMSAwIDIwLjAwMSAwIHwgR2VvZFNvbHZlIC1pXG4gICAgICAvL1xuICAgICAgLy8gSW4gZmFjdCwgd2Ugd2lsbCBoYXZlIHNpZzEyID4gcGkvMiBmb3IgbWVyaWRpb25hbCBnZW9kZXNpY1xuICAgICAgLy8gd2hpY2ggaXMgbm90IGEgc2hvcnRlc3QgcGF0aC5cbiAgICAgIGlmIChzaWcxMiA8IDEgfHwgbTEyeCA+PSAwKSB7XG4gICAgICAgIC8vIE5lZWQgYXQgbGVhc3QgMiwgdG8gaGFuZGxlIDkwIDAgOTAgMTgwXG4gICAgICAgIGlmIChzaWcxMiA8IDMgKiBnLnRpbnlfKVxuICAgICAgICAgIHNpZzEyID0gbTEyeCA9IHMxMnggPSAwO1xuICAgICAgICBtMTJ4ICo9IHRoaXMuX2I7XG4gICAgICAgIHMxMnggKj0gdGhpcy5fYjtcbiAgICAgICAgdmFscy5hMTIgPSBzaWcxMiAvIG0uZGVncmVlO1xuICAgICAgfSBlbHNlXG4gICAgICAgIC8vIG0xMiA8IDAsIGkuZS4sIHByb2xhdGUgYW5kIHRvbyBjbG9zZSB0byBhbnRpLXBvZGFsXG4gICAgICAgIG1lcmlkaWFuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc29tZzEyID0gMjtcbiAgICBpZiAoIW1lcmlkaWFuICYmXG4gICAgICAgIHNiZXQxID09PSAwICYmICAgICAgICAgICAvLyBhbmQgc2JldDIgPT0gMFxuICAgICAgICAodGhpcy5mIDw9IDAgfHwgbG9uMTJzID49IHRoaXMuZiAqIDE4MCkpIHtcblxuICAgICAgLy8gR2VvZGVzaWMgcnVucyBhbG9uZyBlcXVhdG9yXG4gICAgICBjYWxwMSA9IGNhbHAyID0gMDsgc2FscDEgPSBzYWxwMiA9IDE7XG4gICAgICBzMTJ4ID0gdGhpcy5hICogbGFtMTI7XG4gICAgICBzaWcxMiA9IG9tZzEyID0gbGFtMTIgLyB0aGlzLl9mMTtcbiAgICAgIG0xMnggPSB0aGlzLl9iICogTWF0aC5zaW4oc2lnMTIpO1xuICAgICAgaWYgKG91dG1hc2sgJiBnLkdFT0RFU0lDU0NBTEUpXG4gICAgICAgIHZhbHMuTTEyID0gdmFscy5NMjEgPSBNYXRoLmNvcyhzaWcxMik7XG4gICAgICB2YWxzLmExMiA9IGxvbjEyIC8gdGhpcy5fZjE7XG5cbiAgICB9IGVsc2UgaWYgKCFtZXJpZGlhbikge1xuXG4gICAgICAvLyBOb3cgcG9pbnQxIGFuZCBwb2ludDIgYmVsb25nIHdpdGhpbiBhIGhlbWlzcGhlcmUgYm91bmRlZCBieSBhXG4gICAgICAvLyBtZXJpZGlhbiBhbmQgZ2VvZGVzaWMgaXMgbmVpdGhlciBtZXJpZGlvbmFsIG9yIGVxdWF0b3JpYWwuXG5cbiAgICAgIC8vIEZpZ3VyZSBhIHN0YXJ0aW5nIHBvaW50IGZvciBOZXd0b24ncyBtZXRob2RcbiAgICAgIG52YWxzID0gdGhpcy5JbnZlcnNlU3RhcnQoc2JldDEsIGNiZXQxLCBkbjEsIHNiZXQyLCBjYmV0MiwgZG4yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW0xMiwgc2xhbTEyLCBjbGFtMTIsIEMxYSwgQzJhKTtcbiAgICAgIHNpZzEyID0gbnZhbHMuc2lnMTI7XG4gICAgICBzYWxwMSA9IG52YWxzLnNhbHAxO1xuICAgICAgY2FscDEgPSBudmFscy5jYWxwMTtcblxuICAgICAgaWYgKHNpZzEyID49IDApIHtcbiAgICAgICAgc2FscDIgPSBudmFscy5zYWxwMjtcbiAgICAgICAgY2FscDIgPSBudmFscy5jYWxwMjtcbiAgICAgICAgLy8gU2hvcnQgbGluZXMgKEludmVyc2VTdGFydCBzZXRzIHNhbHAyLCBjYWxwMiwgZG5tKVxuXG4gICAgICAgIGRubSA9IG52YWxzLmRubTtcbiAgICAgICAgczEyeCA9IHNpZzEyICogdGhpcy5fYiAqIGRubTtcbiAgICAgICAgbTEyeCA9IG0uc3EoZG5tKSAqIHRoaXMuX2IgKiBNYXRoLnNpbihzaWcxMiAvIGRubSk7XG4gICAgICAgIGlmIChvdXRtYXNrICYgZy5HRU9ERVNJQ1NDQUxFKVxuICAgICAgICAgIHZhbHMuTTEyID0gdmFscy5NMjEgPSBNYXRoLmNvcyhzaWcxMiAvIGRubSk7XG4gICAgICAgIHZhbHMuYTEyID0gc2lnMTIgLyBtLmRlZ3JlZTtcbiAgICAgICAgb21nMTIgPSBsYW0xMiAvICh0aGlzLl9mMSAqIGRubSk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIE5ld3RvbidzIG1ldGhvZC4gIFRoaXMgaXMgYSBzdHJhaWdodGZvcndhcmQgc29sdXRpb24gb2YgZihhbHAxKSA9XG4gICAgICAgIC8vIGxhbWJkYTEyKGFscDEpIC0gbGFtMTIgPSAwIHdpdGggb25lIHdyaW5rbGUuICBmKGFscCkgaGFzIGV4YWN0bHkgb25lXG4gICAgICAgIC8vIHJvb3QgaW4gdGhlIGludGVydmFsICgwLCBwaSkgYW5kIGl0cyBkZXJpdmF0aXZlIGlzIHBvc2l0aXZlIGF0IHRoZVxuICAgICAgICAvLyByb290LiAgVGh1cyBmKGFscCkgaXMgcG9zaXRpdmUgZm9yIGFscCA+IGFscDEgYW5kIG5lZ2F0aXZlIGZvciBhbHAgPFxuICAgICAgICAvLyBhbHAxLiAgRHVyaW5nIHRoZSBjb3Vyc2Ugb2YgdGhlIGl0ZXJhdGlvbiwgYSByYW5nZSAoYWxwMWEsIGFscDFiKSBpc1xuICAgICAgICAvLyBtYWludGFpbmVkIHdoaWNoIGJyYWNrZXRzIHRoZSByb290IGFuZCB3aXRoIGVhY2ggZXZhbHVhdGlvbiBvZlxuICAgICAgICAvLyBmKGFscCkgdGhlIHJhbmdlIGlzIHNocnVuayBpZiBwb3NzaWJsZS4gIE5ld3RvbidzIG1ldGhvZCBpc1xuICAgICAgICAvLyByZXN0YXJ0ZWQgd2hlbmV2ZXIgdGhlIGRlcml2YXRpdmUgb2YgZiBpcyBuZWdhdGl2ZSAoYmVjYXVzZSB0aGUgbmV3XG4gICAgICAgIC8vIHZhbHVlIG9mIGFscDEgaXMgdGhlbiBmdXJ0aGVyIGZyb20gdGhlIHNvbHV0aW9uKSBvciBpZiB0aGUgbmV3XG4gICAgICAgIC8vIGVzdGltYXRlIG9mIGFscDEgbGllcyBvdXRzaWRlICgwLHBpKTsgaW4gdGhpcyBjYXNlLCB0aGUgbmV3IHN0YXJ0aW5nXG4gICAgICAgIC8vIGd1ZXNzIGlzIHRha2VuIHRvIGJlIChhbHAxYSArIGFscDFiKSAvIDIuXG4gICAgICAgIG51bWl0ID0gMDtcbiAgICAgICAgLy8gQnJhY2tldGluZyByYW5nZVxuICAgICAgICBzYWxwMWEgPSBnLnRpbnlfOyBjYWxwMWEgPSAxOyBzYWxwMWIgPSBnLnRpbnlfOyBjYWxwMWIgPSAtMTtcbiAgICAgICAgZm9yICh0cmlwbiA9IGZhbHNlLCB0cmlwYiA9IGZhbHNlOyBudW1pdCA8IG1heGl0Ml87ICsrbnVtaXQpIHtcbiAgICAgICAgICAvLyB0aGUgV0dTODQgdGVzdCBzZXQ6IG1lYW4gPSAxLjQ3LCBzZCA9IDEuMjUsIG1heCA9IDE2XG4gICAgICAgICAgLy8gV0dTODQgYW5kIHJhbmRvbSBpbnB1dDogbWVhbiA9IDIuODUsIHNkID0gMC42MFxuICAgICAgICAgIG52YWxzID0gdGhpcy5MYW1iZGExMihzYmV0MSwgY2JldDEsIGRuMSwgc2JldDIsIGNiZXQyLCBkbjIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbHAxLCBjYWxwMSwgc2xhbTEyLCBjbGFtMTIsIG51bWl0IDwgbWF4aXQxXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQzFhLCBDMmEsIEMzYSk7XG4gICAgICAgICAgdiA9IG52YWxzLmxhbTEyO1xuICAgICAgICAgIHNhbHAyID0gbnZhbHMuc2FscDI7XG4gICAgICAgICAgY2FscDIgPSBudmFscy5jYWxwMjtcbiAgICAgICAgICBzaWcxMiA9IG52YWxzLnNpZzEyO1xuICAgICAgICAgIHNzaWcxID0gbnZhbHMuc3NpZzE7XG4gICAgICAgICAgY3NpZzEgPSBudmFscy5jc2lnMTtcbiAgICAgICAgICBzc2lnMiA9IG52YWxzLnNzaWcyO1xuICAgICAgICAgIGNzaWcyID0gbnZhbHMuY3NpZzI7XG4gICAgICAgICAgZXBzID0gbnZhbHMuZXBzO1xuICAgICAgICAgIGRvbWcxMiA9IG52YWxzLmRvbWcxMjtcbiAgICAgICAgICBkdiA9IG52YWxzLmRsYW0xMjtcblxuICAgICAgICAgIC8vIDIgKiB0b2wwIGlzIGFwcHJveGltYXRlbHkgMSB1bHAgZm9yIGEgbnVtYmVyIGluIFswLCBwaV0uXG4gICAgICAgICAgLy8gUmV2ZXJzZWQgdGVzdCB0byBhbGxvdyBlc2NhcGUgd2l0aCBOYU5zXG4gICAgICAgICAgaWYgKHRyaXBiIHx8ICEoTWF0aC5hYnModikgPj0gKHRyaXBuID8gOCA6IDEpICogdG9sMF8pKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gVXBkYXRlIGJyYWNrZXRpbmcgdmFsdWVzXG4gICAgICAgICAgaWYgKHYgPiAwICYmIChudW1pdCA8IG1heGl0MV8gfHwgY2FscDEvc2FscDEgPiBjYWxwMWIvc2FscDFiKSkge1xuICAgICAgICAgICAgc2FscDFiID0gc2FscDE7IGNhbHAxYiA9IGNhbHAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAodiA8IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgIChudW1pdCA8IG1heGl0MV8gfHwgY2FscDEvc2FscDEgPCBjYWxwMWEvc2FscDFhKSkge1xuICAgICAgICAgICAgc2FscDFhID0gc2FscDE7IGNhbHAxYSA9IGNhbHAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobnVtaXQgPCBtYXhpdDFfICYmIGR2ID4gMCkge1xuICAgICAgICAgICAgZGFscDEgPSAtdi9kdjtcbiAgICAgICAgICAgIHNkYWxwMSA9IE1hdGguc2luKGRhbHAxKTsgY2RhbHAxID0gTWF0aC5jb3MoZGFscDEpO1xuICAgICAgICAgICAgbnNhbHAxID0gc2FscDEgKiBjZGFscDEgKyBjYWxwMSAqIHNkYWxwMTtcbiAgICAgICAgICAgIGlmIChuc2FscDEgPiAwICYmIE1hdGguYWJzKGRhbHAxKSA8IE1hdGguUEkpIHtcbiAgICAgICAgICAgICAgY2FscDEgPSBjYWxwMSAqIGNkYWxwMSAtIHNhbHAxICogc2RhbHAxO1xuICAgICAgICAgICAgICBzYWxwMSA9IG5zYWxwMTtcbiAgICAgICAgICAgICAgLy8gbm9ybShzYWxwMSwgY2FscDEpO1xuICAgICAgICAgICAgICB0ID0gbS5oeXBvdChzYWxwMSwgY2FscDEpOyBzYWxwMSAvPSB0OyBjYWxwMSAvPSB0O1xuICAgICAgICAgICAgICAvLyBJbiBzb21lIHJlZ2ltZXMgd2UgZG9uJ3QgZ2V0IHF1YWRyYXRpYyBjb252ZXJnZW5jZSBiZWNhdXNlXG4gICAgICAgICAgICAgIC8vIHNsb3BlIC0+IDAuICBTbyB1c2UgY29udmVyZ2VuY2UgY29uZGl0aW9ucyBiYXNlZCBvbiBlcHNpbG9uXG4gICAgICAgICAgICAgIC8vIGluc3RlYWQgb2Ygc3FydChlcHNpbG9uKS5cbiAgICAgICAgICAgICAgdHJpcG4gPSBNYXRoLmFicyh2KSA8PSAxNiAqIHRvbDBfO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRWl0aGVyIGR2IHdhcyBub3QgcG9zaXRpdmUgb3IgdXBkYXRlZCB2YWx1ZSB3YXMgb3V0c2lkZSBsZWdhbFxuICAgICAgICAgIC8vIHJhbmdlLiAgVXNlIHRoZSBtaWRwb2ludCBvZiB0aGUgYnJhY2tldCBhcyB0aGUgbmV4dCBlc3RpbWF0ZS5cbiAgICAgICAgICAvLyBUaGlzIG1lY2hhbmlzbSBpcyBub3QgbmVlZGVkIGZvciB0aGUgV0dTODQgZWxsaXBzb2lkLCBidXQgaXQgZG9lc1xuICAgICAgICAgIC8vIGNhdGNoIHByb2JsZW1zIHdpdGggbW9yZSBlY2NlbnRyaWMgZWxsaXBzb2lkcy4gIEl0cyBlZmZpY2FjeSBpc1xuICAgICAgICAgIC8vIHN1Y2ggZm9yIHRoZSBXR1M4NCB0ZXN0IHNldCB3aXRoIHRoZSBzdGFydGluZyBndWVzcyBzZXQgdG8gYWxwMSA9XG4gICAgICAgICAgLy8gOTBkZWc6XG4gICAgICAgICAgLy8gdGhlIFdHUzg0IHRlc3Qgc2V0OiBtZWFuID0gNS4yMSwgc2QgPSAzLjkzLCBtYXggPSAyNFxuICAgICAgICAgIC8vIFdHUzg0IGFuZCByYW5kb20gaW5wdXQ6IG1lYW4gPSA0Ljc0LCBzZCA9IDAuOTlcbiAgICAgICAgICBzYWxwMSA9IChzYWxwMWEgKyBzYWxwMWIpLzI7XG4gICAgICAgICAgY2FscDEgPSAoY2FscDFhICsgY2FscDFiKS8yO1xuICAgICAgICAgIC8vIG5vcm0oc2FscDEsIGNhbHAxKTtcbiAgICAgICAgICB0ID0gbS5oeXBvdChzYWxwMSwgY2FscDEpOyBzYWxwMSAvPSB0OyBjYWxwMSAvPSB0O1xuICAgICAgICAgIHRyaXBuID0gZmFsc2U7XG4gICAgICAgICAgdHJpcGIgPSAoTWF0aC5hYnMoc2FscDFhIC0gc2FscDEpICsgKGNhbHAxYSAtIGNhbHAxKSA8IHRvbGJfIHx8XG4gICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoc2FscDEgLSBzYWxwMWIpICsgKGNhbHAxIC0gY2FscDFiKSA8IHRvbGJfKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGhtYXNrID0gb3V0bWFzayB8XG4gICAgICAgICAgICAob3V0bWFzayAmIChnLlJFRFVDRURMRU5HVEggfCBnLkdFT0RFU0lDU0NBTEUpID9cbiAgICAgICAgICAgICBnLkRJU1RBTkNFIDogZy5OT05FKTtcbiAgICAgICAgbnZhbHMgPSB0aGlzLkxlbmd0aHMoZXBzLCBzaWcxMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3NpZzEsIGNzaWcxLCBkbjEsIHNzaWcyLCBjc2lnMiwgZG4yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYmV0MSwgY2JldDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aG1hc2ssIEMxYSwgQzJhKTtcbiAgICAgICAgczEyeCA9IG52YWxzLnMxMmI7XG4gICAgICAgIG0xMnggPSBudmFscy5tMTJiO1xuICAgICAgICAvLyBJZ25vcmUgbTBcbiAgICAgICAgaWYgKG91dG1hc2sgJiBnLkdFT0RFU0lDU0NBTEUpIHtcbiAgICAgICAgICB2YWxzLk0xMiA9IG52YWxzLk0xMjtcbiAgICAgICAgICB2YWxzLk0yMSA9IG52YWxzLk0yMTtcbiAgICAgICAgfVxuICAgICAgICBtMTJ4ICo9IHRoaXMuX2I7XG4gICAgICAgIHMxMnggKj0gdGhpcy5fYjtcbiAgICAgICAgdmFscy5hMTIgPSBzaWcxMiAvIG0uZGVncmVlO1xuICAgICAgICBpZiAob3V0bWFzayAmIGcuQVJFQSkge1xuICAgICAgICAgIC8vIG9tZzEyID0gbGFtMTIgLSBkb21nMTJcbiAgICAgICAgICBzZG9tZzEyID0gTWF0aC5zaW4oZG9tZzEyKTsgY2RvbWcxMiA9IE1hdGguY29zKGRvbWcxMik7XG4gICAgICAgICAgc29tZzEyID0gc2xhbTEyICogY2RvbWcxMiAtIGNsYW0xMiAqIHNkb21nMTI7XG4gICAgICAgICAgY29tZzEyID0gY2xhbTEyICogY2RvbWcxMiArIHNsYW0xMiAqIHNkb21nMTI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3V0bWFzayAmIGcuRElTVEFOQ0UpXG4gICAgICB2YWxzLnMxMiA9IDAgKyBzMTJ4OyAgICAgIC8vIENvbnZlcnQgLTAgdG8gMFxuXG4gICAgaWYgKG91dG1hc2sgJiBnLlJFRFVDRURMRU5HVEgpXG4gICAgICB2YWxzLm0xMiA9IDAgKyBtMTJ4OyAgICAgIC8vIENvbnZlcnQgLTAgdG8gMFxuXG4gICAgaWYgKG91dG1hc2sgJiBnLkFSRUEpIHtcbiAgICAgIC8vIEZyb20gTGFtYmRhMTI6IHNpbihhbHAxKSAqIGNvcyhiZXQxKSA9IHNpbihhbHAwKVxuICAgICAgc2FscDAgPSBzYWxwMSAqIGNiZXQxO1xuICAgICAgY2FscDAgPSBtLmh5cG90KGNhbHAxLCBzYWxwMSAqIHNiZXQxKTsgLy8gY2FscDAgPiAwXG4gICAgICBpZiAoY2FscDAgIT09IDAgJiYgc2FscDAgIT09IDApIHtcbiAgICAgICAgLy8gRnJvbSBMYW1iZGExMjogdGFuKGJldCkgPSB0YW4oc2lnKSAqIGNvcyhhbHApXG4gICAgICAgIHNzaWcxID0gc2JldDE7IGNzaWcxID0gY2FscDEgKiBjYmV0MTtcbiAgICAgICAgc3NpZzIgPSBzYmV0MjsgY3NpZzIgPSBjYWxwMiAqIGNiZXQyO1xuICAgICAgICBrMiA9IG0uc3EoY2FscDApICogdGhpcy5fZXAyO1xuICAgICAgICBlcHMgPSBrMiAvICgyICogKDEgKyBNYXRoLnNxcnQoMSArIGsyKSkgKyBrMik7XG4gICAgICAgIC8vIE11bHRpcGxpZXIgPSBhXjIgKiBlXjIgKiBjb3MoYWxwaGEwKSAqIHNpbihhbHBoYTApLlxuICAgICAgICBBNCA9IG0uc3EodGhpcy5hKSAqIGNhbHAwICogc2FscDAgKiB0aGlzLl9lMjtcbiAgICAgICAgLy8gbm9ybShzc2lnMSwgY3NpZzEpO1xuICAgICAgICB0ID0gbS5oeXBvdChzc2lnMSwgY3NpZzEpOyBzc2lnMSAvPSB0OyBjc2lnMSAvPSB0O1xuICAgICAgICAvLyBub3JtKHNzaWcyLCBjc2lnMik7XG4gICAgICAgIHQgPSBtLmh5cG90KHNzaWcyLCBjc2lnMik7IHNzaWcyIC89IHQ7IGNzaWcyIC89IHQ7XG4gICAgICAgIEM0YSA9IG5ldyBBcnJheShnLm5DNF8pO1xuICAgICAgICB0aGlzLkM0ZihlcHMsIEM0YSk7XG4gICAgICAgIEI0MSA9IGcuU2luQ29zU2VyaWVzKGZhbHNlLCBzc2lnMSwgY3NpZzEsIEM0YSk7XG4gICAgICAgIEI0MiA9IGcuU2luQ29zU2VyaWVzKGZhbHNlLCBzc2lnMiwgY3NpZzIsIEM0YSk7XG4gICAgICAgIHZhbHMuUzEyID0gQTQgKiAoQjQyIC0gQjQxKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAvLyBBdm9pZCBwcm9ibGVtcyB3aXRoIGluZGV0ZXJtaW5hdGUgc2lnMSwgc2lnMiBvbiBlcXVhdG9yXG4gICAgICAgIHZhbHMuUzEyID0gMDtcbiAgICAgIGlmICghbWVyaWRpYW4gJiYgc29tZzEyID4gMSkge1xuICAgICAgICBzb21nMTIgPSBNYXRoLnNpbihvbWcxMik7IGNvbWcxMiA9IE1hdGguY29zKG9tZzEyKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWVyaWRpYW4gJiZcbiAgICAgICAgICBjb21nMTIgPiAtMC43MDcxICYmICAgICAgLy8gTG9uZyBkaWZmZXJlbmNlIG5vdCB0b28gYmlnXG4gICAgICAgICAgc2JldDIgLSBzYmV0MSA8IDEuNzUpIHsgLy8gTGF0IGRpZmZlcmVuY2Ugbm90IHRvbyBiaWdcbiAgICAgICAgLy8gVXNlIHRhbihHYW1tYS8yKSA9IHRhbihvbWcxMi8yKVxuICAgICAgICAvLyAqICh0YW4oYmV0MS8yKSt0YW4oYmV0Mi8yKSkvKDErdGFuKGJldDEvMikqdGFuKGJldDIvMikpXG4gICAgICAgIC8vIHdpdGggdGFuKHgvMikgPSBzaW4oeCkvKDErY29zKHgpKVxuICAgICAgICBkb21nMTIgPSAxICsgY29tZzEyOyBkYmV0MSA9IDEgKyBjYmV0MTsgZGJldDIgPSAxICsgY2JldDI7XG4gICAgICAgIGFscDEyID0gMiAqIE1hdGguYXRhbjIoIHNvbWcxMiAqIChzYmV0MSpkYmV0MiArIHNiZXQyKmRiZXQxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tZzEyICogKHNiZXQxKnNiZXQyICsgZGJldDEqZGJldDIpICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbHAxMiA9IGFscDIgLSBhbHAxLCB1c2VkIGluIGF0YW4yIHNvIG5vIG5lZWQgdG8gbm9ybWFsaXplXG4gICAgICAgIHNhbHAxMiA9IHNhbHAyICogY2FscDEgLSBjYWxwMiAqIHNhbHAxO1xuICAgICAgICBjYWxwMTIgPSBjYWxwMiAqIGNhbHAxICsgc2FscDIgKiBzYWxwMTtcbiAgICAgICAgLy8gVGhlIHJpZ2h0IHRoaW5nIGFwcGVhcnMgdG8gaGFwcGVuIGlmIGFscDEgPSArLy0xODAgYW5kIGFscDIgPSAwLCB2aXpcbiAgICAgICAgLy8gc2FscDEyID0gLTAgYW5kIGFscDEyID0gLTE4MC4gIEhvd2V2ZXIgdGhpcyBkZXBlbmRzIG9uIHRoZSBzaWduXG4gICAgICAgIC8vIGJlaW5nIGF0dGFjaGVkIHRvIDAgY29ycmVjdGx5LiAgVGhlIGZvbGxvd2luZyBlbnN1cmVzIHRoZSBjb3JyZWN0XG4gICAgICAgIC8vIGJlaGF2aW9yLlxuICAgICAgICBpZiAoc2FscDEyID09PSAwICYmIGNhbHAxMiA8IDApIHtcbiAgICAgICAgICBzYWxwMTIgPSBnLnRpbnlfICogY2FscDE7XG4gICAgICAgICAgY2FscDEyID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgYWxwMTIgPSBNYXRoLmF0YW4yKHNhbHAxMiwgY2FscDEyKTtcbiAgICAgIH1cbiAgICAgIHZhbHMuUzEyICs9IHRoaXMuX2MyICogYWxwMTI7XG4gICAgICB2YWxzLlMxMiAqPSBzd2FwcCAqIGxvbnNpZ24gKiBsYXRzaWduO1xuICAgICAgLy8gQ29udmVydCAtMCB0byAwXG4gICAgICB2YWxzLlMxMiArPSAwO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgY2FscCwgc2FscCB0byBhemltdXRoIGFjY291bnRpbmcgZm9yIGxvbnNpZ24sIHN3YXBwLCBsYXRzaWduLlxuICAgIGlmIChzd2FwcCA8IDApIHtcbiAgICAgIHQgPSBzYWxwMTtcbiAgICAgIHNhbHAxID0gc2FscDI7XG4gICAgICBzYWxwMiA9IHQ7XG4gICAgICAvLyBzd2FwKHNhbHAxLCBzYWxwMik7XG4gICAgICB0ID0gY2FscDE7XG4gICAgICBjYWxwMSA9IGNhbHAyO1xuICAgICAgY2FscDIgPSB0O1xuICAgICAgLy8gc3dhcChjYWxwMSwgY2FscDIpO1xuICAgICAgaWYgKG91dG1hc2sgJiBnLkdFT0RFU0lDU0NBTEUpIHtcbiAgICAgICAgdCA9IHZhbHMuTTEyO1xuICAgICAgICB2YWxzLk0xMiA9IHZhbHMuTTIxO1xuICAgICAgICB2YWxzLk0yMSA9IHQ7XG4gICAgICAgIC8vIHN3YXAodmFscy5NMTIsIHZhbHMuTTIxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzYWxwMSAqPSBzd2FwcCAqIGxvbnNpZ247IGNhbHAxICo9IHN3YXBwICogbGF0c2lnbjtcbiAgICBzYWxwMiAqPSBzd2FwcCAqIGxvbnNpZ247IGNhbHAyICo9IHN3YXBwICogbGF0c2lnbjtcblxuICAgIHJldHVybiB7dmFsczogdmFscyxcbiAgICAgICAgICAgIHNhbHAxOiBzYWxwMSwgY2FscDE6IGNhbHAxLFxuICAgICAgICAgICAgc2FscDI6IHNhbHAyLCBjYWxwMjogY2FscDJ9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBTb2x2ZSB0aGUgZ2VuZXJhbCBkaXJlY3QgZ2VvZGVzaWMgcHJvYmxlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdDEgdGhlIGxhdGl0dWRlIG9mIHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbG9uMSB0aGUgbG9uZ2l0dWRlIG9mIHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYXppMSB0aGUgYXppbXV0aCBhdCB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtib29sfSBhcmNtb2RlIGlzIHRoZSBuZXh0IHBhcmFtZXRlciBhbiBhcmMgbGVuZ3RoP1xuICAgKiBAcGFyYW0ge251bWJlcn0gczEyX2ExMiB0aGUgKGFyY21vZGUgPyBhcmMgbGVuZ3RoIDogZGlzdGFuY2UpIGZyb20gdGhlXG4gICAqICAgZmlyc3QgcG9pbnQgdG8gdGhlIHNlY29uZCBpbiAoYXJjbW9kZSA/IGRlZ3JlZXMgOiBtZXRlcnMpLlxuICAgKiBAcGFyYW0ge2JpdG1hc2t9IFtvdXRtYXNrID0gU1RBTkRBUkRdIHdoaWNoIHJlc3VsdHMgdG8gaW5jbHVkZS5cbiAgICogQHJldHVybnMge29iamVjdH0gdGhlIHJlcXVlc3RlZCByZXN1bHRzLlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGxhdDEsIGxvbjEsIGF6aTEsIGFuZCBhMTIgZmllbGRzIG9mIHRoZSByZXN1bHQgYXJlIGFsd2F5c1xuICAgKiAgIHNldDsgczEyIGlzIGluY2x1ZGVkIGlmIGFyY21vZGUgaXMgZmFsc2UuICBGb3IgZGV0YWlscyBvbiB0aGUgb3V0bWFza1xuICAgKiAgIHBhcmFtZXRlciwgc2VlIHtAdHV0b3JpYWwgMi1pbnRlcmZhY2V9LCBcIlRoZSBvdXRtYXNrIGFuZCBjYXBzXG4gICAqICAgcGFyYW1ldGVyc1wiLlxuICAgKi9cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuR2VuRGlyZWN0ID0gZnVuY3Rpb24obGF0MSwgbG9uMSwgYXppMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjbW9kZSwgczEyX2ExMiwgb3V0bWFzaykge1xuICAgIHZhciBsaW5lO1xuICAgIGlmICghb3V0bWFzaykgb3V0bWFzayA9IGcuU1RBTkRBUkQ7XG4gICAgZWxzZSBpZiAob3V0bWFzayA9PT0gZy5MT05HX1VOUk9MTCkgb3V0bWFzayB8PSBnLlNUQU5EQVJEO1xuICAgIC8vIEF1dG9tYXRpY2FsbHkgc3VwcGx5IERJU1RBTkNFX0lOIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghYXJjbW9kZSkgb3V0bWFzayB8PSBnLkRJU1RBTkNFX0lOO1xuICAgIGxpbmUgPSBuZXcgbC5HZW9kZXNpY0xpbmUodGhpcywgbGF0MSwgbG9uMSwgYXppMSwgb3V0bWFzayk7XG4gICAgcmV0dXJuIGxpbmUuR2VuUG9zaXRpb24oYXJjbW9kZSwgczEyX2ExMiwgb3V0bWFzayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNvbHZlIHRoZSBkaXJlY3QgZ2VvZGVzaWMgcHJvYmxlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdDEgdGhlIGxhdGl0dWRlIG9mIHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbG9uMSB0aGUgbG9uZ2l0dWRlIG9mIHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYXppMSB0aGUgYXppbXV0aCBhdCB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHMxMiB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgZmlyc3QgcG9pbnQgdG8gdGhlIHNlY29uZCBpblxuICAgKiAgIG1ldGVycy5cbiAgICogQHBhcmFtIHtiaXRtYXNrfSBbb3V0bWFzayA9IFNUQU5EQVJEXSB3aGljaCByZXN1bHRzIHRvIGluY2x1ZGUuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSByZXF1ZXN0ZWQgcmVzdWx0cy5cbiAgICogQGRlc2NyaXB0aW9uIFRoZSBsYXQxLCBsb24xLCBhemkxLCBzMTIsIGFuZCBhMTIgZmllbGRzIG9mIHRoZSByZXN1bHQgYXJlXG4gICAqICAgYWx3YXlzIHNldC4gIEZvciBkZXRhaWxzIG9uIHRoZSBvdXRtYXNrIHBhcmFtZXRlciwgc2VlIHtAdHV0b3JpYWxcbiAgICogICAyLWludGVyZmFjZX0sIFwiVGhlIG91dG1hc2sgYW5kIGNhcHMgcGFyYW1ldGVyc1wiLlxuICAgKi9cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuRGlyZWN0ID0gZnVuY3Rpb24obGF0MSwgbG9uMSwgYXppMSwgczEyLCBvdXRtYXNrKSB7XG4gICAgcmV0dXJuIHRoaXMuR2VuRGlyZWN0KGxhdDEsIGxvbjEsIGF6aTEsIGZhbHNlLCBzMTIsIG91dG1hc2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBTb2x2ZSB0aGUgZGlyZWN0IGdlb2Rlc2ljIHByb2JsZW0gd2l0aCBhcmMgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0MSB0aGUgbGF0aXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24xIHRoZSBsb25naXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkxIHRoZSBhemltdXRoIGF0IHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYTEyIHRoZSBhcmMgbGVuZ3RoIGZyb20gdGhlIGZpcnN0IHBvaW50IHRvIHRoZSBzZWNvbmQgaW5cbiAgICogICBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge2JpdG1hc2t9IFtvdXRtYXNrID0gU1RBTkRBUkRdIHdoaWNoIHJlc3VsdHMgdG8gaW5jbHVkZS5cbiAgICogQHJldHVybnMge29iamVjdH0gdGhlIHJlcXVlc3RlZCByZXN1bHRzLlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGxhdDEsIGxvbjEsIGF6aTEsIGFuZCBhMTIgZmllbGRzIG9mIHRoZSByZXN1bHQgYXJlXG4gICAqICAgYWx3YXlzIHNldC4gIEZvciBkZXRhaWxzIG9uIHRoZSBvdXRtYXNrIHBhcmFtZXRlciwgc2VlIHtAdHV0b3JpYWxcbiAgICogICAyLWludGVyZmFjZX0sIFwiVGhlIG91dG1hc2sgYW5kIGNhcHMgcGFyYW1ldGVyc1wiLlxuICAgKi9cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuQXJjRGlyZWN0ID0gZnVuY3Rpb24obGF0MSwgbG9uMSwgYXppMSwgYTEyLCBvdXRtYXNrKSB7XG4gICAgcmV0dXJuIHRoaXMuR2VuRGlyZWN0KGxhdDEsIGxvbjEsIGF6aTEsIHRydWUsIGExMiwgb3V0bWFzayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IENyZWF0ZSBhIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmUuR2VvZGVzaWNMaW5lXG4gICAqICAgR2VvZGVzaWNMaW5lfSBvYmplY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXQxIHRoZSBsYXRpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvbjEgdGhlIGxvbmdpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGF6aTEgdGhlIGF6aW11dGggYXQgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqICAgZGVncmVlcy5cbiAgICogQHBhcmFtIHtiaXRtYXNrfSBbY2FwcyA9IFNUQU5EQVJEIHwgRElTVEFOQ0VfSU5dIHdoaWNoIGNhcGFiaWxpdGllcyB0b1xuICAgKiAgIGluY2x1ZGUuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZVxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmUuR2VvZGVzaWNMaW5lXG4gICAqICAgR2VvZGVzaWNMaW5lfSBvYmplY3RcbiAgICogQGRlc2NyaXB0aW9uIEZvciBkZXRhaWxzIG9uIHRoZSBjYXBzIHBhcmFtZXRlciwgc2VlIHtAdHV0b3JpYWxcbiAgICogICAyLWludGVyZmFjZX0sIFwiVGhlIG91dG1hc2sgYW5kIGNhcHMgcGFyYW1ldGVyc1wiLlxuICAgKi9cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuTGluZSA9IGZ1bmN0aW9uKGxhdDEsIGxvbjEsIGF6aTEsIGNhcHMpIHtcbiAgICByZXR1cm4gbmV3IGwuR2VvZGVzaWNMaW5lKHRoaXMsIGxhdDEsIGxvbjEsIGF6aTEsIGNhcHMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBEZWZpbmUgYSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lLkdlb2Rlc2ljTGluZVxuICAgKiAgIEdlb2Rlc2ljTGluZX0gaW4gdGVybXMgb2YgdGhlIGRpcmVjdCBnZW9kZXNpYyBwcm9ibGVtIHNwZWNpZmllZCBpbiB0ZXJtc1xuICAgKiAgIG9mIGRpc3RhbmNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0MSB0aGUgbGF0aXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24xIHRoZSBsb25naXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkxIHRoZSBhemltdXRoIGF0IHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiAgIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzMTIgdGhlIGRpc3RhbmNlIGJldHdlZW4gcG9pbnQgMSBhbmQgcG9pbnQgMiAobWV0ZXJzKTsgaXRcbiAgICogICBjYW4gYmUgbmVnYXRpdmUuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW2NhcHMgPSBTVEFOREFSRCB8IERJU1RBTkNFX0lOXSB3aGljaCBjYXBhYmlsaXRpZXMgdG9cbiAgICogICBpbmNsdWRlLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGVcbiAgICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lLkdlb2Rlc2ljTGluZVxuICAgKiAgIEdlb2Rlc2ljTGluZX0gb2JqZWN0XG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgcG9pbnQgMyBvZiB0aGUgR2VvZGVzaWNMaW5lIHRvIGNvcnJlc3BvbmRcbiAgICogICB0byBwb2ludCAyIG9mIHRoZSBkaXJlY3QgZ2VvZGVzaWMgcHJvYmxlbS4gIEZvciBkZXRhaWxzIG9uIHRoZSBjYXBzXG4gICAqICAgcGFyYW1ldGVyLCBzZWUge0B0dXRvcmlhbCAyLWludGVyZmFjZX0sIFwiVGhlIG91dG1hc2sgYW5kIGNhcHNcbiAgICogICBwYXJhbWV0ZXJzXCIuXG4gICAqL1xuICBnLkdlb2Rlc2ljLnByb3RvdHlwZS5EaXJlY3RMaW5lID0gZnVuY3Rpb24obGF0MSwgbG9uMSwgYXppMSwgczEyLCBjYXBzKSB7XG4gICAgcmV0dXJuIHRoaXMuR2VuRGlyZWN0TGluZShsYXQxLCBsb24xLCBhemkxLCBmYWxzZSwgczEyLCBjYXBzKTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgRGVmaW5lIGEge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0dlb2Rlc2ljTGluZS5HZW9kZXNpY0xpbmVcbiAgICogICBHZW9kZXNpY0xpbmV9IGluIHRlcm1zIG9mIHRoZSBkaXJlY3QgZ2VvZGVzaWMgcHJvYmxlbSBzcGVjaWZpZWQgaW4gdGVybXNcbiAgICogICBvZiBhcmMgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0MSB0aGUgbGF0aXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24xIHRoZSBsb25naXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkxIHRoZSBhemltdXRoIGF0IHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiAgIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhMTIgdGhlIGFyYyBsZW5ndGggYmV0d2VlbiBwb2ludCAxIGFuZCBwb2ludCAyIChkZWdyZWVzKTtcbiAgICogICBpdCBjYW4gYmUgbmVnYXRpdmUuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW2NhcHMgPSBTVEFOREFSRCB8IERJU1RBTkNFX0lOXSB3aGljaCBjYXBhYmlsaXRpZXMgdG9cbiAgICogICBpbmNsdWRlLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGVcbiAgICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lLkdlb2Rlc2ljTGluZVxuICAgKiAgIEdlb2Rlc2ljTGluZX0gb2JqZWN0XG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgcG9pbnQgMyBvZiB0aGUgR2VvZGVzaWNMaW5lIHRvIGNvcnJlc3BvbmRcbiAgICogICB0byBwb2ludCAyIG9mIHRoZSBkaXJlY3QgZ2VvZGVzaWMgcHJvYmxlbS4gIEZvciBkZXRhaWxzIG9uIHRoZSBjYXBzXG4gICAqICAgcGFyYW1ldGVyLCBzZWUge0B0dXRvcmlhbCAyLWludGVyZmFjZX0sIFwiVGhlIG91dG1hc2sgYW5kIGNhcHNcbiAgICogICBwYXJhbWV0ZXJzXCIuXG4gICAqL1xuICBnLkdlb2Rlc2ljLnByb3RvdHlwZS5BcmNEaXJlY3RMaW5lID0gZnVuY3Rpb24obGF0MSwgbG9uMSwgYXppMSwgYTEyLCBjYXBzKSB7XG4gICAgcmV0dXJuIHRoaXMuR2VuRGlyZWN0TGluZShsYXQxLCBsb24xLCBhemkxLCB0cnVlLCBhMTIsIGNhcHMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBEZWZpbmUgYSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lLkdlb2Rlc2ljTGluZVxuICAgKiAgIEdlb2Rlc2ljTGluZX0gaW4gdGVybXMgb2YgdGhlIGRpcmVjdCBnZW9kZXNpYyBwcm9ibGVtIHNwZWNpZmllZCBpbiB0ZXJtc1xuICAgKiAgIG9mIGVpdGhlciBkaXN0YW5jZSBvciBhcmMgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0MSB0aGUgbGF0aXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24xIHRoZSBsb25naXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkxIHRoZSBhemltdXRoIGF0IHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiAgIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7Ym9vbH0gYXJjbW9kZSBib29sZWFuIGZsYWcgZGV0ZXJtaW5pbmcgdGhlIG1lYW5pbmcgb2YgdGhlXG4gICAqICAgczEyX2ExMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHMxMl9hMTIgaWYgYXJjbW9kZSBpcyBmYWxzZSwgdGhpcyBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICAgKiAgIHBvaW50IDEgYW5kIHBvaW50IDIgKG1ldGVycyk7IG90aGVyd2lzZSBpdCBpcyB0aGUgYXJjIGxlbmd0aCBiZXR3ZWVuXG4gICAqICAgcG9pbnQgMSBhbmQgcG9pbnQgMiAoZGVncmVlcyk7IGl0IGNhbiBiZSBuZWdhdGl2ZS5cbiAgICogQHBhcmFtIHtiaXRtYXNrfSBbY2FwcyA9IFNUQU5EQVJEIHwgRElTVEFOQ0VfSU5dIHdoaWNoIGNhcGFiaWxpdGllcyB0b1xuICAgKiAgIGluY2x1ZGUuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZVxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmUuR2VvZGVzaWNMaW5lXG4gICAqICAgR2VvZGVzaWNMaW5lfSBvYmplY3RcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gc2V0cyBwb2ludCAzIG9mIHRoZSBHZW9kZXNpY0xpbmUgdG8gY29ycmVzcG9uZFxuICAgKiAgIHRvIHBvaW50IDIgb2YgdGhlIGRpcmVjdCBnZW9kZXNpYyBwcm9ibGVtLiAgRm9yIGRldGFpbHMgb24gdGhlIGNhcHNcbiAgICogICBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsIDItaW50ZXJmYWNlfSwgXCJUaGUgb3V0bWFzayBhbmQgY2Fwc1xuICAgKiAgIHBhcmFtZXRlcnNcIi5cbiAgICovXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLkdlbkRpcmVjdExpbmUgPSBmdW5jdGlvbihsYXQxLCBsb24xLCBhemkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjbW9kZSwgczEyX2ExMiwgY2Fwcykge1xuICAgIHZhciB0O1xuICAgIGlmICghY2FwcykgY2FwcyA9IGcuU1RBTkRBUkQgfCBnLkRJU1RBTkNFX0lOO1xuICAgIC8vIEF1dG9tYXRpY2FsbHkgc3VwcGx5IERJU1RBTkNFX0lOIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghYXJjbW9kZSkgY2FwcyB8PSBnLkRJU1RBTkNFX0lOO1xuICAgIHQgPSBuZXcgbC5HZW9kZXNpY0xpbmUodGhpcywgbGF0MSwgbG9uMSwgYXppMSwgY2Fwcyk7XG4gICAgdC5HZW5TZXREaXN0YW5jZShhcmNtb2RlLCBzMTJfYTEyKTtcbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgRGVmaW5lIGEge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0dlb2Rlc2ljTGluZS5HZW9kZXNpY0xpbmVcbiAgICogICBHZW9kZXNpY0xpbmV9IGluIHRlcm1zIG9mIHRoZSBpbnZlcnNlIGdlb2Rlc2ljIHByb2JsZW0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXQxIHRoZSBsYXRpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvbjEgdGhlIGxvbmdpdHVkZSBvZiB0aGUgZmlyc3QgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdDIgdGhlIGxhdGl0dWRlIG9mIHRoZSBzZWNvbmQgcG9pbnQgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvbjIgdGhlIGxvbmdpdHVkZSBvZiB0aGUgc2Vjb25kIHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW2NhcHMgPSBTVEFOREFSRCB8IERJU1RBTkNFX0lOXSB3aGljaCBjYXBhYmlsaXRpZXMgdG9cbiAgICogICBpbmNsdWRlLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGVcbiAgICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWNMaW5lLkdlb2Rlc2ljTGluZVxuICAgKiAgIEdlb2Rlc2ljTGluZX0gb2JqZWN0XG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIGZ1bmN0aW9uIHNldHMgcG9pbnQgMyBvZiB0aGUgR2VvZGVzaWNMaW5lIHRvIGNvcnJlc3BvbmRcbiAgICogICB0byBwb2ludCAyIG9mIHRoZSBpbnZlcnNlIGdlb2Rlc2ljIHByb2JsZW0uICBGb3IgZGV0YWlscyBvbiB0aGUgY2Fwc1xuICAgKiAgIHBhcmFtZXRlciwgc2VlIHtAdHV0b3JpYWwgMi1pbnRlcmZhY2V9LCBcIlRoZSBvdXRtYXNrIGFuZCBjYXBzXG4gICAqICAgcGFyYW1ldGVyc1wiLlxuICAgKi9cbiAgZy5HZW9kZXNpYy5wcm90b3R5cGUuSW52ZXJzZUxpbmUgPSBmdW5jdGlvbihsYXQxLCBsb24xLCBsYXQyLCBsb24yLCBjYXBzKSB7XG4gICAgdmFyIHIsIHQsIGF6aTE7XG4gICAgaWYgKCFjYXBzKSBjYXBzID0gZy5TVEFOREFSRCB8IGcuRElTVEFOQ0VfSU47XG4gICAgciA9IHRoaXMuSW52ZXJzZUludChsYXQxLCBsb24xLCBsYXQyLCBsb24yLCBnLkFSQyk7XG4gICAgYXppMSA9IG0uYXRhbjJkKHIuc2FscDEsIHIuY2FscDEpO1xuICAgIC8vIEVuc3VyZSB0aGF0IGExMiBjYW4gYmUgY29udmVydGVkIHRvIGEgZGlzdGFuY2VcbiAgICBpZiAoY2FwcyAmIChnLk9VVF9NQVNLICYgZy5ESVNUQU5DRV9JTikpIGNhcHMgfD0gZy5ESVNUQU5DRTtcbiAgICB0ID0gbmV3IGwuR2VvZGVzaWNMaW5lKHRoaXMsIGxhdDEsIGxvbjEsIGF6aTEsIGNhcHMsIHIuc2FscDEsIHIuY2FscDEpO1xuICAgIHQuU2V0QXJjKHIudmFscy5hMTIpO1xuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDcmVhdGUgYSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvUG9seWdvbkFyZWEuUG9seWdvbkFyZWFcbiAgICogICBQb2x5Z29uQXJlYX0gb2JqZWN0LlxuICAgKiBAcGFyYW0ge2Jvb2x9IFtwb2x5bGluZSA9IGZhbHNlXSBpZiB0cnVlIHRoZSBuZXcgUG9seWdvbkFyZWEgb2JqZWN0XG4gICAqICAgZGVzY3JpYmVzIGEgcG9seWxpbmUgaW5zdGVhZCBvZiBhIHBvbHlnb24uXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZVxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9Qb2x5Z29uQXJlYS5Qb2x5Z29uQXJlYVxuICAgKiAgIFBvbHlnb25BcmVhfSBvYmplY3RcbiAgICovXG4gIGcuR2VvZGVzaWMucHJvdG90eXBlLlBvbHlnb24gPSBmdW5jdGlvbihwb2x5bGluZSkge1xuICAgIHJldHVybiBuZXcgcC5Qb2x5Z29uQXJlYSh0aGlzLCBwb2x5bGluZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IGEge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0dlb2Rlc2ljLkdlb2Rlc2ljIEdlb2Rlc2ljfSBvYmplY3RcbiAgICogICBpbml0aWFsaXplZCBmb3IgdGhlIFdHUzg0IGVsbGlwc29pZC5cbiAgICogQGNvbnN0YW50IHtvYmplY3R9XG4gICAqL1xuICBnLldHUzg0ID0gbmV3IGcuR2VvZGVzaWMoYy5XR1M4NC5hLCBjLldHUzg0LmYpO1xufSkoR2VvZ3JhcGhpY0xpYi5HZW9kZXNpYywgR2VvZ3JhcGhpY0xpYi5HZW9kZXNpY0xpbmUsXG4gICBHZW9ncmFwaGljTGliLlBvbHlnb25BcmVhLCBHZW9ncmFwaGljTGliLk1hdGgsIEdlb2dyYXBoaWNMaWIuQ29uc3RhbnRzKTtcblxuLyoqKioqKioqKioqKioqKiogR2VvZGVzaWNMaW5lLmpzICoqKioqKioqKioqKioqKiovXG4vKlxuICogR2VvZGVzaWNMaW5lLmpzXG4gKiBUcmFuc2NyaXB0aW9uIG9mIEdlb2Rlc2ljTGluZS5bY2hdcHAgaW50byBKYXZhU2NyaXB0LlxuICpcbiAqIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIEMrKyBjbGFzcy4gIFRoZSBjb252ZXJzaW9uIGlzIGEgbGl0ZXJhbFxuICogY29udmVyc2lvbiBmcm9tIEMrKy5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtcyBhcmUgZGVyaXZlZCBpblxuICpcbiAqICAgIENoYXJsZXMgRi4gRi4gS2FybmV5LFxuICogICAgQWxnb3JpdGhtcyBmb3IgZ2VvZGVzaWNzLCBKLiBHZW9kZXN5IDg3LCA0My01NSAoMjAxMyk7XG4gKiAgICBodHRwczovL2RvaS5vcmcvMTAuMTAwNy9zMDAxOTAtMDEyLTA1NzgtelxuICogICAgQWRkZW5kYTogaHR0cHM6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLmlvL2dlb2QtYWRkZW5kYS5odG1sXG4gKlxuICogQ29weXJpZ2h0IChjKSBDaGFybGVzIEthcm5leSAoMjAxMS0yMDE5KSA8Y2hhcmxlc0BrYXJuZXkuY29tPiBhbmQgbGljZW5zZWRcbiAqIHVuZGVyIHRoZSBNSVQvWDExIExpY2Vuc2UuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4gKiBodHRwczovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UuaW8vXG4gKi9cblxuLy8gTG9hZCBBRlRFUiBHZW9ncmFwaGljTGliL01hdGguanMsIEdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuanNcblxuKGZ1bmN0aW9uKFxuICBnLFxuICAvKipcbiAgICogQGV4cG9ydHMgR2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmVcbiAgICogQGRlc2NyaXB0aW9uIFNvbHZlIGdlb2Rlc2ljIHByb2JsZW1zIG9uIGEgc2luZ2xlIGdlb2Rlc2ljIGxpbmUgdmlhIHRoZVxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpY0xpbmUuR2VvZGVzaWNMaW5lIEdlb2Rlc2ljTGluZX1cbiAgICogICBjbGFzcy5cbiAgICovXG4gIGwsIG0pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcHJvcGVydHkge251bWJlcn0gYSB0aGUgZXF1YXRvcmlhbCByYWRpdXMgKG1ldGVycykuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmIHRoZSBmbGF0dGVuaW5nLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gbGF0MSB0aGUgaW5pdGlhbCBsYXRpdHVkZSAoZGVncmVlcykuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb24xIHRoZSBpbml0aWFsIGxvbmdpdHVkZSAoZGVncmVlcykuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhemkxIHRoZSBpbml0aWFsIGF6aW11dGggKGRlZ3JlZXMpLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gc2FscDEgdGhlIHNpbmUgb2YgdGhlIGF6aW11dGggYXQgdGhlIGZpcnN0IHBvaW50LlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gY2FscDEgdGhlIGNvc2luZSB0aGUgYXppbXV0aCBhdCB0aGUgZmlyc3QgcG9pbnQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzMTMgdGhlIGRpc3RhbmNlIHRvIHBvaW50IDMgKG1ldGVycykuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhMTMgdGhlIGFyYyBsZW5ndGggdG8gcG9pbnQgMyAoZGVncmVlcykuXG4gICAqIEBwcm9wZXJ0eSB7Yml0bWFza30gY2FwcyB0aGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBvYmplY3QuXG4gICAqIEBzdW1tYXJ5IEluaXRpYWxpemUgYSBHZW9kZXNpY0xpbmUgb2JqZWN0LiAgRm9yIGRldGFpbHMgb24gdGhlIGNhcHNcbiAgICogICBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsIDItaW50ZXJmYWNlfSwgXCJUaGUgb3V0bWFzayBhbmQgY2Fwc1xuICAgKiAgIHBhcmFtZXRlcnNcIi5cbiAgICogQGNsYXNzZGVzYyBQZXJmb3JtcyBnZW9kZXNpYyBjYWxjdWxhdGlvbnMgYWxvbmcgYSBnaXZlbiBnZW9kZXNpYyBsaW5lLlxuICAgKiAgIFRoaXMgb2JqZWN0IGlzIHVzdWFsbHkgaW5zdGFudGlhdGVkIGJ5XG4gICAqICAge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0dlb2Rlc2ljLkdlb2Rlc2ljI0xpbmUgR2VvZGVzaWMuTGluZX0uXG4gICAqICAgVGhlIG1ldGhvZHNcbiAgICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuR2VvZGVzaWMjRGlyZWN0TGluZVxuICAgKiAgIEdlb2Rlc2ljLkRpcmVjdExpbmV9IGFuZFxuICAgKiAgIHtAbGluayBtb2R1bGU6R2VvZ3JhcGhpY0xpYi9HZW9kZXNpYy5HZW9kZXNpYyNJbnZlcnNlTGluZVxuICAgKiAgIEdlb2Rlc2ljLkludmVyc2VMaW5lfSBzZXQgaW4gYWRkaXRpb24gdGhlIHBvc2l0aW9uIG9mIGEgcmVmZXJlbmNlIHBvaW50XG4gICAqICAgMy5cbiAgICogQHBhcmFtIHtvYmplY3R9IGdlb2QgYSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuR2VvZGVzaWNcbiAgICogICBHZW9kZXNpY30gb2JqZWN0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0MSB0aGUgbGF0aXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24xIHRoZSBsb25naXR1ZGUgb2YgdGhlIGZpcnN0IHBvaW50IGluIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkxIHRoZSBhemltdXRoIGF0IHRoZSBmaXJzdCBwb2ludCBpbiBkZWdyZWVzLlxuICAgKiBAcGFyYW0ge2JpdG1hc2t9IFtjYXBzID0gU1RBTkRBUkQgfCBESVNUQU5DRV9JTl0gd2hpY2ggY2FwYWJpbGl0aWVzIHRvXG4gICAqICAgaW5jbHVkZTsgTEFUSVRVREUgfCBBWklNVVRIIGFyZSBhbHdheXMgaW5jbHVkZWQuXG4gICAqL1xuICBsLkdlb2Rlc2ljTGluZSA9IGZ1bmN0aW9uKGdlb2QsIGxhdDEsIGxvbjEsIGF6aTEsIGNhcHMsIHNhbHAxLCBjYWxwMSkge1xuICAgIHZhciB0LCBjYmV0MSwgc2JldDEsIGVwcywgcywgYztcbiAgICBpZiAoIWNhcHMpIGNhcHMgPSBnLlNUQU5EQVJEIHwgZy5ESVNUQU5DRV9JTjtcblxuICAgIHRoaXMuYSA9IGdlb2QuYTtcbiAgICB0aGlzLmYgPSBnZW9kLmY7XG4gICAgdGhpcy5fYiA9IGdlb2QuX2I7XG4gICAgdGhpcy5fYzIgPSBnZW9kLl9jMjtcbiAgICB0aGlzLl9mMSA9IGdlb2QuX2YxO1xuICAgIHRoaXMuY2FwcyA9IGNhcHMgfCBnLkxBVElUVURFIHwgZy5BWklNVVRIIHwgZy5MT05HX1VOUk9MTDtcblxuICAgIHRoaXMubGF0MSA9IG0uTGF0Rml4KGxhdDEpO1xuICAgIHRoaXMubG9uMSA9IGxvbjE7XG4gICAgaWYgKHR5cGVvZiBzYWxwMSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNhbHAxID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5hemkxID0gbS5BbmdOb3JtYWxpemUoYXppMSk7XG4gICAgICB0ID0gbS5zaW5jb3NkKG0uQW5nUm91bmQodGhpcy5hemkxKSk7IHRoaXMuc2FscDEgPSB0LnM7IHRoaXMuY2FscDEgPSB0LmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXppMSA9IGF6aTE7IHRoaXMuc2FscDEgPSBzYWxwMTsgdGhpcy5jYWxwMSA9IGNhbHAxO1xuICAgIH1cbiAgICB0ID0gbS5zaW5jb3NkKG0uQW5nUm91bmQodGhpcy5sYXQxKSk7IHNiZXQxID0gdGhpcy5fZjEgKiB0LnM7IGNiZXQxID0gdC5jO1xuICAgIC8vIG5vcm0oc2JldDEsIGNiZXQxKTtcbiAgICB0ID0gbS5oeXBvdChzYmV0MSwgY2JldDEpOyBzYmV0MSAvPSB0OyBjYmV0MSAvPSB0O1xuICAgIC8vIEVuc3VyZSBjYmV0MSA9ICtlcHNpbG9uIGF0IHBvbGVzXG4gICAgY2JldDEgPSBNYXRoLm1heChnLnRpbnlfLCBjYmV0MSk7XG4gICAgdGhpcy5fZG4xID0gTWF0aC5zcXJ0KDEgKyBnZW9kLl9lcDIgKiBtLnNxKHNiZXQxKSk7XG5cbiAgICAvLyBFdmFsdWF0ZSBhbHAwIGZyb20gc2luKGFscDEpICogY29zKGJldDEpID0gc2luKGFscDApLFxuICAgIHRoaXMuX3NhbHAwID0gdGhpcy5zYWxwMSAqIGNiZXQxOyAvLyBhbHAwIGluIFswLCBwaS8yIC0gfGJldDF8XVxuICAgIC8vIEFsdDogY2FscDAgPSBoeXBvdChzYmV0MSwgY2FscDEgKiBjYmV0MSkuICBUaGUgZm9sbG93aW5nXG4gICAgLy8gaXMgc2xpZ2h0bHkgYmV0dGVyIChjb25zaWRlciB0aGUgY2FzZSBzYWxwMSA9IDApLlxuICAgIHRoaXMuX2NhbHAwID0gbS5oeXBvdCh0aGlzLmNhbHAxLCB0aGlzLnNhbHAxICogc2JldDEpO1xuICAgIC8vIEV2YWx1YXRlIHNpZyB3aXRoIHRhbihiZXQxKSA9IHRhbihzaWcxKSAqIGNvcyhhbHAxKS5cbiAgICAvLyBzaWcgPSAwIGlzIG5lYXJlc3Qgbm9ydGh3YXJkIGNyb3NzaW5nIG9mIGVxdWF0b3IuXG4gICAgLy8gV2l0aCBiZXQxID0gMCwgYWxwMSA9IHBpLzIsIHdlIGhhdmUgc2lnMSA9IDAgKGVxdWF0b3JpYWwgbGluZSkuXG4gICAgLy8gV2l0aCBiZXQxID0gIHBpLzIsIGFscDEgPSAtcGksIHNpZzEgPSAgcGkvMlxuICAgIC8vIFdpdGggYmV0MSA9IC1waS8yLCBhbHAxID0gIDAgLCBzaWcxID0gLXBpLzJcbiAgICAvLyBFdmFsdWF0ZSBvbWcxIHdpdGggdGFuKG9tZzEpID0gc2luKGFscDApICogdGFuKHNpZzEpLlxuICAgIC8vIFdpdGggYWxwMCBpbiAoMCwgcGkvMl0sIHF1YWRyYW50cyBmb3Igc2lnIGFuZCBvbWcgY29pbmNpZGUuXG4gICAgLy8gTm8gYXRhbjIoMCwwKSBhbWJpZ3VpdHkgYXQgcG9sZXMgc2luY2UgY2JldDEgPSArZXBzaWxvbi5cbiAgICAvLyBXaXRoIGFscDAgPSAwLCBvbWcxID0gMCBmb3IgYWxwMSA9IDAsIG9tZzEgPSBwaSBmb3IgYWxwMSA9IHBpLlxuICAgIHRoaXMuX3NzaWcxID0gc2JldDE7IHRoaXMuX3NvbWcxID0gdGhpcy5fc2FscDAgKiBzYmV0MTtcbiAgICB0aGlzLl9jc2lnMSA9IHRoaXMuX2NvbWcxID1cbiAgICAgIHNiZXQxICE9PSAwIHx8IHRoaXMuY2FscDEgIT09IDAgPyBjYmV0MSAqIHRoaXMuY2FscDEgOiAxO1xuICAgIC8vIG5vcm0odGhpcy5fc3NpZzEsIHRoaXMuX2NzaWcxKTsgLy8gc2lnMSBpbiAoLXBpLCBwaV1cbiAgICB0ID0gbS5oeXBvdCh0aGlzLl9zc2lnMSwgdGhpcy5fY3NpZzEpO1xuICAgIHRoaXMuX3NzaWcxIC89IHQ7IHRoaXMuX2NzaWcxIC89IHQ7XG4gICAgLy8gbm9ybSh0aGlzLl9zb21nMSwgdGhpcy5fY29tZzEpOyAtLSBkb24ndCBuZWVkIHRvIG5vcm1hbGl6ZSFcblxuICAgIHRoaXMuX2syID0gbS5zcSh0aGlzLl9jYWxwMCkgKiBnZW9kLl9lcDI7XG4gICAgZXBzID0gdGhpcy5fazIgLyAoMiAqICgxICsgTWF0aC5zcXJ0KDEgKyB0aGlzLl9rMikpICsgdGhpcy5fazIpO1xuXG4gICAgaWYgKHRoaXMuY2FwcyAmIGcuQ0FQX0MxKSB7XG4gICAgICB0aGlzLl9BMW0xID0gZy5BMW0xZihlcHMpO1xuICAgICAgdGhpcy5fQzFhID0gbmV3IEFycmF5KGcubkMxXyArIDEpO1xuICAgICAgZy5DMWYoZXBzLCB0aGlzLl9DMWEpO1xuICAgICAgdGhpcy5fQjExID0gZy5TaW5Db3NTZXJpZXModHJ1ZSwgdGhpcy5fc3NpZzEsIHRoaXMuX2NzaWcxLCB0aGlzLl9DMWEpO1xuICAgICAgcyA9IE1hdGguc2luKHRoaXMuX0IxMSk7IGMgPSBNYXRoLmNvcyh0aGlzLl9CMTEpO1xuICAgICAgLy8gdGF1MSA9IHNpZzEgKyBCMTFcbiAgICAgIHRoaXMuX3N0YXUxID0gdGhpcy5fc3NpZzEgKiBjICsgdGhpcy5fY3NpZzEgKiBzO1xuICAgICAgdGhpcy5fY3RhdTEgPSB0aGlzLl9jc2lnMSAqIGMgLSB0aGlzLl9zc2lnMSAqIHM7XG4gICAgICAvLyBOb3QgbmVjZXNzYXJ5IGJlY2F1c2UgQzFwYSByZXZlcnRzIEMxYVxuICAgICAgLy8gICAgX0IxMSA9IC1TaW5Db3NTZXJpZXModHJ1ZSwgX3N0YXUxLCBfY3RhdTEsIF9DMXBhKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYXBzICYgZy5DQVBfQzFwKSB7XG4gICAgICB0aGlzLl9DMXBhID0gbmV3IEFycmF5KGcubkMxcF8gKyAxKTtcbiAgICAgIGcuQzFwZihlcHMsIHRoaXMuX0MxcGEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNhcHMgJiBnLkNBUF9DMikge1xuICAgICAgdGhpcy5fQTJtMSA9IGcuQTJtMWYoZXBzKTtcbiAgICAgIHRoaXMuX0MyYSA9IG5ldyBBcnJheShnLm5DMl8gKyAxKTtcbiAgICAgIGcuQzJmKGVwcywgdGhpcy5fQzJhKTtcbiAgICAgIHRoaXMuX0IyMSA9IGcuU2luQ29zU2VyaWVzKHRydWUsIHRoaXMuX3NzaWcxLCB0aGlzLl9jc2lnMSwgdGhpcy5fQzJhKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYXBzICYgZy5DQVBfQzMpIHtcbiAgICAgIHRoaXMuX0MzYSA9IG5ldyBBcnJheShnLm5DM18pO1xuICAgICAgZ2VvZC5DM2YoZXBzLCB0aGlzLl9DM2EpO1xuICAgICAgdGhpcy5fQTNjID0gLXRoaXMuZiAqIHRoaXMuX3NhbHAwICogZ2VvZC5BM2YoZXBzKTtcbiAgICAgIHRoaXMuX0IzMSA9IGcuU2luQ29zU2VyaWVzKHRydWUsIHRoaXMuX3NzaWcxLCB0aGlzLl9jc2lnMSwgdGhpcy5fQzNhKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYXBzICYgZy5DQVBfQzQpIHtcbiAgICAgIHRoaXMuX0M0YSA9IG5ldyBBcnJheShnLm5DNF8pOyAvLyBhbGwgdGhlIGVsZW1lbnRzIG9mIF9DNGEgYXJlIHVzZWRcbiAgICAgIGdlb2QuQzRmKGVwcywgdGhpcy5fQzRhKTtcbiAgICAgIC8vIE11bHRpcGxpZXIgPSBhXjIgKiBlXjIgKiBjb3MoYWxwaGEwKSAqIHNpbihhbHBoYTApXG4gICAgICB0aGlzLl9BNCA9IG0uc3EodGhpcy5hKSAqIHRoaXMuX2NhbHAwICogdGhpcy5fc2FscDAgKiBnZW9kLl9lMjtcbiAgICAgIHRoaXMuX0I0MSA9IGcuU2luQ29zU2VyaWVzKGZhbHNlLCB0aGlzLl9zc2lnMSwgdGhpcy5fY3NpZzEsIHRoaXMuX0M0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5hMTMgPSB0aGlzLnMxMyA9IE51bWJlci5OYU47XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEZpbmQgdGhlIHBvc2l0aW9uIG9uIHRoZSBsaW5lIChnZW5lcmFsIGNhc2UpLlxuICAgKiBAcGFyYW0ge2Jvb2x9IGFyY21vZGUgaXMgdGhlIG5leHQgcGFyYW1ldGVyIGFuIGFyYyBsZW5ndGg/XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzMTJfYTEyIHRoZSAoYXJjbW9kZSA/IGFyYyBsZW5ndGggOiBkaXN0YW5jZSkgZnJvbSB0aGVcbiAgICogICBmaXJzdCBwb2ludCB0byB0aGUgc2Vjb25kIGluIChhcmNtb2RlID8gZGVncmVlcyA6IG1ldGVycykuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW291dG1hc2sgPSBTVEFOREFSRF0gd2hpY2ggcmVzdWx0cyB0byBpbmNsdWRlOyB0aGlzIGlzXG4gICAqICAgc3ViamVjdCB0byB0aGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSByZXF1ZXN0ZWQgcmVzdWx0cy5cbiAgICogQGRlc2NyaXB0aW9uIFRoZSBsYXQxLCBsb24xLCBhemkxLCBhbmQgYTEyIGZpZWxkcyBvZiB0aGUgcmVzdWx0IGFyZVxuICAgKiAgIGFsd2F5cyBzZXQ7IHMxMiBpcyBpbmNsdWRlZCBpZiBhcmNtb2RlIGlzIGZhbHNlLiAgRm9yIGRldGFpbHMgb24gdGhlXG4gICAqICAgb3V0bWFzayBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsIDItaW50ZXJmYWNlfSwgXCJUaGUgb3V0bWFzayBhbmQgY2Fwc1xuICAgKiAgIHBhcmFtZXRlcnNcIi5cbiAgICovXG4gIGwuR2VvZGVzaWNMaW5lLnByb3RvdHlwZS5HZW5Qb3NpdGlvbiA9IGZ1bmN0aW9uKGFyY21vZGUsIHMxMl9hMTIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dG1hc2spIHtcbiAgICB2YXIgdmFscyA9IHt9LFxuICAgICAgICBzaWcxMiwgc3NpZzEyLCBjc2lnMTIsIEIxMiwgQUIxLCBzc2lnMiwgY3NpZzIsIHRhdTEyLCBzLCBjLCBzZXJyLFxuICAgICAgICBvbWcxMiwgbGFtMTIsIGxvbjEyLCBFLCBzYmV0MiwgY2JldDIsIHNvbWcyLCBjb21nMiwgc2FscDIsIGNhbHAyLCBkbjIsXG4gICAgICAgIEIyMiwgQUIyLCBKMTIsIHQsIEI0Miwgc2FscDEyLCBjYWxwMTI7XG4gICAgaWYgKCFvdXRtYXNrKSBvdXRtYXNrID0gZy5TVEFOREFSRDtcbiAgICBlbHNlIGlmIChvdXRtYXNrID09PSBnLkxPTkdfVU5ST0xMKSBvdXRtYXNrIHw9IGcuU1RBTkRBUkQ7XG4gICAgb3V0bWFzayAmPSB0aGlzLmNhcHMgJiBnLk9VVF9NQVNLO1xuICAgIHZhbHMubGF0MSA9IHRoaXMubGF0MTsgdmFscy5hemkxID0gdGhpcy5hemkxO1xuICAgIHZhbHMubG9uMSA9IG91dG1hc2sgJiBnLkxPTkdfVU5ST0xMID9cbiAgICAgIHRoaXMubG9uMSA6IG0uQW5nTm9ybWFsaXplKHRoaXMubG9uMSk7XG4gICAgaWYgKGFyY21vZGUpXG4gICAgICB2YWxzLmExMiA9IHMxMl9hMTI7XG4gICAgZWxzZVxuICAgICAgdmFscy5zMTIgPSBzMTJfYTEyO1xuICAgIGlmICghKCBhcmNtb2RlIHx8ICh0aGlzLmNhcHMgJiBnLkRJU1RBTkNFX0lOICYgZy5PVVRfTUFTSykgKSkge1xuICAgICAgLy8gVW5pbml0aWFsaXplZCBvciBpbXBvc3NpYmxlIGRpc3RhbmNlIGNhbGN1bGF0aW9uIHJlcXVlc3RlZFxuICAgICAgdmFscy5hMTIgPSBOdW1iZXIuTmFOO1xuICAgICAgcmV0dXJuIHZhbHM7XG4gICAgfVxuXG4gICAgLy8gQXZvaWQgd2FybmluZyBhYm91dCB1bmluaXRpYWxpemVkIEIxMi5cbiAgICBCMTIgPSAwOyBBQjEgPSAwO1xuICAgIGlmIChhcmNtb2RlKSB7XG4gICAgICAvLyBJbnRlcnByZXQgczEyX2ExMiBhcyBzcGhlcmljYWwgYXJjIGxlbmd0aFxuICAgICAgc2lnMTIgPSBzMTJfYTEyICogbS5kZWdyZWU7XG4gICAgICB0ID0gbS5zaW5jb3NkKHMxMl9hMTIpOyBzc2lnMTIgPSB0LnM7IGNzaWcxMiA9IHQuYztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW50ZXJwcmV0IHMxMl9hMTIgYXMgZGlzdGFuY2VcbiAgICAgIHRhdTEyID0gczEyX2ExMiAvICh0aGlzLl9iICogKDEgKyB0aGlzLl9BMW0xKSk7XG4gICAgICBzID0gTWF0aC5zaW4odGF1MTIpO1xuICAgICAgYyA9IE1hdGguY29zKHRhdTEyKTtcbiAgICAgIC8vIHRhdTIgPSB0YXUxICsgdGF1MTJcbiAgICAgIEIxMiA9IC1nLlNpbkNvc1Nlcmllcyh0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXUxICogYyArIHRoaXMuX2N0YXUxICogcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdGF1MSAqIGMgLSB0aGlzLl9zdGF1MSAqIHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fQzFwYSk7XG4gICAgICBzaWcxMiA9IHRhdTEyIC0gKEIxMiAtIHRoaXMuX0IxMSk7XG4gICAgICBzc2lnMTIgPSBNYXRoLnNpbihzaWcxMik7IGNzaWcxMiA9IE1hdGguY29zKHNpZzEyKTtcbiAgICAgIGlmIChNYXRoLmFicyh0aGlzLmYpID4gMC4wMSkge1xuICAgICAgICAvLyBSZXZlcnRlZCBkaXN0YW5jZSBzZXJpZXMgaXMgaW5hY2N1cmF0ZSBmb3IgfGZ8ID4gMS8xMDAsIHNvIGNvcnJlY3RcbiAgICAgICAgLy8gc2lnMTIgd2l0aCAxIE5ld3RvbiBpdGVyYXRpb24uICBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3dzIHRoZVxuICAgICAgICAvLyBhcHByb3hpbWF0ZSBtYXhpbXVtIGVycm9yIGZvciBhID0gV0dTX2EoKSBhbmQgdmFyaW91cyBmIHJlbGF0aXZlIHRvXG4gICAgICAgIC8vIEdlb2Rlc2ljRXhhY3QuXG4gICAgICAgIC8vICAgICBlcnJpID0gdGhlIGVycm9yIGluIHRoZSBpbnZlcnNlIHNvbHV0aW9uIChubSlcbiAgICAgICAgLy8gICAgIGVycmQgPSB0aGUgZXJyb3IgaW4gdGhlIGRpcmVjdCBzb2x1dGlvbiAoc2VyaWVzIG9ubHkpIChubSlcbiAgICAgICAgLy8gICAgIGVycmRhID0gdGhlIGVycm9yIGluIHRoZSBkaXJlY3Qgc29sdXRpb25cbiAgICAgICAgLy8gICAgICAgICAgICAgKHNlcmllcyArIDEgTmV3dG9uKSAobm0pXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgIGYgICAgIGVycmkgIGVycmQgZXJyZGFcbiAgICAgICAgLy8gICAgIC0xLzUgICAgMTJlNiAxLjJlOSAgNjllNlxuICAgICAgICAvLyAgICAgLTEvMTAgIDEyM2UzICAxMmU2IDc2NWUzXG4gICAgICAgIC8vICAgICAtMS8yMCAgIDExMTAgMTA4ZTMgIDcxNTVcbiAgICAgICAgLy8gICAgIC0xLzUwICAxOC42MyAyMDAuOSAyNy4xMlxuICAgICAgICAvLyAgICAgLTEvMTAwIDE4LjYzIDIzLjc4IDIzLjM3XG4gICAgICAgIC8vICAgICAtMS8xNTAgMTguNjMgMjEuMDUgMjAuMjZcbiAgICAgICAgLy8gICAgICAxLzE1MCAyMi4zNSAyNC43MyAyNS44M1xuICAgICAgICAvLyAgICAgIDEvMTAwIDIyLjM1IDI1LjAzIDI1LjMxXG4gICAgICAgIC8vICAgICAgMS81MCAgMjkuODAgMjMxLjkgMzAuNDRcbiAgICAgICAgLy8gICAgICAxLzIwICAgNTM3NiAxNDZlMyAgMTBlM1xuICAgICAgICAvLyAgICAgIDEvMTAgIDgyOWUzICAyMmU2IDEuNWU2XG4gICAgICAgIC8vICAgICAgMS81ICAgMTU3ZTYgMy44ZTkgMjgwZTZcbiAgICAgICAgc3NpZzIgPSB0aGlzLl9zc2lnMSAqIGNzaWcxMiArIHRoaXMuX2NzaWcxICogc3NpZzEyO1xuICAgICAgICBjc2lnMiA9IHRoaXMuX2NzaWcxICogY3NpZzEyIC0gdGhpcy5fc3NpZzEgKiBzc2lnMTI7XG4gICAgICAgIEIxMiA9IGcuU2luQ29zU2VyaWVzKHRydWUsIHNzaWcyLCBjc2lnMiwgdGhpcy5fQzFhKTtcbiAgICAgICAgc2VyciA9ICgxICsgdGhpcy5fQTFtMSkgKiAoc2lnMTIgKyAoQjEyIC0gdGhpcy5fQjExKSkgLVxuICAgICAgICAgIHMxMl9hMTIgLyB0aGlzLl9iO1xuICAgICAgICBzaWcxMiA9IHNpZzEyIC0gc2VyciAvIE1hdGguc3FydCgxICsgdGhpcy5fazIgKiBtLnNxKHNzaWcyKSk7XG4gICAgICAgIHNzaWcxMiA9IE1hdGguc2luKHNpZzEyKTsgY3NpZzEyID0gTWF0aC5jb3Moc2lnMTIpO1xuICAgICAgICAvLyBVcGRhdGUgQjEyIGJlbG93XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2lnMiA9IHNpZzEgKyBzaWcxMlxuICAgIHNzaWcyID0gdGhpcy5fc3NpZzEgKiBjc2lnMTIgKyB0aGlzLl9jc2lnMSAqIHNzaWcxMjtcbiAgICBjc2lnMiA9IHRoaXMuX2NzaWcxICogY3NpZzEyIC0gdGhpcy5fc3NpZzEgKiBzc2lnMTI7XG4gICAgZG4yID0gTWF0aC5zcXJ0KDEgKyB0aGlzLl9rMiAqIG0uc3Eoc3NpZzIpKTtcbiAgICBpZiAob3V0bWFzayAmIChnLkRJU1RBTkNFIHwgZy5SRURVQ0VETEVOR1RIIHwgZy5HRU9ERVNJQ1NDQUxFKSkge1xuICAgICAgaWYgKGFyY21vZGUgfHwgTWF0aC5hYnModGhpcy5mKSA+IDAuMDEpXG4gICAgICAgIEIxMiA9IGcuU2luQ29zU2VyaWVzKHRydWUsIHNzaWcyLCBjc2lnMiwgdGhpcy5fQzFhKTtcbiAgICAgIEFCMSA9ICgxICsgdGhpcy5fQTFtMSkgKiAoQjEyIC0gdGhpcy5fQjExKTtcbiAgICB9XG4gICAgLy8gc2luKGJldDIpID0gY29zKGFscDApICogc2luKHNpZzIpXG4gICAgc2JldDIgPSB0aGlzLl9jYWxwMCAqIHNzaWcyO1xuICAgIC8vIEFsdDogY2JldDIgPSBoeXBvdChjc2lnMiwgc2FscDAgKiBzc2lnMik7XG4gICAgY2JldDIgPSBtLmh5cG90KHRoaXMuX3NhbHAwLCB0aGlzLl9jYWxwMCAqIGNzaWcyKTtcbiAgICBpZiAoY2JldDIgPT09IDApXG4gICAgICAvLyBJLmUuLCBzYWxwMCA9IDAsIGNzaWcyID0gMC4gIEJyZWFrIHRoZSBkZWdlbmVyYWN5IGluIHRoaXMgY2FzZVxuICAgICAgY2JldDIgPSBjc2lnMiA9IGcudGlueV87XG4gICAgLy8gdGFuKGFscDApID0gY29zKHNpZzIpKnRhbihhbHAyKVxuICAgIHNhbHAyID0gdGhpcy5fc2FscDA7IGNhbHAyID0gdGhpcy5fY2FscDAgKiBjc2lnMjsgLy8gTm8gbmVlZCB0byBub3JtYWxpemVcblxuICAgIGlmIChhcmNtb2RlICYmIChvdXRtYXNrICYgZy5ESVNUQU5DRSkpXG4gICAgICB2YWxzLnMxMiA9IHRoaXMuX2IgKiAoKDEgKyB0aGlzLl9BMW0xKSAqIHNpZzEyICsgQUIxKTtcblxuICAgIGlmIChvdXRtYXNrICYgZy5MT05HSVRVREUpIHtcbiAgICAgIC8vIHRhbihvbWcyKSA9IHNpbihhbHAwKSAqIHRhbihzaWcyKVxuICAgICAgc29tZzIgPSB0aGlzLl9zYWxwMCAqIHNzaWcyOyBjb21nMiA9IGNzaWcyOyAvLyBObyBuZWVkIHRvIG5vcm1hbGl6ZVxuICAgICAgRSA9IG0uY29weXNpZ24oMSwgdGhpcy5fc2FscDApO1xuICAgICAgLy8gb21nMTIgPSBvbWcyIC0gb21nMVxuICAgICAgb21nMTIgPSBvdXRtYXNrICYgZy5MT05HX1VOUk9MTCA/XG4gICAgICAgIEUgKiAoc2lnMTIgLVxuICAgICAgICAgICAgIChNYXRoLmF0YW4yKHNzaWcyLCBjc2lnMikgLVxuICAgICAgICAgICAgICBNYXRoLmF0YW4yKHRoaXMuX3NzaWcxLCB0aGlzLl9jc2lnMSkpICtcbiAgICAgICAgICAgICAoTWF0aC5hdGFuMihFICogc29tZzIsIGNvbWcyKSAtXG4gICAgICAgICAgICAgIE1hdGguYXRhbjIoRSAqIHRoaXMuX3NvbWcxLCB0aGlzLl9jb21nMSkpKSA6XG4gICAgICAgIE1hdGguYXRhbjIoc29tZzIgKiB0aGlzLl9jb21nMSAtIGNvbWcyICogdGhpcy5fc29tZzEsXG4gICAgICAgICAgICAgICAgICAgICBjb21nMiAqIHRoaXMuX2NvbWcxICsgc29tZzIgKiB0aGlzLl9zb21nMSk7XG4gICAgICBsYW0xMiA9IG9tZzEyICsgdGhpcy5fQTNjICpcbiAgICAgICAgKCBzaWcxMiArIChnLlNpbkNvc1Nlcmllcyh0cnVlLCBzc2lnMiwgY3NpZzIsIHRoaXMuX0MzYSkgLVxuICAgICAgICAgICAgICAgICAgIHRoaXMuX0IzMSkpO1xuICAgICAgbG9uMTIgPSBsYW0xMiAvIG0uZGVncmVlO1xuICAgICAgdmFscy5sb24yID0gb3V0bWFzayAmIGcuTE9OR19VTlJPTEwgPyB0aGlzLmxvbjEgKyBsb24xMiA6XG4gICAgICAgIG0uQW5nTm9ybWFsaXplKG0uQW5nTm9ybWFsaXplKHRoaXMubG9uMSkgKyBtLkFuZ05vcm1hbGl6ZShsb24xMikpO1xuICAgIH1cblxuICAgIGlmIChvdXRtYXNrICYgZy5MQVRJVFVERSlcbiAgICAgIHZhbHMubGF0MiA9IG0uYXRhbjJkKHNiZXQyLCB0aGlzLl9mMSAqIGNiZXQyKTtcblxuICAgIGlmIChvdXRtYXNrICYgZy5BWklNVVRIKVxuICAgICAgdmFscy5hemkyID0gbS5hdGFuMmQoc2FscDIsIGNhbHAyKTtcblxuICAgIGlmIChvdXRtYXNrICYgKGcuUkVEVUNFRExFTkdUSCB8IGcuR0VPREVTSUNTQ0FMRSkpIHtcbiAgICAgIEIyMiA9IGcuU2luQ29zU2VyaWVzKHRydWUsIHNzaWcyLCBjc2lnMiwgdGhpcy5fQzJhKTtcbiAgICAgIEFCMiA9ICgxICsgdGhpcy5fQTJtMSkgKiAoQjIyIC0gdGhpcy5fQjIxKTtcbiAgICAgIEoxMiA9ICh0aGlzLl9BMW0xIC0gdGhpcy5fQTJtMSkgKiBzaWcxMiArIChBQjEgLSBBQjIpO1xuICAgICAgaWYgKG91dG1hc2sgJiBnLlJFRFVDRURMRU5HVEgpXG4gICAgICAgIC8vIEFkZCBwYXJlbnMgYXJvdW5kIChfY3NpZzEgKiBzc2lnMikgYW5kIChfc3NpZzEgKiBjc2lnMikgdG8gZW5zdXJlXG4gICAgICAgIC8vIGFjY3VyYXRlIGNhbmNlbGxhdGlvbiBpbiB0aGUgY2FzZSBvZiBjb2luY2lkZW50IHBvaW50cy5cbiAgICAgICAgdmFscy5tMTIgPSB0aGlzLl9iICogKCggICAgICBkbjIgKiAodGhpcy5fY3NpZzEgKiBzc2lnMikgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RuMSAqICh0aGlzLl9zc2lnMSAqIGNzaWcyKSkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3NpZzEgKiBjc2lnMiAqIEoxMik7XG4gICAgICBpZiAob3V0bWFzayAmIGcuR0VPREVTSUNTQ0FMRSkge1xuICAgICAgICB0ID0gdGhpcy5fazIgKiAoc3NpZzIgLSB0aGlzLl9zc2lnMSkgKiAoc3NpZzIgKyB0aGlzLl9zc2lnMSkgL1xuICAgICAgICAgICh0aGlzLl9kbjEgKyBkbjIpO1xuICAgICAgICB2YWxzLk0xMiA9IGNzaWcxMiArXG4gICAgICAgICAgKHQgKiBzc2lnMiAtIGNzaWcyICogSjEyKSAqIHRoaXMuX3NzaWcxIC8gdGhpcy5fZG4xO1xuICAgICAgICB2YWxzLk0yMSA9IGNzaWcxMiAtXG4gICAgICAgICAgKHQgKiB0aGlzLl9zc2lnMSAtIHRoaXMuX2NzaWcxICogSjEyKSAqIHNzaWcyIC8gZG4yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvdXRtYXNrICYgZy5BUkVBKSB7XG4gICAgICBCNDIgPSBnLlNpbkNvc1NlcmllcyhmYWxzZSwgc3NpZzIsIGNzaWcyLCB0aGlzLl9DNGEpO1xuICAgICAgaWYgKHRoaXMuX2NhbHAwID09PSAwIHx8IHRoaXMuX3NhbHAwID09PSAwKSB7XG4gICAgICAgIC8vIGFscDEyID0gYWxwMiAtIGFscDEsIHVzZWQgaW4gYXRhbjIgc28gbm8gbmVlZCB0byBub3JtYWxpemVcbiAgICAgICAgc2FscDEyID0gc2FscDIgKiB0aGlzLmNhbHAxIC0gY2FscDIgKiB0aGlzLnNhbHAxO1xuICAgICAgICBjYWxwMTIgPSBjYWxwMiAqIHRoaXMuY2FscDEgKyBzYWxwMiAqIHRoaXMuc2FscDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0YW4oYWxwKSA9IHRhbihhbHAwKSAqIHNlYyhzaWcpXG4gICAgICAgIC8vIHRhbihhbHAyLWFscDEpID0gKHRhbihhbHAyKSAtdGFuKGFscDEpKSAvICh0YW4oYWxwMikqdGFuKGFscDEpKzEpXG4gICAgICAgIC8vID0gY2FscDAgKiBzYWxwMCAqIChjc2lnMS1jc2lnMikgLyAoc2FscDBeMiArIGNhbHAwXjIgKiBjc2lnMSpjc2lnMilcbiAgICAgICAgLy8gSWYgY3NpZzEyID4gMCwgd3JpdGVcbiAgICAgICAgLy8gICBjc2lnMSAtIGNzaWcyID0gc3NpZzEyICogKGNzaWcxICogc3NpZzEyIC8gKDEgKyBjc2lnMTIpICsgc3NpZzEpXG4gICAgICAgIC8vIGVsc2VcbiAgICAgICAgLy8gICBjc2lnMSAtIGNzaWcyID0gY3NpZzEgKiAoMSAtIGNzaWcxMikgKyBzc2lnMTIgKiBzc2lnMVxuICAgICAgICAvLyBObyBuZWVkIHRvIG5vcm1hbGl6ZVxuICAgICAgICBzYWxwMTIgPSB0aGlzLl9jYWxwMCAqIHRoaXMuX3NhbHAwICpcbiAgICAgICAgICAoY3NpZzEyIDw9IDAgPyB0aGlzLl9jc2lnMSAqICgxIC0gY3NpZzEyKSArIHNzaWcxMiAqIHRoaXMuX3NzaWcxIDpcbiAgICAgICAgICAgc3NpZzEyICogKHRoaXMuX2NzaWcxICogc3NpZzEyIC8gKDEgKyBjc2lnMTIpICsgdGhpcy5fc3NpZzEpKTtcbiAgICAgICAgY2FscDEyID0gbS5zcSh0aGlzLl9zYWxwMCkgKyBtLnNxKHRoaXMuX2NhbHAwKSAqIHRoaXMuX2NzaWcxICogY3NpZzI7XG4gICAgICB9XG4gICAgICB2YWxzLlMxMiA9IHRoaXMuX2MyICogTWF0aC5hdGFuMihzYWxwMTIsIGNhbHAxMikgK1xuICAgICAgICB0aGlzLl9BNCAqIChCNDIgLSB0aGlzLl9CNDEpO1xuICAgIH1cblxuICAgIGlmICghYXJjbW9kZSlcbiAgICAgIHZhbHMuYTEyID0gc2lnMTIgLyBtLmRlZ3JlZTtcbiAgICByZXR1cm4gdmFscztcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgRmluZCB0aGUgcG9zaXRpb24gb24gdGhlIGxpbmUgZ2l2ZW4gczEyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gczEyIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBmaXJzdCBwb2ludCB0byB0aGUgc2Vjb25kIGluXG4gICAqICAgbWV0ZXJzLlxuICAgKiBAcGFyYW0ge2JpdG1hc2t9IFtvdXRtYXNrID0gU1RBTkRBUkRdIHdoaWNoIHJlc3VsdHMgdG8gaW5jbHVkZTsgdGhpcyBpc1xuICAgKiAgIHN1YmplY3QgdG8gdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgcmVxdWVzdGVkIHJlc3VsdHMuXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgbGF0MSwgbG9uMSwgYXppMSwgczEyLCBhbmQgYTEyIGZpZWxkcyBvZiB0aGUgcmVzdWx0IGFyZVxuICAgKiAgIGFsd2F5cyBzZXQ7IHMxMiBpcyBpbmNsdWRlZCBpZiBhcmNtb2RlIGlzIGZhbHNlLiAgRm9yIGRldGFpbHMgb24gdGhlXG4gICAqICAgb3V0bWFzayBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsIDItaW50ZXJmYWNlfSwgXCJUaGUgb3V0bWFzayBhbmQgY2Fwc1xuICAgKiAgIHBhcmFtZXRlcnNcIi5cbiAgICovXG4gIGwuR2VvZGVzaWNMaW5lLnByb3RvdHlwZS5Qb3NpdGlvbiA9IGZ1bmN0aW9uKHMxMiwgb3V0bWFzaykge1xuICAgIHJldHVybiB0aGlzLkdlblBvc2l0aW9uKGZhbHNlLCBzMTIsIG91dG1hc2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBGaW5kIHRoZSBwb3NpdGlvbiBvbiB0aGUgbGluZSBnaXZlbiBhMTIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhMTIgdGhlIGFyYyBsZW5ndGggZnJvbSB0aGUgZmlyc3QgcG9pbnQgdG8gdGhlIHNlY29uZCBpblxuICAgKiAgIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSB7Yml0bWFza30gW291dG1hc2sgPSBTVEFOREFSRF0gd2hpY2ggcmVzdWx0cyB0byBpbmNsdWRlOyB0aGlzIGlzXG4gICAqICAgc3ViamVjdCB0byB0aGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSByZXF1ZXN0ZWQgcmVzdWx0cy5cbiAgICogQGRlc2NyaXB0aW9uIFRoZSBsYXQxLCBsb24xLCBhemkxLCBhbmQgYTEyIGZpZWxkcyBvZiB0aGUgcmVzdWx0IGFyZVxuICAgKiAgIGFsd2F5cyBzZXQuICBGb3IgZGV0YWlscyBvbiB0aGUgb3V0bWFzayBwYXJhbWV0ZXIsIHNlZSB7QHR1dG9yaWFsXG4gICAqICAgMi1pbnRlcmZhY2V9LCBcIlRoZSBvdXRtYXNrIGFuZCBjYXBzIHBhcmFtZXRlcnNcIi5cbiAgICovXG4gIGwuR2VvZGVzaWNMaW5lLnByb3RvdHlwZS5BcmNQb3NpdGlvbiA9IGZ1bmN0aW9uKGExMiwgb3V0bWFzaykge1xuICAgIHJldHVybiB0aGlzLkdlblBvc2l0aW9uKHRydWUsIGExMiwgb3V0bWFzayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNwZWNpZnkgcG9zaXRpb24gb2YgcG9pbnQgMyBpbiB0ZXJtcyBvZiBlaXRoZXIgZGlzdGFuY2Ugb3IgYXJjXG4gICAqICAgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge2Jvb2x9IGFyY21vZGUgYm9vbGVhbiBmbGFnIGRldGVybWluaW5nIHRoZSBtZWFuaW5nIG9mIHRoZSBzZWNvbmRcbiAgICogICBwYXJhbWV0ZXI7IGlmIGFyY21vZGUgaXMgZmFsc2UsIHRoZW4gdGhlIEdlb2Rlc2ljTGluZSBvYmplY3QgbXVzdCBoYXZlXG4gICAqICAgYmVlbiBjb25zdHJ1Y3RlZCB3aXRoIGNhcHMgfD0gRElTVEFOQ0VfSU4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzMTNfYTEzIGlmIGFyY21vZGUgaXMgZmFsc2UsIHRoaXMgaXMgdGhlIGRpc3RhbmNlIGZyb21cbiAgICogICBwb2ludCAxIHRvIHBvaW50IDMgKG1ldGVycyk7IG90aGVyd2lzZSBpdCBpcyB0aGUgYXJjIGxlbmd0aCBmcm9tXG4gICAqICAgcG9pbnQgMSB0byBwb2ludCAzIChkZWdyZWVzKTsgaXQgY2FuIGJlIG5lZ2F0aXZlLlxuICAgKi9cbiAgbC5HZW9kZXNpY0xpbmUucHJvdG90eXBlLkdlblNldERpc3RhbmNlID0gZnVuY3Rpb24oYXJjbW9kZSwgczEzX2ExMykge1xuICAgIGlmIChhcmNtb2RlKVxuICAgICAgdGhpcy5TZXRBcmMoczEzX2ExMyk7XG4gICAgZWxzZVxuICAgICAgdGhpcy5TZXREaXN0YW5jZShzMTNfYTEzKTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgU3BlY2lmeSBwb3NpdGlvbiBvZiBwb2ludCAzIGluIHRlcm1zIGRpc3RhbmNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gczEzIHRoZSBkaXN0YW5jZSBmcm9tIHBvaW50IDEgdG8gcG9pbnQgMyAobWV0ZXJzKTsgaXRcbiAgICogICBjYW4gYmUgbmVnYXRpdmUuXG4gICAqL1xuICBsLkdlb2Rlc2ljTGluZS5wcm90b3R5cGUuU2V0RGlzdGFuY2UgPSBmdW5jdGlvbihzMTMpIHtcbiAgICB2YXIgcjtcbiAgICB0aGlzLnMxMyA9IHMxMztcbiAgICByID0gdGhpcy5HZW5Qb3NpdGlvbihmYWxzZSwgdGhpcy5zMTMsIGcuQVJDKTtcbiAgICB0aGlzLmExMyA9IDAgKyByLmExMjsgICAgICAgLy8gdGhlIDArIGNvbnZlcnRzIHVuZGVmaW5lZCBpbnRvIE5hTlxuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBTcGVjaWZ5IHBvc2l0aW9uIG9mIHBvaW50IDMgaW4gdGVybXMgb2YgYXJjIGxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGExMyB0aGUgYXJjIGxlbmd0aCBmcm9tIHBvaW50IDEgdG8gcG9pbnQgMyAoZGVncmVlcyk7XG4gICAqICAgaXQgY2FuIGJlIG5lZ2F0aXZlLlxuICAgKi9cbiAgbC5HZW9kZXNpY0xpbmUucHJvdG90eXBlLlNldEFyYyA9IGZ1bmN0aW9uKGExMykge1xuICAgIHZhciByO1xuICAgIHRoaXMuYTEzID0gYTEzO1xuICAgIHIgPSB0aGlzLkdlblBvc2l0aW9uKHRydWUsIHRoaXMuYTEzLCBnLkRJU1RBTkNFKTtcbiAgICB0aGlzLnMxMyA9IDAgKyByLnMxMjsgICAgICAgLy8gdGhlIDArIGNvbnZlcnRzIHVuZGVmaW5lZCBpbnRvIE5hTlxuICB9O1xuXG59KShHZW9ncmFwaGljTGliLkdlb2Rlc2ljLCBHZW9ncmFwaGljTGliLkdlb2Rlc2ljTGluZSwgR2VvZ3JhcGhpY0xpYi5NYXRoKTtcblxuLyoqKioqKioqKioqKioqKiogUG9seWdvbkFyZWEuanMgKioqKioqKioqKioqKioqKi9cbi8qXG4gKiBQb2x5Z29uQXJlYS5qc1xuICogVHJhbnNjcmlwdGlvbiBvZiBQb2x5Z29uQXJlYS5bY2hdcHAgaW50byBKYXZhU2NyaXB0LlxuICpcbiAqIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIEMrKyBjbGFzcy4gIFRoZSBjb252ZXJzaW9uIGlzIGEgbGl0ZXJhbFxuICogY29udmVyc2lvbiBmcm9tIEMrKy5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtcyBhcmUgZGVyaXZlZCBpblxuICpcbiAqICAgIENoYXJsZXMgRi4gRi4gS2FybmV5LFxuICogICAgQWxnb3JpdGhtcyBmb3IgZ2VvZGVzaWNzLCBKLiBHZW9kZXN5IDg3LCA0My01NSAoMjAxMyk7XG4gKiAgICBodHRwczovL2RvaS5vcmcvMTAuMTAwNy9zMDAxOTAtMDEyLTA1NzgtelxuICogICAgQWRkZW5kYTogaHR0cHM6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLmlvL2dlb2QtYWRkZW5kYS5odG1sXG4gKlxuICogQ29weXJpZ2h0IChjKSBDaGFybGVzIEthcm5leSAoMjAxMS0yMDE5KSA8Y2hhcmxlc0BrYXJuZXkuY29tPiBhbmQgbGljZW5zZWRcbiAqIHVuZGVyIHRoZSBNSVQvWDExIExpY2Vuc2UuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4gKiBodHRwczovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UuaW8vXG4gKi9cblxuLy8gTG9hZCBBRlRFUiBHZW9ncmFwaGljTGliL01hdGguanMgYW5kIEdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuanNcblxuKGZ1bmN0aW9uKFxuICAvKipcbiAgICogQGV4cG9ydHMgR2VvZ3JhcGhpY0xpYi9Qb2x5Z29uQXJlYVxuICAgKiBAZGVzY3JpcHRpb24gQ29tcHV0ZSB0aGUgYXJlYSBvZiBnZW9kZXNpYyBwb2x5Z29ucyB2aWEgdGhlXG4gICAqICAge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL1BvbHlnb25BcmVhLlBvbHlnb25BcmVhIFBvbHlnb25BcmVhfVxuICAgKiAgIGNsYXNzLlxuICAgKi9cbiAgcCwgZywgbSwgYSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgdHJhbnNpdCwgdHJhbnNpdGRpcmVjdCwgQXJlYVJlZHVjZUEsIEFyZWFSZWR1Y2VCO1xuICB0cmFuc2l0ID0gZnVuY3Rpb24obG9uMSwgbG9uMikge1xuICAgIC8vIFJldHVybiAxIG9yIC0xIGlmIGNyb3NzaW5nIHByaW1lIG1lcmlkaWFuIGluIGVhc3Qgb3Igd2VzdCBkaXJlY3Rpb24uXG4gICAgLy8gT3RoZXJ3aXNlIHJldHVybiB6ZXJvLlxuICAgIHZhciBsb24xMiwgY3Jvc3M7XG4gICAgLy8gQ29tcHV0ZSBsb24xMiB0aGUgc2FtZSB3YXkgYXMgR2VvZGVzaWM6OkludmVyc2UuXG4gICAgbG9uMSA9IG0uQW5nTm9ybWFsaXplKGxvbjEpO1xuICAgIGxvbjIgPSBtLkFuZ05vcm1hbGl6ZShsb24yKTtcbiAgICBsb24xMiA9IG0uQW5nRGlmZihsb24xLCBsb24yKS5zO1xuICAgIGNyb3NzID0gbG9uMSA8PSAwICYmIGxvbjIgPiAwICYmIGxvbjEyID4gMCA/IDEgOlxuICAgICAgKGxvbjIgPD0gMCAmJiBsb24xID4gMCAmJiBsb24xMiA8IDAgPyAtMSA6IDApO1xuICAgIHJldHVybiBjcm9zcztcbiAgfTtcblxuICAvLyBhbiBhbHRlcm5hdGUgdmVyc2lvbiBvZiB0cmFuc2l0IHRvIGRlYWwgd2l0aCBsb25naXR1ZGVzIGluIHRoZSBkaXJlY3RcbiAgLy8gcHJvYmxlbS5cbiAgdHJhbnNpdGRpcmVjdCA9IGZ1bmN0aW9uKGxvbjEsIGxvbjIpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNvbXB1dGUgZXhhY3RseVxuICAgIC8vICAgaW50KGNlaWwobG9uMiAvIDM2MCkpIC0gaW50KGNlaWwobG9uMSAvIDM2MCkpXG4gICAgLy8gU2luY2Ugd2Ugb25seSBuZWVkIHRoZSBwYXJpdHkgb2YgdGhlIHJlc3VsdCB3ZSBjYW4gdXNlIHN0ZDo6cmVtcXVvIGJ1dFxuICAgIC8vIHRoaXMgaXMgYnVnZ3kgd2l0aCBnKysgNC44LjMgYW5kIHJlcXVpcmVzIEMrKzExLiAgU28gaW5zdGVhZCB3ZSBkb1xuICAgIGxvbjEgPSBsb24xICUgNzIwLjA7IGxvbjIgPSBsb24yICUgNzIwLjA7XG4gICAgcmV0dXJuICggKChsb24yIDw9IDAgJiYgbG9uMiA+IC0zNjApIHx8IGxvbjIgPiAzNjAgPyAxIDogMCkgLVxuICAgICAgICAgICAgICgobG9uMSA8PSAwICYmIGxvbjEgPiAtMzYwKSB8fCBsb24xID4gMzYwID8gMSA6IDApICk7XG4gIH07XG5cbiAgLy8gUmVkdWNlIEFjY3VtdWxhdG9yIGFyZWFcbiAgQXJlYVJlZHVjZUEgPSBmdW5jdGlvbihhcmVhLCBhcmVhMCwgY3Jvc3NpbmdzLCByZXZlcnNlLCBzaWduKSB7XG4gICAgYXJlYS5SZW1haW5kZXIoYXJlYTApO1xuICAgIGlmIChjcm9zc2luZ3MgJiAxKVxuICAgICAgYXJlYS5BZGQoIChhcmVhLlN1bSgpIDwgMCA/IDEgOiAtMSkgKiBhcmVhMC8yICk7XG4gICAgLy8gYXJlYSBpcyB3aXRoIHRoZSBjbG9ja3dpc2Ugc2Vuc2UuICBJZiAhcmV2ZXJzZSBjb252ZXJ0IHRvXG4gICAgLy8gY291bnRlci1jbG9ja3dpc2UgY29udmVudGlvbi5cbiAgICBpZiAoIXJldmVyc2UpXG4gICAgICBhcmVhLk5lZ2F0ZSgpO1xuICAgIC8vIElmIHNpZ24gcHV0IGFyZWEgaW4gKC1hcmVhMC8yLCBhcmVhMC8yXSwgZWxzZSBwdXQgYXJlYSBpbiBbMCwgYXJlYTApXG4gICAgaWYgKHNpZ24pIHtcbiAgICAgIGlmIChhcmVhLlN1bSgpID4gYXJlYTAvMilcbiAgICAgICAgYXJlYS5BZGQoIC1hcmVhMCApO1xuICAgICAgZWxzZSBpZiAoYXJlYS5TdW0oKSA8PSAtYXJlYTAvMilcbiAgICAgICAgYXJlYS5BZGQoICthcmVhMCApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJlYS5TdW0oKSA+PSBhcmVhMClcbiAgICAgICAgYXJlYS5BZGQoIC1hcmVhMCApO1xuICAgICAgZWxzZSBpZiAoYXJlYS5TdW0oKSA8IDApXG4gICAgICAgIGFyZWEuQWRkKCArYXJlYTAgKTtcbiAgICB9XG4gICAgcmV0dXJuIDAgKyBhcmVhLlN1bSgpO1xuICB9O1xuXG4gIC8vIFJlZHVjZSBkb3VibGUgYXJlYVxuICBBcmVhUmVkdWNlQiA9IGZ1bmN0aW9uKGFyZWEsIGFyZWEwLCBjcm9zc2luZ3MsIHJldmVyc2UsIHNpZ24pIHtcbiAgICBhcmVhID0gbS5yZW1haW5kZXIoYXJlYSwgYXJlYTApO1xuICAgIGlmIChjcm9zc2luZ3MgJiAxKVxuICAgICAgYXJlYSArPSAoYXJlYSA8IDAgPyAxIDogLTEpICogYXJlYTAvMjtcbiAgICAvLyBhcmVhIGlzIHdpdGggdGhlIGNsb2Nrd2lzZSBzZW5zZS4gIElmICFyZXZlcnNlIGNvbnZlcnQgdG9cbiAgICAvLyBjb3VudGVyLWNsb2Nrd2lzZSBjb252ZW50aW9uLlxuICAgIGlmICghcmV2ZXJzZSlcbiAgICAgIGFyZWEgKj0gLTE7XG4gICAgLy8gSWYgc2lnbiBwdXQgYXJlYSBpbiAoLWFyZWEwLzIsIGFyZWEwLzJdLCBlbHNlIHB1dCBhcmVhIGluIFswLCBhcmVhMClcbiAgICBpZiAoc2lnbikge1xuICAgICAgaWYgKGFyZWEgPiBhcmVhMC8yKVxuICAgICAgICBhcmVhIC09IGFyZWEwO1xuICAgICAgZWxzZSBpZiAoYXJlYSA8PSAtYXJlYTAvMilcbiAgICAgICAgYXJlYSArPSBhcmVhMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFyZWEgPj0gYXJlYTApXG4gICAgICAgIGFyZWEgLT0gYXJlYTA7XG4gICAgICBlbHNlIGlmIChhcmVhIDwgMClcbiAgICAgICAgYXJlYSArPSBhcmVhMDtcbiAgICB9XG4gICAgcmV0dXJuIDAgKyBhcmVhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGEgdGhlIGVxdWF0b3JpYWwgcmFkaXVzIChtZXRlcnMpLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gZiB0aGUgZmxhdHRlbmluZy5cbiAgICogQHByb3BlcnR5IHtib29sfSBwb2x5bGluZSB3aGV0aGVyIHRoZSBQb2x5Z29uQXJlYSBvYmplY3QgZGVzY3JpYmVzIGFcbiAgICogICBwb2x5bGluZSBvciBhIHBvbHlnb24uXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBudW0gdGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBzbyBmYXIuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsYXQgdGhlIGN1cnJlbnQgbGF0aXR1ZGUgKGRlZ3JlZXMpLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gbG9uIHRoZSBjdXJyZW50IGxvbmdpdHVkZSAoZGVncmVlcykuXG4gICAqIEBzdW1tYXJ5IEluaXRpYWxpemUgYSBQb2x5Z29uQXJlYSBvYmplY3QuXG4gICAqIEBjbGFzc2Rlc2MgQ29tcHV0ZXMgdGhlIGFyZWEgYW5kIHBlcmltZXRlciBvZiBhIGdlb2Rlc2ljIHBvbHlnb24uXG4gICAqICAgVGhpcyBvYmplY3QgaXMgdXN1YWxseSBpbnN0YW50aWF0ZWQgYnlcbiAgICogICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuR2VvZGVzaWMjUG9seWdvbiBHZW9kZXNpYy5Qb2x5Z29ufS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGdlb2QgYSB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvR2VvZGVzaWMuR2VvZGVzaWNcbiAgICogICBHZW9kZXNpY30gb2JqZWN0LlxuICAgKiBAcGFyYW0ge2Jvb2x9IFtwb2x5bGluZSA9IGZhbHNlXSBpZiB0cnVlIHRoZSBuZXcgUG9seWdvbkFyZWEgb2JqZWN0XG4gICAqICAgZGVzY3JpYmVzIGEgcG9seWxpbmUgaW5zdGVhZCBvZiBhIHBvbHlnb24uXG4gICAqL1xuICBwLlBvbHlnb25BcmVhID0gZnVuY3Rpb24oZ2VvZCwgcG9seWxpbmUpIHtcbiAgICB0aGlzLl9nZW9kID0gZ2VvZDtcbiAgICB0aGlzLmEgPSB0aGlzLl9nZW9kLmE7XG4gICAgdGhpcy5mID0gdGhpcy5fZ2VvZC5mO1xuICAgIHRoaXMuX2FyZWEwID0gNCAqIE1hdGguUEkgKiBnZW9kLl9jMjtcbiAgICB0aGlzLnBvbHlsaW5lID0gIXBvbHlsaW5lID8gZmFsc2UgOiBwb2x5bGluZTtcbiAgICB0aGlzLl9tYXNrID0gZy5MQVRJVFVERSB8IGcuTE9OR0lUVURFIHwgZy5ESVNUQU5DRSB8XG4gICAgICAgICAgKHRoaXMucG9seWxpbmUgPyBnLk5PTkUgOiBnLkFSRUEgfCBnLkxPTkdfVU5ST0xMKTtcbiAgICBpZiAoIXRoaXMucG9seWxpbmUpXG4gICAgICB0aGlzLl9hcmVhc3VtID0gbmV3IGEuQWNjdW11bGF0b3IoMCk7XG4gICAgdGhpcy5fcGVyaW1ldGVyc3VtID0gbmV3IGEuQWNjdW11bGF0b3IoMCk7XG4gICAgdGhpcy5DbGVhcigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDbGVhciB0aGUgUG9seWdvbkFyZWEgb2JqZWN0LCBzZXR0aW5nIHRoZSBudW1iZXIgb2YgdmVydGljZXMgdG9cbiAgICogICAwLlxuICAgKi9cbiAgcC5Qb2x5Z29uQXJlYS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm51bSA9IDA7XG4gICAgdGhpcy5fY3Jvc3NpbmdzID0gMDtcbiAgICBpZiAoIXRoaXMucG9seWxpbmUpXG4gICAgICB0aGlzLl9hcmVhc3VtLlNldCgwKTtcbiAgICB0aGlzLl9wZXJpbWV0ZXJzdW0uU2V0KDApO1xuICAgIHRoaXMuX2xhdDAgPSB0aGlzLl9sb24wID0gdGhpcy5sYXQgPSB0aGlzLmxvbiA9IE51bWJlci5OYU47XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEFkZCB0aGUgbmV4dCB2ZXJ0ZXggdG8gdGhlIHBvbHlnb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXQgdGhlIGxhdGl0dWRlIG9mIHRoZSBwb2ludCAoZGVncmVlcykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24gdGhlIGxvbmdpdHVkZSBvZiB0aGUgcG9pbnQgKGRlZ3JlZXMpLlxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBhZGRzIGFuIGVkZ2UgZnJvbSB0aGUgY3VycmVudCB2ZXJ0ZXggdG8gdGhlIG5ldyB2ZXJ0ZXguXG4gICAqL1xuICBwLlBvbHlnb25BcmVhLnByb3RvdHlwZS5BZGRQb2ludCA9IGZ1bmN0aW9uKGxhdCwgbG9uKSB7XG4gICAgdmFyIHQ7XG4gICAgaWYgKHRoaXMubnVtID09PSAwKSB7XG4gICAgICB0aGlzLl9sYXQwID0gdGhpcy5sYXQgPSBsYXQ7XG4gICAgICB0aGlzLl9sb24wID0gdGhpcy5sb24gPSBsb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgPSB0aGlzLl9nZW9kLkludmVyc2UodGhpcy5sYXQsIHRoaXMubG9uLCBsYXQsIGxvbiwgdGhpcy5fbWFzayk7XG4gICAgICB0aGlzLl9wZXJpbWV0ZXJzdW0uQWRkKHQuczEyKTtcbiAgICAgIGlmICghdGhpcy5wb2x5bGluZSkge1xuICAgICAgICB0aGlzLl9hcmVhc3VtLkFkZCh0LlMxMik7XG4gICAgICAgIHRoaXMuX2Nyb3NzaW5ncyArPSB0cmFuc2l0KHRoaXMubG9uLCBsb24pO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXQgPSBsYXQ7XG4gICAgICB0aGlzLmxvbiA9IGxvbjtcbiAgICB9XG4gICAgKyt0aGlzLm51bTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQWRkIHRoZSBuZXh0IGVkZ2UgdG8gdGhlIHBvbHlnb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhemkgdGhlIGF6aW11dGggYXQgdGhlIGN1cnJlbnQgdGhlIHBvaW50IChkZWdyZWVzKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHMgdGhlIGxlbmd0aCBvZiB0aGUgZWRnZSAobWV0ZXJzKS5cbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgc3BlY2lmaWVzIHRoZSBuZXcgdmVydGV4IGluIHRlcm1zIG9mIHRoZSBlZGdlIGZyb20gdGhlXG4gICAqICAgY3VycmVudCB2ZXJ0ZXguXG4gICAqL1xuICBwLlBvbHlnb25BcmVhLnByb3RvdHlwZS5BZGRFZGdlID0gZnVuY3Rpb24oYXppLCBzKSB7XG4gICAgdmFyIHQ7XG4gICAgaWYgKHRoaXMubnVtKSB7XG4gICAgICB0ID0gdGhpcy5fZ2VvZC5EaXJlY3QodGhpcy5sYXQsIHRoaXMubG9uLCBhemksIHMsIHRoaXMuX21hc2spO1xuICAgICAgdGhpcy5fcGVyaW1ldGVyc3VtLkFkZChzKTtcbiAgICAgIGlmICghdGhpcy5wb2x5bGluZSkge1xuICAgICAgICB0aGlzLl9hcmVhc3VtLkFkZCh0LlMxMik7XG4gICAgICAgIHRoaXMuX2Nyb3NzaW5ncyArPSB0cmFuc2l0ZGlyZWN0KHRoaXMubG9uLCB0LmxvbjIpO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXQgPSB0LmxhdDI7XG4gICAgICB0aGlzLmxvbiA9IHQubG9uMjtcbiAgICB9XG4gICAgKyt0aGlzLm51bTtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQ29tcHV0ZSB0aGUgcGVyaW1ldGVyIGFuZCBhcmVhIG9mIHRoZSBwb2x5Z29uLlxuICAgKiBAcGFyYW0ge2Jvb2x9IHJldmVyc2UgaWYgdHJ1ZSB0aGVuIGNsb2Nrd2lzZSAoaW5zdGVhZCBvZlxuICAgKiAgIGNvdW50ZXItY2xvY2t3aXNlKSB0cmF2ZXJzYWwgY291bnRzIGFzIGEgcG9zaXRpdmUgYXJlYS5cbiAgICogQHBhcmFtIHtib29sfSBzaWduIGlmIHRydWUgdGhlbiByZXR1cm4gYSBzaWduZWQgcmVzdWx0IGZvciB0aGUgYXJlYSBpZiB0aGVcbiAgICogICBwb2x5Z29uIGlzIHRyYXZlcnNlZCBpbiB0aGUgXCJ3cm9uZ1wiIGRpcmVjdGlvbiBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGVcbiAgICogICBhcmVhIGZvciB0aGUgcmVzdCBvZiB0aGUgZWFydGguXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHIgd2hlcmUgci5udW1iZXIgaXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcywgci5wZXJpbWV0ZXJcbiAgICogICBpcyB0aGUgcGVyaW1ldGVyIChtZXRlcnMpLCBhbmQgci5hcmVhIChvbmx5IHJldHVybmVkIGlmIHBvbHlsaW5lIGlzXG4gICAqICAgZmFsc2UpIGlzIHRoZSBhcmVhIChtZXRlcnM8c3VwPjI8L3N1cD4pLlxuICAgKiBAZGVzY3JpcHRpb24gQXJiaXRyYXJpbHkgY29tcGxleCBwb2x5Z29ucyBhcmUgYWxsb3dlZC4gIEluIHRoZSBjYXNlIG9mXG4gICAqICAgc2VsZi1pbnRlcnNlY3RpbmcgcG9seWdvbnMgdGhlIGFyZWEgaXMgYWNjdW11bGF0ZWQgXCJhbGdlYnJhaWNhbGx5XCIsXG4gICAqICAgZS5nLiwgdGhlIGFyZWFzIG9mIHRoZSAyIGxvb3BzIGluIGEgZmlndXJlLTggcG9seWdvbiB3aWxsIHBhcnRpYWxseVxuICAgKiAgIGNhbmNlbC4gIElmIHRoZSBvYmplY3QgaXMgYSBwb2x5Z29uIChhbmQgbm90IGEgcG9seWxpbmUpLCB0aGUgcGVyaW1ldGVyXG4gICAqICAgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiBhIGZpbmFsIGVkZ2UgY29ubmVjdGluZyB0aGUgY3VycmVudCBwb2ludCB0byB0aGVcbiAgICogICBpbml0aWFsIHBvaW50LiAgSWYgdGhlIG9iamVjdCBpcyBhIHBvbHlsaW5lLCB0aGVuIGFyZWEgaXMgbmFuLiAgTW9yZVxuICAgKiAgIHBvaW50cyBjYW4gYmUgYWRkZWQgdG8gdGhlIHBvbHlnb24gYWZ0ZXIgdGhpcyBjYWxsLlxuICAgKi9cbiAgcC5Qb2x5Z29uQXJlYS5wcm90b3R5cGUuQ29tcHV0ZSA9IGZ1bmN0aW9uKHJldmVyc2UsIHNpZ24pIHtcbiAgICB2YXIgdmFscyA9IHtudW1iZXI6IHRoaXMubnVtfSwgdCwgdGVtcHN1bTtcbiAgICBpZiAodGhpcy5udW0gPCAyKSB7XG4gICAgICB2YWxzLnBlcmltZXRlciA9IDA7XG4gICAgICBpZiAoIXRoaXMucG9seWxpbmUpXG4gICAgICAgIHZhbHMuYXJlYSA9IDA7XG4gICAgICByZXR1cm4gdmFscztcbiAgICB9XG4gICAgaWYgKHRoaXMucG9seWxpbmUpIHtcbiAgICAgIHZhbHMucGVyaW1ldGVyID0gdGhpcy5fcGVyaW1ldGVyc3VtLlN1bSgpO1xuICAgICAgcmV0dXJuIHZhbHM7XG4gICAgfVxuICAgIHQgPSB0aGlzLl9nZW9kLkludmVyc2UodGhpcy5sYXQsIHRoaXMubG9uLCB0aGlzLl9sYXQwLCB0aGlzLl9sb24wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFzayk7XG4gICAgdmFscy5wZXJpbWV0ZXIgPSB0aGlzLl9wZXJpbWV0ZXJzdW0uU3VtKHQuczEyKTtcbiAgICB0ZW1wc3VtID0gbmV3IGEuQWNjdW11bGF0b3IodGhpcy5fYXJlYXN1bSk7XG4gICAgdGVtcHN1bS5BZGQodC5TMTIpO1xuICAgIHZhbHMuYXJlYSA9IEFyZWFSZWR1Y2VBKHRlbXBzdW0sIHRoaXMuX2FyZWEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nyb3NzaW5ncyArIHRyYW5zaXQodGhpcy5sb24sIHRoaXMuX2xvbjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2UsIHNpZ24pO1xuICAgIHJldHVybiB2YWxzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb21wdXRlIHRoZSBwZXJpbWV0ZXIgYW5kIGFyZWEgb2YgdGhlIHBvbHlnb24gd2l0aCBhIHRlbnRhdGl2ZVxuICAgKiAgIG5ldyB2ZXJ0ZXguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXQgdGhlIGxhdGl0dWRlIG9mIHRoZSBwb2ludCAoZGVncmVlcykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb24gdGhlIGxvbmdpdHVkZSBvZiB0aGUgcG9pbnQgKGRlZ3JlZXMpLlxuICAgKiBAcGFyYW0ge2Jvb2x9IHJldmVyc2UgaWYgdHJ1ZSB0aGVuIGNsb2Nrd2lzZSAoaW5zdGVhZCBvZlxuICAgKiAgIGNvdW50ZXItY2xvY2t3aXNlKSB0cmF2ZXJzYWwgY291bnRzIGFzIGEgcG9zaXRpdmUgYXJlYS5cbiAgICogQHBhcmFtIHtib29sfSBzaWduIGlmIHRydWUgdGhlbiByZXR1cm4gYSBzaWduZWQgcmVzdWx0IGZvciB0aGUgYXJlYSBpZiB0aGVcbiAgICogICBwb2x5Z29uIGlzIHRyYXZlcnNlZCBpbiB0aGUgXCJ3cm9uZ1wiIGRpcmVjdGlvbiBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGVcbiAgICogICBhcmVhIGZvciB0aGUgcmVzdCBvZiB0aGUgZWFydGguXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHIgd2hlcmUgci5udW1iZXIgaXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcywgci5wZXJpbWV0ZXJcbiAgICogICBpcyB0aGUgcGVyaW1ldGVyIChtZXRlcnMpLCBhbmQgci5hcmVhIChvbmx5IHJldHVybmVkIGlmIHBvbHlsaW5lIGlzXG4gICAqICAgZmFsc2UpIGlzIHRoZSBhcmVhIChtZXRlcnM8c3VwPjI8L3N1cD4pLlxuICAgKiBAZGVzY3JpcHRpb24gQSBuZXcgdmVydGV4IGlzICpub3QqIGFkZGVkIHRvIHRoZSBwb2x5Z29uLlxuICAgKi9cbiAgcC5Qb2x5Z29uQXJlYS5wcm90b3R5cGUuVGVzdFBvaW50ID0gZnVuY3Rpb24obGF0LCBsb24sIHJldmVyc2UsIHNpZ24pIHtcbiAgICB2YXIgdmFscyA9IHtudW1iZXI6IHRoaXMubnVtICsgMX0sIHQsIHRlbXBzdW0sIGNyb3NzaW5ncywgaTtcbiAgICBpZiAodGhpcy5udW0gPT09IDApIHtcbiAgICAgIHZhbHMucGVyaW1ldGVyID0gMDtcbiAgICAgIGlmICghdGhpcy5wb2x5bGluZSlcbiAgICAgICAgdmFscy5hcmVhID0gMDtcbiAgICAgIHJldHVybiB2YWxzO1xuICAgIH1cbiAgICB2YWxzLnBlcmltZXRlciA9IHRoaXMuX3BlcmltZXRlcnN1bS5TdW0oKTtcbiAgICB0ZW1wc3VtID0gdGhpcy5wb2x5bGluZSA/IDAgOiB0aGlzLl9hcmVhc3VtLlN1bSgpO1xuICAgIGNyb3NzaW5ncyA9IHRoaXMuX2Nyb3NzaW5ncztcbiAgICBmb3IgKGkgPSAwOyBpIDwgKHRoaXMucG9seWxpbmUgPyAxIDogMik7ICsraSkge1xuICAgICAgdCA9IHRoaXMuX2dlb2QuSW52ZXJzZShcbiAgICAgICBpID09PSAwID8gdGhpcy5sYXQgOiBsYXQsIGkgPT09IDAgPyB0aGlzLmxvbiA6IGxvbixcbiAgICAgICBpICE9PSAwID8gdGhpcy5fbGF0MCA6IGxhdCwgaSAhPT0gMCA/IHRoaXMuX2xvbjAgOiBsb24sXG4gICAgICAgdGhpcy5fbWFzayk7XG4gICAgICB2YWxzLnBlcmltZXRlciArPSB0LnMxMjtcbiAgICAgIGlmICghdGhpcy5wb2x5bGluZSkge1xuICAgICAgICB0ZW1wc3VtICs9IHQuUzEyO1xuICAgICAgICBjcm9zc2luZ3MgKz0gdHJhbnNpdChpID09PSAwID8gdGhpcy5sb24gOiBsb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAhPT0gMCA/IHRoaXMuX2xvbjAgOiBsb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnBvbHlsaW5lKVxuICAgICAgcmV0dXJuIHZhbHM7XG5cbiAgICB2YWxzLmFyZWEgPSBBcmVhUmVkdWNlQih0ZW1wc3VtLCB0aGlzLl9hcmVhMCwgY3Jvc3NpbmdzLCByZXZlcnNlLCBzaWduKTtcbiAgICByZXR1cm4gdmFscztcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgQ29tcHV0ZSB0aGUgcGVyaW1ldGVyIGFuZCBhcmVhIG9mIHRoZSBwb2x5Z29uIHdpdGggYSB0ZW50YXRpdmVcbiAgICogICBuZXcgZWRnZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGF6aSB0aGUgYXppbXV0aCBvZiB0aGUgZWRnZSAoZGVncmVlcykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzIHRoZSBsZW5ndGggb2YgdGhlIGVkZ2UgKG1ldGVycykuXG4gICAqIEBwYXJhbSB7Ym9vbH0gcmV2ZXJzZSBpZiB0cnVlIHRoZW4gY2xvY2t3aXNlIChpbnN0ZWFkIG9mXG4gICAqICAgY291bnRlci1jbG9ja3dpc2UpIHRyYXZlcnNhbCBjb3VudHMgYXMgYSBwb3NpdGl2ZSBhcmVhLlxuICAgKiBAcGFyYW0ge2Jvb2x9IHNpZ24gaWYgdHJ1ZSB0aGVuIHJldHVybiBhIHNpZ25lZCByZXN1bHQgZm9yIHRoZSBhcmVhIGlmIHRoZVxuICAgKiAgIHBvbHlnb24gaXMgdHJhdmVyc2VkIGluIHRoZSBcIndyb25nXCIgZGlyZWN0aW9uIGluc3RlYWQgb2YgcmV0dXJuaW5nIHRoZVxuICAgKiAgIGFyZWEgZm9yIHRoZSByZXN0IG9mIHRoZSBlYXJ0aC5cbiAgICogQHJldHVybnMge29iamVjdH0gciB3aGVyZSByLm51bWJlciBpcyB0aGUgbnVtYmVyIG9mIHZlcnRpY2VzLCByLnBlcmltZXRlclxuICAgKiAgIGlzIHRoZSBwZXJpbWV0ZXIgKG1ldGVycyksIGFuZCByLmFyZWEgKG9ubHkgcmV0dXJuZWQgaWYgcG9seWxpbmUgaXNcbiAgICogICBmYWxzZSkgaXMgdGhlIGFyZWEgKG1ldGVyczxzdXA+Mjwvc3VwPikuXG4gICAqIEBkZXNjcmlwdGlvbiBBIG5ldyB2ZXJ0ZXggaXMgKm5vdCogYWRkZWQgdG8gdGhlIHBvbHlnb24uXG4gICAqL1xuICBwLlBvbHlnb25BcmVhLnByb3RvdHlwZS5UZXN0RWRnZSA9IGZ1bmN0aW9uKGF6aSwgcywgcmV2ZXJzZSwgc2lnbikge1xuICAgIHZhciB2YWxzID0ge251bWJlcjogdGhpcy5udW0gPyB0aGlzLm51bSArIDEgOiAwfSwgdCwgdGVtcHN1bSwgY3Jvc3NpbmdzO1xuICAgIGlmICh0aGlzLm51bSA9PT0gMClcbiAgICAgIHJldHVybiB2YWxzO1xuICAgIHZhbHMucGVyaW1ldGVyID0gdGhpcy5fcGVyaW1ldGVyc3VtLlN1bSgpICsgcztcbiAgICBpZiAodGhpcy5wb2x5bGluZSlcbiAgICAgIHJldHVybiB2YWxzO1xuXG4gICAgdGVtcHN1bSA9IHRoaXMuX2FyZWFzdW0uU3VtKCk7XG4gICAgY3Jvc3NpbmdzID0gdGhpcy5fY3Jvc3NpbmdzO1xuICAgIHQgPSB0aGlzLl9nZW9kLkRpcmVjdCh0aGlzLmxhdCwgdGhpcy5sb24sIGF6aSwgcywgdGhpcy5fbWFzayk7XG4gICAgdGVtcHN1bSArPSB0LlMxMjtcbiAgICBjcm9zc2luZ3MgKz0gdHJhbnNpdGRpcmVjdCh0aGlzLmxvbiwgdC5sb24yKTtcbiAgICBjcm9zc2luZ3MgKz0gdHJhbnNpdCh0LmxvbjIsIHRoaXMuX2xvbjApO1xuICAgIHQgPSB0aGlzLl9nZW9kLkludmVyc2UodC5sYXQyLCB0LmxvbjIsIHRoaXMuX2xhdDAsIHRoaXMuX2xvbjAsIHRoaXMuX21hc2spO1xuICAgIHZhbHMucGVyaW1ldGVyICs9IHQuczEyO1xuICAgIHRlbXBzdW0gKz0gdC5TMTI7XG5cbiAgICB2YWxzLmFyZWEgPSBBcmVhUmVkdWNlQih0ZW1wc3VtLCB0aGlzLl9hcmVhMCwgY3Jvc3NpbmdzLCByZXZlcnNlLCBzaWduKTtcbiAgICByZXR1cm4gdmFscztcbiAgfTtcblxufSkoR2VvZ3JhcGhpY0xpYi5Qb2x5Z29uQXJlYSwgR2VvZ3JhcGhpY0xpYi5HZW9kZXNpYyxcbiAgIEdlb2dyYXBoaWNMaWIuTWF0aCwgR2VvZ3JhcGhpY0xpYi5BY2N1bXVsYXRvcik7XG5cbi8qKioqKioqKioqKioqKioqIERNUy5qcyAqKioqKioqKioqKioqKioqL1xuLypcbiAqIERNUy5qc1xuICogVHJhbnNjcmlwdGlvbiBvZiBETVMuW2NoXXBwIGludG8gSmF2YVNjcmlwdC5cbiAqXG4gKiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBDKysgY2xhc3MuICBUaGUgY29udmVyc2lvbiBpcyBhIGxpdGVyYWxcbiAqIGNvbnZlcnNpb24gZnJvbSBDKysuXG4gKlxuICogQ29weXJpZ2h0IChjKSBDaGFybGVzIEthcm5leSAoMjAxMS0yMDIwKSA8Y2hhcmxlc0BrYXJuZXkuY29tPiBhbmQgbGljZW5zZWRcbiAqIHVuZGVyIHRoZSBNSVQvWDExIExpY2Vuc2UuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4gKiBodHRwczovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UuaW8vXG4gKi9cblxuR2VvZ3JhcGhpY0xpYi5ETVMgPSB7fTtcblxuKGZ1bmN0aW9uKFxuICAvKipcbiAgICogQGV4cG9ydHMgR2VvZ3JhcGhpY0xpYi9ETVNcbiAgICogQGRlc2NyaXB0aW9uIERlY29kZS9FbmNvZGUgYW5nbGVzIGV4cHJlc3NlZCBhcyBkZWdyZWVzLCBtaW51dGVzLCBhbmRcbiAgICogICBzZWNvbmRzLiAgVGhpcyBtb2R1bGUgZGVmaW5lcyBzZXZlcmFsIGNvbnN0YW50czpcbiAgICogICAtIGhlbWlzcGhlcmUgaW5kaWNhdG9yIChyZXR1cm5lZCBieVxuICAgKiAgICAgICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvRE1TLkRlY29kZSBEZWNvZGV9KSBhbmQgYSBmb3JtYXR0aW5nXG4gICAqICAgICAgIGluZGljYXRvciAodXNlZCBieVxuICAgKiAgICAgICB7QGxpbmsgbW9kdWxlOkdlb2dyYXBoaWNMaWIvRE1TLkVuY29kZSBFbmNvZGV9KVxuICAgKiAgICAgLSBOT05FID0gMCwgbm8gZGVzaWduYXRvciBhbmQgZm9ybWF0IGFzIHBsYWluIGFuZ2xlO1xuICAgKiAgICAgLSBMQVRJVFVERSA9IDEsIGEgTi9TIGRlc2lnbmF0b3IgYW5kIGZvcm1hdCBhcyBsYXRpdHVkZTtcbiAgICogICAgIC0gTE9OR0lUVURFID0gMiwgYW4gRS9XIGRlc2lnbmF0b3IgYW5kIGZvcm1hdCBhcyBsb25naXR1ZGU7XG4gICAqICAgICAtIEFaSU1VVEggPSAzLCBmb3JtYXQgYXMgYXppbXV0aDtcbiAgICogICAtIHRoZSBzcGVjaWZpY2F0aW9uIG9mIHRoZSB0cmFpbGluZyBjb21wb25lbnQgaW5cbiAgICogICAgICAge0BsaW5rIG1vZHVsZTpHZW9ncmFwaGljTGliL0RNUy5FbmNvZGUgRW5jb2RlfVxuICAgKiAgICAgLSBERUdSRUU7XG4gICAqICAgICAtIE1JTlVURTtcbiAgICogICAgIC0gU0VDT05ELlxuICAgKi9cbiAgZCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgbG9va3VwLCB6ZXJvZmlsbCwgaW50ZXJuYWxEZWNvZGUsIG51bU1hdGNoLFxuICAgICAgaGVtaXNwaGVyZXNfID0gXCJTTldFXCIsXG4gICAgICBzaWduc18gPSBcIi0rXCIsXG4gICAgICBkaWdpdHNfID0gXCIwMTIzNDU2Nzg5XCIsXG4gICAgICBkbXNpbmRpY2F0b3JzXyA9IFwiRCdcXFwiOlwiLFxuICAgICAgLy8gZG1zaW5kaWNhdG9yc3VfID0gXCJcXHUwMGIwXFx1MjAzMlxcdTIwMzNcIjsgLy8gVW5pY29kZSB2YXJpYW50c1xuICAgICAgZG1zaW5kaWNhdG9yc3VfID0gXCJcXHUwMGIwJ1xcXCJcIiwgLy8gVXNlIGRlZ3JlZSBzeW1ib2xcbiAgICAgIGNvbXBvbmVudHNfID0gW1wiZGVncmVlc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCJdO1xuICBsb29rdXAgPSBmdW5jdGlvbihzLCBjKSB7XG4gICAgcmV0dXJuIHMuaW5kZXhPZihjLnRvVXBwZXJDYXNlKCkpO1xuICB9O1xuICB6ZXJvZmlsbCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICByZXR1cm4gU3RyaW5nKFwiMDAwMFwiKS5zdWJzdHIoMCwgTWF0aC5tYXgoMCwgTWF0aC5taW4oNCwgbi1zLmxlbmd0aCkpKSArXG4gICAgICBzO1xuICB9O1xuICBkLk5PTkUgPSAwO1xuICBkLkxBVElUVURFID0gMTtcbiAgZC5MT05HSVRVREUgPSAyO1xuICBkLkFaSU1VVEggPSAzO1xuICBkLkRFR1JFRSA9IDA7XG4gIGQuTUlOVVRFID0gMTtcbiAgZC5TRUNPTkQgPSAyO1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBEZWNvZGUgYSBETVMgc3RyaW5nLlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGludGVycHJldGF0aW9uIG9mIHRoZSBzdHJpbmcgaXMgZ2l2ZW4gaW4gdGhlXG4gICAqICAgZG9jdW1lbnRhdGlvbiBvZiB0aGUgY29ycmVzcG9uZGluZyBmdW5jdGlvbiwgRGVjb2RlKHN0cmluZyYsIGZsYWcmKVxuICAgKiAgIGluIHRoZSB7QGxpbmtcbiAgICogICBodHRwczovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UuaW8vaHRtbC9jbGFzc0dlb2dyYXBoaWNMaWJfMV8xRE1TLmh0bWxcbiAgICogICBDKysgRE1TIGNsYXNzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZG1zIHRoZSBzdHJpbmcuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHIgd2hlcmUgci52YWwgaXMgdGhlIGRlY29kZWQgdmFsdWUgKGRlZ3JlZXMpIGFuZCByLmluZFxuICAgKiAgIGlzIGEgaGVtaXNwaGVyZSBkZXNpZ25hdG9yLCBvbmUgb2YgTk9ORSwgTEFUSVRVREUsIExPTkdJVFVERS5cbiAgICogQHRocm93cyBhbiBlcnJvciBpZiB0aGUgc3RyaW5nIGlzIGlsbGVnYWwuXG4gICAqL1xuICBkLkRlY29kZSA9IGZ1bmN0aW9uKGRtcykge1xuICAgIHZhciBkbXNhID0gZG1zLCBlbmQsXG4gICAgICAgIHYgPSAwLCBpID0gMCwgbWksIHBpLCB2YWxzLFxuICAgICAgICBpbmQxID0gZC5OT05FLCBpbmQyLCBwLCBwYSwgcGI7XG4gICAgZG1zYSA9IGRtc2FcbiAgICAgIC5yZXBsYWNlKC9cXHUwMGIwL2csICdkJyApIC8vIFUrMDBiMCBkZWdyZWUgc3ltYm9sXG4gICAgICAucmVwbGFjZSgvXFx1MDBiYS9nLCAnZCcgKSAvLyBVKzAwYmEgYWx0IHN5bWJvbFxuICAgICAgLnJlcGxhY2UoL1xcdTIwNzAvZywgJ2QnICkgLy8gVSsyMDcwIHN1cCB6ZXJvXG4gICAgICAucmVwbGFjZSgvXFx1MDJkYS9nLCAnZCcgKSAvLyBVKzAyZGEgcmluZyBhYm92ZVxuICAgICAgLnJlcGxhY2UoL1xcdTIyMTgvZywgJ2QnICkgLy8gVSsyMjE4IGNvbXBvc2UgZnVuY3Rpb25cbiAgICAgIC5yZXBsYWNlKC9cXCovZyAgICAsICdkJyApIC8vIEdSaUQgc3ltYm9sIGZvciBkZWdyZWVcblxuICAgICAgLnJlcGxhY2UoL2AvZyAgICAgLCAnZCcgKSAvLyBncmF2ZSBhY2NlbnRcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDMyL2csICdcXCcnKSAvLyBVKzIwMzIgcHJpbWVcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDM1L2csICdcXCcnKSAvLyBVKzIwMzUgYmFjayBwcmltZVxuICAgICAgLnJlcGxhY2UoL1xcdTAwYjQvZywgJ1xcJycpIC8vIFUrMDBiNCBhY3V0ZSBhY2NlbnRcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDE4L2csICdcXCcnKSAvLyBVKzIwMTggbGVmdCBzaW5nbGUgcXVvdGVcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDE5L2csICdcXCcnKSAvLyBVKzIwMTkgcmlnaHQgc2luZ2xlIHF1b3RlXG4gICAgICAucmVwbGFjZSgvXFx1MjAxYi9nLCAnXFwnJykgLy8gVSsyMDFiIHJldmVyc2VkLTkgc2luZ2xlIHF1b3RlXG4gICAgICAucmVwbGFjZSgvXFx1MDJiOS9nLCAnXFwnJykgLy8gVSswMmI5IG1vZGlmaWVyIGxldHRlciBwcmltZVxuICAgICAgLnJlcGxhY2UoL1xcdTAyY2EvZywgJ1xcJycpIC8vIFUrMDJjYSBtb2RpZmllciBsZXR0ZXIgYWN1dGUgYWNjZW50XG4gICAgICAucmVwbGFjZSgvXFx1MDJjYi9nLCAnXFwnJykgLy8gVSswMmNiIG1vZGlmaWVyIGxldHRlciBncmF2ZSBhY2NlbnRcblxuICAgICAgLnJlcGxhY2UoL1xcdTIwMzMvZywgJ1wiJyApIC8vIFUrMjAzMyBkb3VibGUgcHJpbWVcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDM2L2csICdcIicgKSAvLyBVKzIwMzYgcmV2ZXJzZWQgZG91YmxlIHByaW1lXG4gICAgICAucmVwbGFjZSgvXFx1MDJkZC9nLCAnXCInICkgLy8gVSswMmRkIGRvdWJsZSBhY3V0ZSBhY2NlbnRcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDFjL2csICdcIicgKSAvLyBVKzIwMWQgbGVmdCBkb3VibGUgcXVvdGVcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDFkL2csICdcIicgKSAvLyBVKzIwMWQgcmlnaHQgZG91YmxlIHF1b3RlXG4gICAgICAucmVwbGFjZSgvXFx1MjAxZi9nLCAnXCInICkgLy8gVSsyMDFmIHJldmVyc2VkLTkgZG91YmxlIHF1b3RlXG4gICAgICAucmVwbGFjZSgvXFx1MDJiYS9nLCAnXCInICkgLy8gVSswMmJhIG1vZGlmaWVyIGxldHRlciBkb3VibGUgcHJpbWVcblxuICAgICAgLnJlcGxhY2UoL1xcdTI3OTUvZywgJysnICkgLy8gVSsyNzk1IGhlYXZ5IHBsdXNcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDY0L2csICcrJyApIC8vIFUrMjA2NCBpbnZpc2libGUgcGx1c1xuXG4gICAgICAucmVwbGFjZSgvXFx1MjAxMC9nLCAnLScgKSAvLyBVKzIwMTAgZGFzaFxuICAgICAgLnJlcGxhY2UoL1xcdTIwMTEvZywgJy0nICkgLy8gVSsyMDExIG5vbi1icmVha2luZyBoeXBoZW5cbiAgICAgIC5yZXBsYWNlKC9cXHUyMDEzL2csICctJyApIC8vIFUrMjAxMyBlbiBkYXNoXG4gICAgICAucmVwbGFjZSgvXFx1MjAxNC9nLCAnLScgKSAvLyBVKzIwMTQgZW0gZGFzaFxuICAgICAgLnJlcGxhY2UoL1xcdTIyMTIvZywgJy0nICkgLy8gVSsyMjEyIG1pbnVzIHNpZ25cbiAgICAgIC5yZXBsYWNlKC9cXHUyNzk2L2csICctJyApIC8vIFUrMjc5NiBoZWF2eSBtaW51c1xuXG4gICAgICAucmVwbGFjZSgvXFx1MDBhMC9nLCAnJyAgKSAvLyBVKzAwYTAgbm9uLWJyZWFraW5nIHNwYWNlXG4gICAgICAucmVwbGFjZSgvXFx1MjAwNy9nLCAnJyAgKSAvLyBVKzIwMDcgZmlndXJlIHNwYWNlXG4gICAgICAucmVwbGFjZSgvXFx1MjAwOS9nLCAnJyAgKSAvLyBVKzIwMDkgdGhpbiBzcGFjZVxuICAgICAgLnJlcGxhY2UoL1xcdTIwMGEvZywgJycgICkgLy8gVSsyMDBhIGhhaXIgc3BhY2VcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDBiL2csICcnICApIC8vIFUrMjAwYiBpbnZpc2libGUgc3BhY2VcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDJmL2csICcnICApIC8vIFUrMjAyZiBuYXJyb3cgc3BhY2VcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDYzL2csICcnICApIC8vIFUrMjA2MyBpbnZpc2libGUgc2VwYXJhdG9yXG5cbiAgICAgIC5yZXBsYWNlKC8nJy9nLCAgICAgJ1wiJyApIC8vICcnIC0+IFwiXG5cbiAgICAgIC50cmltKCk7XG5cbiAgICBlbmQgPSBkbXNhLmxlbmd0aDtcbiAgICAvLyBwIGlzIHBvaW50ZXIgdG8gdGhlIG5leHQgcGllY2UgdGhhdCBuZWVkcyBkZWNvZGluZ1xuICAgIGZvciAocCA9IDA7IHAgPCBlbmQ7IHAgPSBwYiwgKytpKSB7XG4gICAgICBwYSA9IHA7XG4gICAgICAvLyBTa2lwIG92ZXIgaW5pdGlhbCBoZW1pc3BoZXJlIGxldHRlciAoZm9yIGkgPT0gMClcbiAgICAgIGlmIChpID09PSAwICYmIGxvb2t1cChoZW1pc3BoZXJlc18sIGRtc2EuY2hhckF0KHBhKSkgPj0gMClcbiAgICAgICAgKytwYTtcbiAgICAgIC8vIFNraXAgb3ZlciBpbml0aWFsIHNpZ24gKGNoZWNraW5nIGZvciBpdCBpZiBpID09IDApXG4gICAgICBpZiAoaSA+IDAgfHwgKHBhIDwgZW5kICYmIGxvb2t1cChzaWduc18sIGRtc2EuY2hhckF0KHBhKSkgPj0gMCkpXG4gICAgICAgICsrcGE7XG4gICAgICAvLyBGaW5kIG5leHQgc2lnblxuICAgICAgbWkgPSBkbXNhLnN1YnN0cihwYSwgZW5kIC0gcGEpLmluZGV4T2YoJy0nKTtcbiAgICAgIHBpID0gZG1zYS5zdWJzdHIocGEsIGVuZCAtIHBhKS5pbmRleE9mKCcrJyk7XG4gICAgICBpZiAobWkgPCAwKSBtaSA9IGVuZDsgZWxzZSBtaSArPSBwYTtcbiAgICAgIGlmIChwaSA8IDApIHBpID0gZW5kOyBlbHNlIHBpICs9IHBhO1xuICAgICAgcGIgPSBNYXRoLm1pbihtaSwgcGkpO1xuICAgICAgdmFscyA9IGludGVybmFsRGVjb2RlKGRtc2Euc3Vic3RyKHAsIHBiIC0gcCkpO1xuICAgICAgdiArPSB2YWxzLnZhbDsgaW5kMiA9IHZhbHMuaW5kO1xuICAgICAgaWYgKGluZDEgPT09IGQuTk9ORSlcbiAgICAgICAgaW5kMSA9IGluZDI7XG4gICAgICBlbHNlIGlmICghKGluZDIgPT09IGQuTk9ORSB8fCBpbmQxID09PSBpbmQyKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb21wYXRpYmxlIGhlbWlzcGhlcmUgc3BlY2lmaWVzIGluIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtc2Euc3Vic3RyKDAsIHBiKSk7XG4gICAgfVxuICAgIGlmIChpID09PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgb3IgaW5jb21wbGV0ZSBETVMgc3RyaW5nIFwiICsgZG1zYSk7XG4gICAgcmV0dXJuIHt2YWw6IHYsIGluZDogaW5kMX07XG4gIH07XG5cbiAgaW50ZXJuYWxEZWNvZGUgPSBmdW5jdGlvbihkbXNhKSB7XG4gICAgdmFyIHZhbHMgPSB7fSwgZXJyb3Jtc2cgPSBcIlwiLFxuICAgICAgICBzaWduLCBiZWcsIGVuZCwgaW5kMSwgayxcbiAgICAgICAgaXBpZWNlcywgZnBpZWNlcywgbnBpZWNlLFxuICAgICAgICBpY3VycmVudCwgZmN1cnJlbnQsIG5jdXJyZW50LCBwLFxuICAgICAgICBwb2ludHNlZW4sXG4gICAgICAgIGRpZ2NvdW50LCBpbnRjb3VudCxcbiAgICAgICAgeDtcbiAgICBkbyB7ICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRlZCBvbmNlIChwcm92aWRlcyB0aGUgYWJpbGl0eSB0byBicmVhaylcbiAgICAgIHNpZ24gPSAxO1xuICAgICAgYmVnID0gMDsgZW5kID0gZG1zYS5sZW5ndGg7XG4gICAgICBpbmQxID0gZC5OT05FO1xuICAgICAgayA9IC0xO1xuICAgICAgaWYgKGVuZCA+IGJlZyAmJiAoayA9IGxvb2t1cChoZW1pc3BoZXJlc18sIGRtc2EuY2hhckF0KGJlZykpKSA+PSAwKSB7XG4gICAgICAgIGluZDEgPSAoayAmIDIpID8gZC5MT05HSVRVREUgOiBkLkxBVElUVURFO1xuICAgICAgICBzaWduID0gKGsgJiAxKSA/IDEgOiAtMTtcbiAgICAgICAgKytiZWc7XG4gICAgICB9XG4gICAgICBpZiAoZW5kID4gYmVnICYmXG4gICAgICAgICAgKGsgPSBsb29rdXAoaGVtaXNwaGVyZXNfLCBkbXNhLmNoYXJBdChlbmQtMSkpKSA+PSAwKSB7XG4gICAgICAgIGlmIChrID49IDApIHtcbiAgICAgICAgICBpZiAoaW5kMSAhPT0gZC5OT05FKSB7XG4gICAgICAgICAgICBpZiAoZG1zYS5jaGFyQXQoYmVnIC0gMSkudG9VcHBlckNhc2UoKSA9PT1cbiAgICAgICAgICAgICAgICBkbXNhLmNoYXJBdChlbmQgLSAxKS50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgICAgICBlcnJvcm1zZyA9IFwiUmVwZWF0ZWQgaGVtaXNwaGVyZSBpbmRpY2F0b3JzIFwiICtcbiAgICAgICAgICAgICAgZG1zYS5jaGFyQXQoYmVnIC0gMSkgKyBcIiBpbiBcIiArXG4gICAgICAgICAgICAgIGRtc2Euc3Vic3RyKGJlZyAtIDEsIGVuZCAtIGJlZyArIDEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBlcnJvcm1zZyA9IFwiQ29udHJhZGljdG9yeSBoZW1pc3BoZXJlIGluZGljYXRvcnMgXCIgK1xuICAgICAgICAgICAgICBkbXNhLmNoYXJBdChiZWcgLSAxKSArIFwiIGFuZCBcIiArIGRtc2EuY2hhckF0KGVuZCAtIDEpICsgXCIgaW4gXCIgK1xuICAgICAgICAgICAgICBkbXNhLnN1YnN0cihiZWcgLSAxLCBlbmQgLSBiZWcgKyAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmQxID0gKGsgJiAyKSA/IGQuTE9OR0lUVURFIDogZC5MQVRJVFVERTtcbiAgICAgICAgICBzaWduID0gKGsgJiAxKSA/IDEgOiAtMTtcbiAgICAgICAgICAtLWVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVuZCA+IGJlZyAmJiAoayA9IGxvb2t1cChzaWduc18sIGRtc2EuY2hhckF0KGJlZykpKSA+PSAwKSB7XG4gICAgICAgIGlmIChrID49IDApIHtcbiAgICAgICAgICBzaWduICo9IGsgPyAxIDogLTE7XG4gICAgICAgICAgKytiZWc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbmQgPT09IGJlZykge1xuICAgICAgICBlcnJvcm1zZyA9IFwiRW1wdHkgb3IgaW5jb21wbGV0ZSBETVMgc3RyaW5nIFwiICsgZG1zYTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpcGllY2VzID0gWzAsIDAsIDBdO1xuICAgICAgZnBpZWNlcyA9IFswLCAwLCAwXTtcbiAgICAgIG5waWVjZSA9IDA7XG4gICAgICBpY3VycmVudCA9IDA7XG4gICAgICBmY3VycmVudCA9IDA7XG4gICAgICBuY3VycmVudCA9IDA7XG4gICAgICBwID0gYmVnO1xuICAgICAgcG9pbnRzZWVuID0gZmFsc2U7XG4gICAgICBkaWdjb3VudCA9IDA7XG4gICAgICBpbnRjb3VudCA9IDA7XG4gICAgICB3aGlsZSAocCA8IGVuZCkge1xuICAgICAgICB4ID0gZG1zYS5jaGFyQXQocCsrKTtcbiAgICAgICAgaWYgKChrID0gbG9va3VwKGRpZ2l0c18sIHgpKSA+PSAwKSB7XG4gICAgICAgICAgKytuY3VycmVudDtcbiAgICAgICAgICBpZiAoZGlnY291bnQgPiAwKSB7XG4gICAgICAgICAgICArK2RpZ2NvdW50OyAgICAgICAgIC8vIENvdW50IG9mIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGljdXJyZW50ID0gMTAgKiBpY3VycmVudCArIGs7XG4gICAgICAgICAgICArK2ludGNvdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh4ID09PSAnLicpIHtcbiAgICAgICAgICBpZiAocG9pbnRzZWVuKSB7XG4gICAgICAgICAgICBlcnJvcm1zZyA9IFwiTXVsdGlwbGUgZGVjaW1hbCBwb2ludHMgaW4gXCIgK1xuICAgICAgICAgICAgICBkbXNhLnN1YnN0cihiZWcsIGVuZCAtIGJlZyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnRzZWVuID0gdHJ1ZTtcbiAgICAgICAgICBkaWdjb3VudCA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoKGsgPSBsb29rdXAoZG1zaW5kaWNhdG9yc18sIHgpKSA+PSAwKSB7XG4gICAgICAgICAgaWYgKGsgPj0gMykge1xuICAgICAgICAgICAgaWYgKHAgPT09IGVuZCkge1xuICAgICAgICAgICAgICBlcnJvcm1zZyA9IFwiSWxsZWdhbCBmb3IgY29sb24gdG8gYXBwZWFyIGF0IHRoZSBlbmQgb2YgXCIgK1xuICAgICAgICAgICAgICAgIGRtc2Euc3Vic3RyKGJlZywgZW5kIC0gYmVnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrID0gbnBpZWNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoayA9PT0gbnBpZWNlIC0gMSkge1xuICAgICAgICAgICAgZXJyb3Jtc2cgPSBcIlJlcGVhdGVkIFwiICsgY29tcG9uZW50c19ba10gK1xuICAgICAgICAgICAgICBcIiBjb21wb25lbnQgaW4gXCIgKyBkbXNhLnN1YnN0cihiZWcsIGVuZCAtIGJlZyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGsgPCBucGllY2UpIHtcbiAgICAgICAgICAgIGVycm9ybXNnID0gY29tcG9uZW50c19ba10gKyBcIiBjb21wb25lbnQgZm9sbG93cyBcIiArXG4gICAgICAgICAgICAgIGNvbXBvbmVudHNfW25waWVjZSAtIDFdICsgXCIgY29tcG9uZW50IGluIFwiICtcbiAgICAgICAgICAgICAgZG1zYS5zdWJzdHIoYmVnLCBlbmQgLSBiZWcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgICAgZXJyb3Jtc2cgPSBcIk1pc3NpbmcgbnVtYmVycyBpbiBcIiArIGNvbXBvbmVudHNfW2tdICtcbiAgICAgICAgICAgICAgXCIgY29tcG9uZW50IG9mIFwiICsgZG1zYS5zdWJzdHIoYmVnLCBlbmQgLSBiZWcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkaWdjb3VudCA+IDApIHtcbiAgICAgICAgICAgIGZjdXJyZW50ID0gcGFyc2VGbG9hdChkbXNhLnN1YnN0cihwIC0gaW50Y291bnQgLSBkaWdjb3VudCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50Y291bnQgKyBkaWdjb3VudCkpO1xuICAgICAgICAgICAgaWN1cnJlbnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpcGllY2VzW2tdID0gaWN1cnJlbnQ7XG4gICAgICAgICAgZnBpZWNlc1trXSA9IGljdXJyZW50ICsgZmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHAgPCBlbmQpIHtcbiAgICAgICAgICAgIG5waWVjZSA9IGsgKyAxO1xuICAgICAgICAgICAgaWN1cnJlbnQgPSBmY3VycmVudCA9IDA7XG4gICAgICAgICAgICBuY3VycmVudCA9IGRpZ2NvdW50ID0gaW50Y291bnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsb29rdXAoc2lnbnNfLCB4KSA+PSAwKSB7XG4gICAgICAgICAgZXJyb3Jtc2cgPSBcIkludGVybmFsIHNpZ24gaW4gRE1TIHN0cmluZyBcIiArXG4gICAgICAgICAgICBkbXNhLnN1YnN0cihiZWcsIGVuZCAtIGJlZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyb3Jtc2cgPSBcIklsbGVnYWwgY2hhcmFjdGVyIFwiICsgeCArIFwiIGluIERNUyBzdHJpbmcgXCIgK1xuICAgICAgICAgICAgZG1zYS5zdWJzdHIoYmVnLCBlbmQgLSBiZWcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3Jtc2cubGVuZ3RoKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmIChsb29rdXAoZG1zaW5kaWNhdG9yc18sIGRtc2EuY2hhckF0KHAgLSAxKSkgPCAwKSB7XG4gICAgICAgIGlmIChucGllY2UgPj0gMykge1xuICAgICAgICAgIGVycm9ybXNnID0gXCJFeHRyYSB0ZXh0IGZvbGxvd2luZyBzZWNvbmRzIGluIERNUyBzdHJpbmcgXCIgK1xuICAgICAgICAgICAgZG1zYS5zdWJzdHIoYmVnLCBlbmQgLSBiZWcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGVycm9ybXNnID0gXCJNaXNzaW5nIG51bWJlcnMgaW4gdHJhaWxpbmcgY29tcG9uZW50IG9mIFwiICtcbiAgICAgICAgICAgIGRtc2Euc3Vic3RyKGJlZywgZW5kIC0gYmVnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlnY291bnQgPiAwKSB7XG4gICAgICAgICAgZmN1cnJlbnQgPSBwYXJzZUZsb2F0KGRtc2Euc3Vic3RyKHAgLSBpbnRjb3VudCAtIGRpZ2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRjb3VudCArIGRpZ2NvdW50KSk7XG4gICAgICAgICAgaWN1cnJlbnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlwaWVjZXNbbnBpZWNlXSA9IGljdXJyZW50O1xuICAgICAgICBmcGllY2VzW25waWVjZV0gPSBpY3VycmVudCArIGZjdXJyZW50O1xuICAgICAgfVxuICAgICAgaWYgKHBvaW50c2VlbiAmJiBkaWdjb3VudCA9PT0gMCkge1xuICAgICAgICBlcnJvcm1zZyA9IFwiRGVjaW1hbCBwb2ludCBpbiBub24tdGVybWluYWwgY29tcG9uZW50IG9mIFwiICtcbiAgICAgICAgICBkbXNhLnN1YnN0cihiZWcsIGVuZCAtIGJlZyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTm90ZSB0aGF0IHdlIGFjY2VwdCA1OS45OTk5OTkuLi4gZXZlbiB0aG91Z2ggaXQgcm91bmRzIHRvIDYwLlxuICAgICAgaWYgKGlwaWVjZXNbMV0gPj0gNjAgfHwgZnBpZWNlc1sxXSA+IDYwKSB7XG4gICAgICAgIGVycm9ybXNnID0gXCJNaW51dGVzIFwiICsgZnBpZWNlc1sxXSArIFwiIG5vdCBpbiByYW5nZSBbMCw2MClcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaXBpZWNlc1syXSA+PSA2MCB8fCBmcGllY2VzWzJdID4gNjApIHtcbiAgICAgICAgZXJyb3Jtc2cgPSBcIlNlY29uZHMgXCIgKyBmcGllY2VzWzJdICsgXCIgbm90IGluIHJhbmdlIFswLDYwKVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHMuaW5kID0gaW5kMTtcbiAgICAgIC8vIEFzc3VtZSBjaGVjayBvbiByYW5nZSBvZiByZXN1bHQgaXMgbWFkZSBieSBjYWxsaW5nIHJvdXRpbmUgKHdoaWNoXG4gICAgICAvLyBtaWdodCBiZSBhYmxlIHRvIG9mZmVyIGEgYmV0dGVyIGRpYWdub3N0aWMpLlxuICAgICAgdmFscy52YWwgPSBzaWduICpcbiAgICAgICAgKCBmcGllY2VzWzJdID8gKDYwKig2MCpmcGllY2VzWzBdICsgZnBpZWNlc1sxXSkgKyBmcGllY2VzWzJdKSAvIDM2MDAgOlxuICAgICAgICAgICggZnBpZWNlc1sxXSA/ICg2MCpmcGllY2VzWzBdICsgZnBpZWNlc1sxXSkgLyA2MCA6IGZwaWVjZXNbMF0gKSApO1xuICAgICAgcmV0dXJuIHZhbHM7XG4gICAgfSB3aGlsZSAoZmFsc2UpO1xuICAgIHZhbHMudmFsID0gbnVtTWF0Y2goZG1zYSk7XG4gICAgaWYgKHZhbHMudmFsID09PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9ybXNnKTtcbiAgICBlbHNlXG4gICAgICB2YWxzLmluZCA9IGQuTk9ORTtcbiAgICByZXR1cm4gdmFscztcbiAgfTtcblxuICBudW1NYXRjaCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgdCwgc2lnbiwgcDAsIHAxO1xuICAgIGlmIChzLmxlbmd0aCA8IDMpXG4gICAgICByZXR1cm4gMDtcbiAgICB0ID0gcy50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoLzArJC8sIFwiXCIpO1xuICAgIHNpZ24gPSB0LmNoYXJBdCgwKSA9PT0gJy0nID8gLTEgOiAxO1xuICAgIHAwID0gdC5jaGFyQXQoMCkgPT09ICctJyB8fCB0LmNoYXJBdCgwKSA9PT0gJysnID8gMSA6IDA7XG4gICAgcDEgPSB0Lmxlbmd0aCAtIDE7XG4gICAgaWYgKHAxICsgMSA8IHAwICsgMylcbiAgICAgIHJldHVybiAwO1xuICAgIC8vIFN0cmlwIG9mZiBzaWduIGFuZCB0cmFpbGluZyAwc1xuICAgIHQgPSB0LnN1YnN0cihwMCwgcDEgKyAxIC0gcDApOyAvLyBMZW5ndGggYXQgbGVhc3QgM1xuICAgIGlmICh0ID09PSBcIk5BTlwiIHx8IHQgPT09IFwiMS4jUU5BTlwiIHx8IHQgPT09IFwiMS4jU05BTlwiIHx8IHQgPT09IFwiMS4jSU5EXCIgfHxcbiAgICAgICAgdCA9PT0gXCIxLiNSXCIpXG4gICAgICByZXR1cm4gTnVtYmVyLk5hTjtcbiAgICBlbHNlIGlmICh0ID09PSBcIklORlwiIHx8IHQgPT09IFwiMS4jSU5GXCIpXG4gICAgICByZXR1cm4gc2lnbiAqIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvKipcbiAgICogQHN1bW1hcnkgRGVjb2RlIHR3byBETVMgc3RyaW5ncyBpbnRlcnByZXRpbmcgdGhlbSBhcyBhIGxhdGl0dWRlL2xvbmdpdHVkZVxuICAgKiAgIHBhaXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJhIHRoZSBmaXJzdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJiIHRoZSBmaXJzdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7Ym9vbH0gW2xvbmdmaXJzdCA9IGZhbHNlXSBpZiB0cnVlIGFzc3VtZSB0aGVuIGxvbmdpdHVkZSBpcyBnaXZlblxuICAgKiAgIGZpcnN0IChpbiB0aGUgYWJzZW5jZSBvZiBhbnkgaGVtaXNwaGVyZSBpbmRpY2F0b3JzKS5cbiAgICogQHJldHVybnMge29iamVjdH0gciB3aGVyZSByLmxhdCBpcyB0aGUgZGVjb2RlZCBsYXRpdHVkZSBhbmQgci5sb24gaXMgdGhlXG4gICAqICAgZGVjb2RlZCBsb25naXR1ZGUgKGJvdGggaW4gZGVncmVlcykuXG4gICAqIEB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIHN0cmluZ3MgYXJlIGlsbGVnYWwuXG4gICAqL1xuICBkLkRlY29kZUxhdExvbiA9IGZ1bmN0aW9uKHN0cmEsIHN0cmIsIGxvbmdmaXJzdCkge1xuICAgIHZhciB2YWxzID0ge30sXG4gICAgICAgIHZhbHNhID0gZC5EZWNvZGUoc3RyYSksXG4gICAgICAgIHZhbHNiID0gZC5EZWNvZGUoc3RyYiksXG4gICAgICAgIGEgPSB2YWxzYS52YWwsIGlhID0gdmFsc2EuaW5kLFxuICAgICAgICBiID0gdmFsc2IudmFsLCBpYiA9IHZhbHNiLmluZCxcbiAgICAgICAgbGF0LCBsb247XG4gICAgaWYgKCFsb25nZmlyc3QpIGxvbmdmaXJzdCA9IGZhbHNlO1xuICAgIGlmIChpYSA9PT0gZC5OT05FICYmIGliID09PSBkLk5PTkUpIHtcbiAgICAgIC8vIERlZmF1bHQgdG8gbGF0LCBsb25nIHVubGVzcyBsb25nZmlyc3RcbiAgICAgIGlhID0gbG9uZ2ZpcnN0ID8gZC5MT05HSVRVREUgOiBkLkxBVElUVURFO1xuICAgICAgaWIgPSBsb25nZmlyc3QgPyBkLkxBVElUVURFIDogZC5MT05HSVRVREU7XG4gICAgfSBlbHNlIGlmIChpYSA9PT0gZC5OT05FKVxuICAgICAgaWEgPSBkLkxBVElUVURFICsgZC5MT05HSVRVREUgLSBpYjtcbiAgICBlbHNlIGlmIChpYiA9PT0gZC5OT05FKVxuICAgICAgaWIgPSBkLkxBVElUVURFICsgZC5MT05HSVRVREUgLSBpYTtcbiAgICBpZiAoaWEgPT09IGliKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm90aCBcIiArIHN0cmEgKyBcIiBhbmQgXCIgKyBzdHJiICsgXCIgaW50ZXJwcmV0ZWQgYXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIChpYSA9PT0gZC5MQVRJVFVERSA/IFwibGF0aXR1ZGVzXCIgOiBcImxvbmdpdHVkZXNcIikpO1xuICAgIGxhdCA9IGlhID09PSBkLkxBVElUVURFID8gYSA6IGI7XG4gICAgbG9uID0gaWEgPT09IGQuTEFUSVRVREUgPyBiIDogYTtcbiAgICBpZiAoTWF0aC5hYnMobGF0KSA+IDkwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGF0aXR1ZGUgXCIgKyBsYXQgKyBcIiBub3QgaW4gWy05MCw5MF1cIik7XG4gICAgdmFscy5sYXQgPSBsYXQ7XG4gICAgdmFscy5sb24gPSBsb247XG4gICAgcmV0dXJuIHZhbHM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IERlY29kZSBhIERNUyBzdHJpbmcgaW50ZXJwcmV0aW5nIGl0IGFzIGFuIGFyYyBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhbmdzdHIgdGhlIHN0cmluZyAodGhpcyBtdXN0IG5vdCBpbmNsdWRlIGEgaGVtaXNwaGVyZVxuICAgKiAgIGluZGljYXRvcikuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBhcmMgbGVuZ3RoIChkZWdyZWVzKS5cbiAgICogQHRocm93cyBhbiBlcnJvciBpZiB0aGUgc3RyaW5nIGlzIGlsbGVnYWwuXG4gICAqL1xuICBkLkRlY29kZUFuZ2xlID0gZnVuY3Rpb24oYW5nc3RyKSB7XG4gICAgdmFyIHZhbHMgPSBkLkRlY29kZShhbmdzdHIpLFxuICAgICAgICBhbmcgPSB2YWxzLnZhbCwgaW5kID0gdmFscy5pbmQ7XG4gICAgaWYgKGluZCAhPT0gZC5OT05FKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJjIGFuZ2xlIFwiICsgYW5nc3RyICtcbiAgICAgICAgICAgICAgICAgICAgICBcIiBpbmNsdWRlcyBhIGhlbWlzcGhlcmUgTi9FL1cvU1wiKTtcbiAgICByZXR1cm4gYW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBEZWNvZGUgYSBETVMgc3RyaW5nIGludGVycHJldGluZyBpdCBhcyBhbiBhemltdXRoLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXppc3RyIHRoZSBzdHJpbmcgKHRoaXMgbWF5IGluY2x1ZGUgYW4gRS9XIGhlbWlzcGhlcmVcbiAgICogICBpbmRpY2F0b3IpLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgYXppbXV0aCAoZGVncmVlcykuXG4gICAqIEB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIHN0cmluZyBpcyBpbGxlZ2FsLlxuICAgKi9cbiAgZC5EZWNvZGVBemltdXRoID0gZnVuY3Rpb24oYXppc3RyKSB7XG4gICAgdmFyIHZhbHMgPSBkLkRlY29kZShhemlzdHIpLFxuICAgICAgICBhemkgPSB2YWxzLnZhbCwgaW5kID0gdmFscy5pbmQ7XG4gICAgaWYgKGluZCA9PT0gZC5MQVRJVFVERSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkF6aW11dGggXCIgKyBhemlzdHIgKyBcIiBoYXMgYSBsYXRpdHVkZSBoZW1pc3BoZXJlIE4vU1wiKTtcbiAgICByZXR1cm4gYXppO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb252ZXJ0IGFuZ2xlIChpbiBkZWdyZWVzKSBpbnRvIGEgRE1TIHN0cmluZyAodXNpbmcgJmRlZzssICcsXG4gICAqICBhbmQgJnF1b3Q7KS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIGlucHV0IGFuZ2xlIChkZWdyZWVzKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRyYWlsaW5nIG9uZSBvZiBERUdSRUUsIE1JTlVURSwgb3IgU0VDT05EIHRvIGluZGljYXRlXG4gICAqICAgdGhlIHRyYWlsaW5nIGNvbXBvbmVudCBvZiB0aGUgc3RyaW5nICh0aGlzIGNvbXBvbmVudCBpcyBnaXZlbiBhcyBhXG4gICAqICAgZGVjaW1hbCBudW1iZXIgaWYgbmVjZXNzYXJ5KS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZWMgdGhlIG51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQgZm9yXG4gICAqICAgdGhlIHRyYWlsaW5nIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmQgPSBOT05FXSBhIGZvcm1hdHRpbmcgaW5kaWNhdG9yLCBvbmUgb2YgTk9ORSxcbiAgICogICBMQVRJVFVERSwgTE9OR0lUVURFLCBBWklNVVRILlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgcmVzdWx0aW5nIHN0cmluZyBmb3JtYXR0ZWQgYXMgZm9sbG93czpcbiAgICogICAqIE5PTkUsIHNpZ25lZCByZXN1bHQgbm8gbGVhZGluZyB6ZXJvcyBvbiBkZWdyZWVzIGV4Y2VwdCBpbiB0aGUgdW5pdHNcbiAgICogICAgIHBsYWNlLCBlLmcuLCAtOCZkZWc7MDMnLlxuICAgKiAgICogTEFUSVRVREUsIHRyYWlsaW5nIE4gb3IgUyBoZW1pc3BoZXJlIGRlc2lnbmF0b3IsIG5vIHNpZ24sIHBhZFxuICAgKiAgICAgZGVncmVlcyB0byAyIGRpZ2l0cywgZS5nLiwgMDgmZGVnOzAzJ1MuXG4gICAqICAgKiBMT05HSVRVREUsIHRyYWlsaW5nIEUgb3IgVyBoZW1pc3BoZXJlIGRlc2lnbmF0b3IsIG5vIHNpZ24sIHBhZFxuICAgKiAgICAgZGVncmVlcyB0byAzIGRpZ2l0cywgZS5nLiwgMDA4JmRlZzswMydXLlxuICAgKiAgICogQVpJTVVUSCwgY29udmVydCB0byB0aGUgcmFuZ2UgWzAsIDM2MCZkZWc7KSwgbm8gc2lnbiwgcGFkIGRlZ3JlZXMgdG9cbiAgICogICAgIDMgZGlnaXRzLCBlLmcuLCAzNTEmZGVnOzU3Jy5cbiAgICovXG4gIGQuRW5jb2RlID0gZnVuY3Rpb24oYW5nbGUsIHRyYWlsaW5nLCBwcmVjLCBpbmQpIHtcbiAgICAvLyBBc3N1bWUgY2hlY2sgb24gcmFuZ2Ugb2YgaW5wdXQgYW5nbGUgaGFzIGJlZW4gbWFkZSBieSBjYWxsaW5nXG4gICAgLy8gcm91dGluZSAod2hpY2ggbWlnaHQgYmUgYWJsZSB0byBvZmZlciBhIGJldHRlciBkaWFnbm9zdGljKS5cbiAgICB2YXIgc2NhbGUgPSAxLCBpLCBzaWduLFxuICAgICAgICBpZGVncmVlLCBmZGVncmVlLCBmLCBwaWVjZXMsIGlwLCBmcCwgcztcbiAgICBpZiAoIWluZCkgaW5kID0gZC5OT05FO1xuICAgIGlmICghaXNGaW5pdGUoYW5nbGUpKVxuICAgICAgcmV0dXJuIGFuZ2xlIDwgMCA/IFN0cmluZyhcIi1pbmZcIikgOlxuICAgICAgKGFuZ2xlID4gMCA/IFN0cmluZyhcImluZlwiKSA6IFN0cmluZyhcIm5hblwiKSk7XG5cbiAgICAvLyAxNSAtIDIgKiB0cmFpbGluZyA9IGNlaWxpbmcobG9nMTAoMl41My85MC82MF50cmFpbGluZykpLlxuICAgIC8vIFRoaXMgc3VmZmljZXMgdG8gZ2l2ZSBmdWxsIHJlYWwgcHJlY2lzaW9uIGZvciBudW1iZXJzIGluIFstOTAsOTBdXG4gICAgcHJlYyA9IE1hdGgubWluKDE1IC0gMiAqIHRyYWlsaW5nLCBwcmVjKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdHJhaWxpbmc7ICsraSlcbiAgICAgIHNjYWxlICo9IDYwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBwcmVjOyArK2kpXG4gICAgICBzY2FsZSAqPSAxMDtcbiAgICBpZiAoaW5kID09PSBkLkFaSU1VVEgpXG4gICAgICBhbmdsZSAtPSBNYXRoLmZsb29yKGFuZ2xlLzM2MCkgKiAzNjA7XG4gICAgc2lnbiA9IGFuZ2xlIDwgMCA/IC0xIDogMTtcbiAgICBhbmdsZSAqPSBzaWduO1xuXG4gICAgLy8gQnJlYWsgb2ZmIGludGVnZXIgcGFydCB0byBwcmVzZXJ2ZSBwcmVjaXNpb24gaW4gbWFuaXB1bGF0aW9uIG9mXG4gICAgLy8gZnJhY3Rpb25hbCBwYXJ0LlxuICAgIGlkZWdyZWUgPSBNYXRoLmZsb29yKGFuZ2xlKTtcbiAgICBmZGVncmVlID0gKGFuZ2xlIC0gaWRlZ3JlZSkgKiBzY2FsZSArIDAuNTtcbiAgICBmID0gTWF0aC5mbG9vcihmZGVncmVlKTtcbiAgICAvLyBJbXBsZW1lbnQgdGhlIFwicm91bmQgdGllcyB0byBldmVuXCIgcnVsZVxuICAgIGZkZWdyZWUgPSAoZiA9PT0gZmRlZ3JlZSAmJiAoZiAmIDEpID09PSAxKSA/IGYgLSAxIDogZjtcbiAgICBmZGVncmVlIC89IHNjYWxlO1xuXG4gICAgZmRlZ3JlZSA9IE1hdGguZmxvb3IoKGFuZ2xlIC0gaWRlZ3JlZSkgKiBzY2FsZSArIDAuNSkgLyBzY2FsZTtcbiAgICBpZiAoZmRlZ3JlZSA+PSAxKSB7XG4gICAgICBpZGVncmVlICs9IDE7XG4gICAgICBmZGVncmVlIC09IDE7XG4gICAgfVxuICAgIHBpZWNlcyA9IFtmZGVncmVlLCAwLCAwXTtcbiAgICBmb3IgKGkgPSAxOyBpIDw9IHRyYWlsaW5nOyArK2kpIHtcbiAgICAgIGlwID0gTWF0aC5mbG9vcihwaWVjZXNbaSAtIDFdKTtcbiAgICAgIGZwID0gcGllY2VzW2kgLSAxXSAtIGlwO1xuICAgICAgcGllY2VzW2ldID0gZnAgKiA2MDtcbiAgICAgIHBpZWNlc1tpIC0gMV0gPSBpcDtcbiAgICB9XG4gICAgcGllY2VzWzBdICs9IGlkZWdyZWU7XG4gICAgcyA9IFwiXCI7XG4gICAgaWYgKGluZCA9PT0gZC5OT05FICYmIHNpZ24gPCAwKVxuICAgICAgcyArPSAnLSc7XG4gICAgc3dpdGNoICh0cmFpbGluZykge1xuICAgIGNhc2UgZC5ERUdSRUU6XG4gICAgICBzICs9IHplcm9maWxsKHBpZWNlc1swXS50b0ZpeGVkKHByZWMpLFxuICAgICAgICAgICAgICAgICAgICBpbmQgPT09IGQuTk9ORSA/IDAgOlxuICAgICAgICAgICAgICAgICAgICAxICsgTWF0aC5taW4oaW5kLCAyKSArIHByZWMgKyAocHJlYyA/IDEgOiAwKSkgK1xuICAgICAgICBkbXNpbmRpY2F0b3JzdV8uY2hhckF0KDApO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHMgKz0gemVyb2ZpbGwocGllY2VzWzBdLnRvRml4ZWQoMCksXG4gICAgICAgICAgICAgICAgICAgIGluZCA9PT0gZC5OT05FID8gMCA6IDEgKyBNYXRoLm1pbihpbmQsIDIpKSArXG4gICAgICAgIGRtc2luZGljYXRvcnN1Xy5jaGFyQXQoMCk7XG4gICAgICBzd2l0Y2ggKHRyYWlsaW5nKSB7XG4gICAgICBjYXNlIGQuTUlOVVRFOlxuICAgICAgICBzICs9IHplcm9maWxsKHBpZWNlc1sxXS50b0ZpeGVkKHByZWMpLCAyICsgcHJlYyArIChwcmVjID8gMSA6IDApKSArXG4gICAgICAgICAgZG1zaW5kaWNhdG9yc3VfLmNoYXJBdCgxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGQuU0VDT05EOlxuICAgICAgICBzICs9IHplcm9maWxsKHBpZWNlc1sxXS50b0ZpeGVkKDApLCAyKSArIGRtc2luZGljYXRvcnN1Xy5jaGFyQXQoMSk7XG4gICAgICAgIHMgKz0gemVyb2ZpbGwocGllY2VzWzJdLnRvRml4ZWQocHJlYyksIDIgKyBwcmVjICsgKHByZWMgPyAxIDogMCkpICtcbiAgICAgICAgICBkbXNpbmRpY2F0b3JzdV8uY2hhckF0KDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5kICE9PSBkLk5PTkUgJiYgaW5kICE9PSBkLkFaSU1VVEgpXG4gICAgICBzICs9IGhlbWlzcGhlcmVzXy5jaGFyQXQoKGluZCA9PT0gZC5MQVRJVFVERSA/IDAgOiAyKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNpZ24gPCAwID8gMCA6IDEpKTtcbiAgICByZXR1cm4gcztcbiAgfTtcbn0pKEdlb2dyYXBoaWNMaWIuRE1TKTtcblxuY2IoR2VvZ3JhcGhpY0xpYik7XG5cbn0pKGZ1bmN0aW9uKGdlbykge1xuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAvKioqKioqKiogc3VwcG9ydCBsb2FkaW5nIHdpdGggbm9kZSdzIHJlcXVpcmUgKioqKioqKiovXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBnZW87XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLyoqKioqKioqIHN1cHBvcnQgbG9hZGluZyB3aXRoIEFNRCAqKioqKioqKi9cbiAgICBkZWZpbmUoJ2dlb2dyYXBoaWNsaWInLCBbXSwgZnVuY3Rpb24oKSB7IHJldHVybiBnZW87IH0pO1xuICB9IGVsc2Uge1xuICAgIC8qKioqKioqKiBvdGhlcndpc2UganVzdCBwb2xsdXRlIG91ciBnbG9iYWwgbmFtZXNwYWNlICoqKioqKioqL1xuICAgIHdpbmRvdy5HZW9ncmFwaGljTGliID0gZ2VvO1xuICB9XG59KTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiaW1wb3J0ICogYXMgR2VvTGliIGZyb20gJ2dlb2dyYXBoaWNsaWInO1xuXG5jb25zdCBHZW9kZXNpYyA9IEdlb0xpYi5HZW9kZXNpYy5XR1M4NDtcblxuY29uc3QgZ2V0UGF0aFN0YXRzID0gKHBhdGgpID0+IHtcbiAgY29uc3Qgc3RhcnQgPSBwYXRoWzBdO1xuICBjb25zdCBlbmQgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cbiAgY29uc3Qgc3RyYWlnaHRMaW5lID0gR2VvZGVzaWMuSW52ZXJzZUxpbmUoLi4uc3RhcnQsIC4uLmVuZCk7XG4gIGNvbnN0IHN0cmFpZ2h0TGluZVBvaW50ID0gKG1ldGVycykgPT4ge1xuICAgIGNvbnN0IHBvaW50T25MaW5lID0gR2VvZGVzaWMuRGlyZWN0KFxuICAgICAgc3RyYWlnaHRMaW5lLmxhdDEsXG4gICAgICBzdHJhaWdodExpbmUubG9uMSxcbiAgICAgIHN0cmFpZ2h0TGluZS5hemkxLFxuICAgICAgbWV0ZXJzLFxuICAgICk7XG5cbiAgICByZXR1cm4gW3BvaW50T25MaW5lLmxhdDIsIHBvaW50T25MaW5lLmxvbjJdO1xuICB9O1xuXG4gIGNvbnN0IGRpc3RhbmNlID0gKHBvaW50QSwgcG9pbnRCKSA9PiBHZW9kZXNpYy5JbnZlcnNlKC4uLnBvaW50QSwgLi4ucG9pbnRCKS5zMTI7XG5cbiAgY29uc3QgYWRkID0gKFt4MSwgeTFdLCBbeDIsIHkyXSkgPT4gW3gxICsgeDIsIHkxICsgeTJdO1xuICBjb25zdCBzdWJ0cmFjdCA9IChbeDEsIHkxXSwgW3gyLCB5Ml0pID0+IFt4MSAtIHgyLCB5MSAtIHkyXTtcbiAgY29uc3QgbXVsdGlwbHkgPSAoW3gsIHldLCBzY2FsYXIpID0+IFt4ICogc2NhbGFyLCB5ICogc2NhbGFyXTtcbiAgY29uc3QgZG90UHJvZHVjdCA9IChbeDEsIHkxXSwgW3gyLCB5Ml0pID0+IHgxICogeDIgKyB5MSAqIHkyO1xuICBjb25zdCBjcm9zc1Byb2R1Y3QgPSAoW3gxLCB5MV0sIFt4MiwgeTJdKSA9PiB4MSAqIHkyIC0geTEgKiB4MjtcblxuICBjb25zdCBnZXRQZXJwZW5kaWN1bGFyID0gKFt4LCB5XSkgPT4gW3ksIC14XTtcblxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTY1MjgyLzk5Njc1NDNcbiAgZnVuY3Rpb24gaW50ZXJzZWN0TGluZXMocCwgciwgcSwgcykge1xuICAgIGNvbnN0IHJDcm9zc1MgPSBjcm9zc1Byb2R1Y3Qociwgcyk7XG4gICAgY29uc3QgcU1pbnVzUENyb3NzUyA9IGNyb3NzUHJvZHVjdChzdWJ0cmFjdChxLCBwKSwgcyk7XG4gICAgY29uc3QgcU1pbnVzUENyb3NzUiA9IGNyb3NzUHJvZHVjdChzdWJ0cmFjdChxLCBwKSwgcik7XG5cbiAgICBpZiAockNyb3NzUyA9PT0gMCAmJiBxTWludXNQQ3Jvc3NSID09PSAwKSB7XG4gICAgICAvLyBMaW5lcyBhcmUgY29sbGluZWFyXG4gICAgICAvLyBUT0RPOiBjaGVjayBpZiBsaW5lcyBvdmVybGFwXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAockNyb3NzUyA9PT0gMCAmJiBxTWludXNQQ3Jvc3NSICE9PSAwKSB7XG4gICAgICAvLyBMaW5lcyBhcmUgcGFyYWxsZWxcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHQgPSBxTWludXNQQ3Jvc3NTIC8gckNyb3NzUztcbiAgICByZXR1cm4gYWRkKHAsIG11bHRpcGx5KHIsIHQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdFZlY3RvckFuZExpbmUocCwgciwgcSwgcykge1xuICAgIGNvbnN0IHJDcm9zc1MgPSBjcm9zc1Byb2R1Y3Qociwgcyk7XG4gICAgY29uc3QgcU1pbnVzUENyb3NzUyA9IGNyb3NzUHJvZHVjdChzdWJ0cmFjdChxLCBwKSwgcyk7XG4gICAgY29uc3QgcU1pbnVzUENyb3NzUiA9IGNyb3NzUHJvZHVjdChzdWJ0cmFjdChxLCBwKSwgcik7XG5cbiAgICBpZiAockNyb3NzUyA9PT0gMCAmJiBxTWludXNQQ3Jvc3NSID09PSAwKSB7XG4gICAgICAvLyBMaW5lcyBhcmUgY29sbGluZWFyXG4gICAgICAvLyBUT0RPOiBjaGVjayBpZiBsaW5lcyBvdmVybGFwXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAockNyb3NzUyA9PT0gMCAmJiBxTWludXNQQ3Jvc3NSICE9PSAwKSB7XG4gICAgICAvLyBMaW5lcyBhcmUgcGFyYWxsZWxcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHQgPSBxTWludXNQQ3Jvc3NTIC8gckNyb3NzUztcbiAgICByZXR1cm4gKHQgPj0gMCAmJiB0IDw9IDEpID8gYWRkKHAsIG11bHRpcGx5KHIsIHQpKSA6IG51bGw7XG4gIH1cblxuICAvLyBJdCByZWFsbHkgd291bGQndmUgYmVlbiBzbyBtdWNoIGVhc2llciBpZiB0aGUgZWFydGggd2FzIGZsYXRcbiAgcmV0dXJuIHBhdGgucmVkdWNlKChwYXRoU3RhdHMsIGN1clBvaW50LCBjdXJQb2ludEluZGV4KSA9PiB7XG4gICAgaWYgKGN1clBvaW50ID09PSBzdGFydCkge1xuICAgICAgcmV0dXJuIHBhdGhTdGF0cztcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2UG9pbnQgPSBwYXRoW2N1clBvaW50SW5kZXggLSAxXTtcblxuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVN0YXJ0VG9DdXJQb2ludCA9IEdlb2Rlc2ljLkludmVyc2UoLi4uc3RhcnQsIC4uLmN1clBvaW50KS5zMTI7XG5cbiAgICAvLyBUaGlzIGlzIG5vdCB0aGUgY2xvc2VzdCBwb2ludCwgYnV0IHJvdWdoIGVzdGltYXRpb24gc2hvdWxkIGJlIGdvb2QgZW5vdWdoIHNpbmNlIHdlIG9ubHkgbmVlZFxuICAgIC8vIHRoZSBkaXJlY3Rpb24gYW5kIGluIG1vc3QgcGxhY2VzIG9uIGVhcnRoIGN1cnZhdHVyZSBpc24ndCBsYXJnZSBlbm91Z2ggdG8gY2F1c2UgYW55XG4gICAgLy8gc2lnbmlmaWNhbnQgZGlzdG9ydGlvbnMgd2l0aCBzdWNoIHNtYWxsIGVycm9yc1xuICAgIGNvbnN0IGNsb3NlUG9pbnRPblN0cmFpZ2h0TGluZSA9IHN0cmFpZ2h0TGluZVBvaW50KGRpc3RhbmNlRnJvbVN0YXJ0VG9DdXJQb2ludCk7XG4gICAgY29uc3QgZ3VpZGVQb2ludE9uU3RyYWlnaHRMaW5lID0gc3RyYWlnaHRMaW5lUG9pbnQoZGlzdGFuY2VGcm9tU3RhcnRUb0N1clBvaW50ICsgNSk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhjbG9zZVBvaW50T25TdHJhaWdodExpbmUsIGd1aWRlUG9pbnRPblN0cmFpZ2h0TGluZSk7XG4gICAgY29uc3Qgc3RyYWlnaHRMaW5lRGlyZWN0aW9uVmVjdG9yID0gc3VidHJhY3QoXG4gICAgICBndWlkZVBvaW50T25TdHJhaWdodExpbmUsXG4gICAgICBjbG9zZVBvaW50T25TdHJhaWdodExpbmVcbiAgICApO1xuXG4gICAgY29uc3QgcG9pbnRzRGlmZmVyZW5jZU5vcm1hbCA9IHN1YnRyYWN0KGN1clBvaW50LCBwcmV2UG9pbnQpO1xuXG4gICAgY29uc3QgcGF0aEludGVyc2VjdGlvbldpdGhTdHJhaWdodExpbmUgPSBpbnRlcnNlY3RWZWN0b3JBbmRMaW5lKFxuICAgICAgcHJldlBvaW50LFxuICAgICAgcG9pbnRzRGlmZmVyZW5jZU5vcm1hbCxcbiAgICAgIGNsb3NlUG9pbnRPblN0cmFpZ2h0TGluZSxcbiAgICAgIHN0cmFpZ2h0TGluZURpcmVjdGlvblZlY3RvcixcbiAgICApO1xuXG4gICAgY29uc3QgcHJldlBvaW50UHJvamVjdGlvbiA9IGludGVyc2VjdExpbmVzKFxuICAgICAgY2xvc2VQb2ludE9uU3RyYWlnaHRMaW5lLFxuICAgICAgc3RyYWlnaHRMaW5lRGlyZWN0aW9uVmVjdG9yLFxuICAgICAgcHJldlBvaW50LFxuICAgICAgZ2V0UGVycGVuZGljdWxhcihzdHJhaWdodExpbmVEaXJlY3Rpb25WZWN0b3IpLFxuICAgICk7XG5cbiAgICBjb25zdCBjdXJQb2ludFByb2plY3Rpb24gPSBpbnRlcnNlY3RMaW5lcyhcbiAgICAgIGNsb3NlUG9pbnRPblN0cmFpZ2h0TGluZSxcbiAgICAgIHN0cmFpZ2h0TGluZURpcmVjdGlvblZlY3RvcixcbiAgICAgIGN1clBvaW50LFxuICAgICAgZ2V0UGVycGVuZGljdWxhcihzdHJhaWdodExpbmVEaXJlY3Rpb25WZWN0b3IpLFxuICAgICk7XG5cbiAgICBjb25zdCBnZXROZXdBcmVhID0gKCkgPT4ge1xuICAgICAgaWYgKHBhdGhJbnRlcnNlY3Rpb25XaXRoU3RyYWlnaHRMaW5lICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0VHJpYW5nbGVBcmVhID0gKFxuICAgICAgICAgIDAuNVxuICAgICAgICAgICogZGlzdGFuY2UocHJldlBvaW50UHJvamVjdGlvbiwgcHJldlBvaW50KVxuICAgICAgICAgICogZGlzdGFuY2UocHJldlBvaW50UHJvamVjdGlvbiwgcGF0aEludGVyc2VjdGlvbldpdGhTdHJhaWdodExpbmUpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHNlY29uZFRyaWFuZ2xlQXJlYSA9IChcbiAgICAgICAgICAwLjVcbiAgICAgICAgICAqIGRpc3RhbmNlKGN1clBvaW50UHJvamVjdGlvbiwgY3VyUG9pbnQpXG4gICAgICAgICAgKiBkaXN0YW5jZShjdXJQb2ludFByb2plY3Rpb24sIHBhdGhJbnRlcnNlY3Rpb25XaXRoU3RyYWlnaHRMaW5lKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZmlyc3RUcmlhbmdsZUFyZWEgKyBzZWNvbmRUcmlhbmdsZUFyZWE7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyYXBlem9pZEZpcnN0QmFzZUxlbmd0aCA9IGRpc3RhbmNlKHByZXZQb2ludFByb2plY3Rpb24sIHByZXZQb2ludCk7XG4gICAgICBjb25zdCB0cmFwZXpvaWRTZWNvbmRCYXNlTGVuZ3RoID0gZGlzdGFuY2UoY3VyUG9pbnRQcm9qZWN0aW9uLCBjdXJQb2ludCk7XG4gICAgICBjb25zdCB0cmFwZXpvaWRIZWlnaHQgPSBkaXN0YW5jZShwcmV2UG9pbnRQcm9qZWN0aW9uLCBjdXJQb2ludFByb2plY3Rpb24pO1xuICAgICAgY29uc3QgdHJhcGV6b2lkQXJlYSA9IChcbiAgICAgICAgMC41ICogKHRyYXBlem9pZEZpcnN0QmFzZUxlbmd0aCArIHRyYXBlem9pZFNlY29uZEJhc2VMZW5ndGgpICogdHJhcGV6b2lkSGVpZ2h0XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gdHJhcGV6b2lkQXJlYTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNHb2luZ0ZvcndhcmQgPSBkb3RQcm9kdWN0KHBvaW50c0RpZmZlcmVuY2VOb3JtYWwsIHN0cmFpZ2h0TGluZURpcmVjdGlvblZlY3RvcikgPiAwO1xuICAgIGNvbnN0IGFyZWFNdWx0aXBsaWVyID0gaXNHb2luZ0ZvcndhcmQgPyAxIDogLTE7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGF0aFN0YXRzLFxuICAgICAgYXJlYVN1bTogcGF0aFN0YXRzLmFyZWFTdW0gKyBhcmVhTXVsdGlwbGllciAqIGdldE5ld0FyZWEoKSxcbiAgICAgIHRvdGFsUGF0aExlbmd0aDogcGF0aFN0YXRzLnRvdGFsUGF0aExlbmd0aCArIGRpc3RhbmNlKHByZXZQb2ludCwgY3VyUG9pbnQpLFxuICAgIH07XG4gIH0sIHtcbiAgICBzdHJhaWdodExpbmVMZW5ndGg6IHN0cmFpZ2h0TGluZS5zMTMsXG4gICAgYXJlYVN1bTogMCxcbiAgICB0b3RhbFBhdGhMZW5ndGg6IDAsXG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IGdldFBhdGhTdGF0cztcbiIsImltcG9ydCAqIGFzIHhtbFBhcnNlciBmcm9tICdmYXN0LXhtbC1wYXJzZXInO1xuaW1wb3J0IGdldFBhdGhTdGF0cyBmcm9tICcuL2dldFBhdGhTdGF0cyc7XG5cbmNvbnN0IGdweEZpbGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdncHhGaWxlJyk7XG5jb25zdCBzdGFydExhdElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0TGF0Jyk7XG5jb25zdCBzdGFydExvbklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0TG9uJyk7XG5jb25zdCBlbmRMYXRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmRMYXQnKTtcbmNvbnN0IGVuZExvbklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VuZExvbicpO1xuY29uc3QgZ2V0U2NvcmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2V0U2NvcmUnKTtcbmNvbnN0IGluZm9CbG9jayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvQmxvY2snKTtcbmNvbnN0IHNjb3JlQmxvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmVCbG9jaycpO1xuXG5zdGFydExhdElucHV0LnZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N0YXJ0TGF0SW5wdXQnKTtcbnN0YXJ0TG9uSW5wdXQudmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc3RhcnRMb25JbnB1dCcpO1xuZW5kTGF0SW5wdXQudmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZW5kTGF0SW5wdXQnKTtcbmVuZExvbklucHV0LnZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2VuZExvbklucHV0Jyk7XG53aW5kb3cub25iZWZvcmV1bmxvYWQgPSAoKSA9PiB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzdGFydExhdElucHV0Jywgc3RhcnRMYXRJbnB1dC52YWx1ZSk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzdGFydExvbklucHV0Jywgc3RhcnRMb25JbnB1dC52YWx1ZSk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbmRMYXRJbnB1dCcsIGVuZExhdElucHV0LnZhbHVlKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VuZExvbklucHV0JywgZW5kTG9uSW5wdXQudmFsdWUpO1xufTtcblxuY29uc3Qgc2hvd1dhcm5pbmcgPSAod2FybmluZykgPT4ge1xuICBpbmZvQmxvY2suaW5uZXJUZXh0ID0gd2FybmluZztcbiAgaW5mb0Jsb2NrLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcbmNvbnN0IGhpZGVJbmZvQmxvY2sgPSAoKSA9PiB7XG4gIGluZm9CbG9jay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxud2luZG93Lm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgaW5mb0Jsb2NrLmlubmVyVGV4dCA9IChcbiAgICBgQW4gZXJyb3IgaGFzIG9jY3VyZWQuIEVuc3VyZSB0aGUgZ3B4IGZpbGUgYW5kIHN0YXJ0L2VuZCBsb2NhdGlvbnMgYXJlIHJpZ2h0LlxuICAgIElmIHRoZSBlcnJvciBpcyBzdGlsbCBwcmVzZW50LCBzZW5kIHRoaXMgbWVzc2FnZSBhbmQgeW91ciAuZ3B4IGZpbGUgdG8gdGhlIGF1dGhvcjpcbiAgICAke2Vycm9yfWBcbiAgKTtcbiAgaW5mb0Jsb2NrLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcblxuZ3B4RmlsZUlucHV0Lm9uaW5wdXQgPSAoKSA9PiBoaWRlSW5mb0Jsb2NrKCk7XG5zdGFydExhdElucHV0Lm9uaW5wdXQgPSAoKSA9PiBoaWRlSW5mb0Jsb2NrKCk7XG5zdGFydExvbklucHV0Lm9uaW5wdXQgPSAoKSA9PiBoaWRlSW5mb0Jsb2NrKCk7XG5lbmRMYXRJbnB1dC5vbmlucHV0ID0gKCkgPT4gaGlkZUluZm9CbG9jaygpO1xuZW5kTG9uSW5wdXQub25pbnB1dCA9ICgpID0+IGhpZGVJbmZvQmxvY2soKTtcblxuZ2V0U2NvcmVCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgaWYgKFxuICAgICFncHhGaWxlSW5wdXQudmFsdWVcbiAgICB8fCAhc3RhcnRMYXRJbnB1dC52YWx1ZVxuICAgIHx8ICFzdGFydExvbklucHV0LnZhbHVlXG4gICAgfHwgIWVuZExhdElucHV0LnZhbHVlXG4gICAgfHwgIWVuZExvbklucHV0LnZhbHVlXG4gICkge1xuICAgIHNob3dXYXJuaW5nKCdOb3QgYWxsIGlucHV0cyBoYXZlIGJlZW4gZmlsbGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgcmVhZGVyLnJlYWRBc1RleHQoZ3B4RmlsZUlucHV0LmZpbGVzWzBdKTtcbiAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICBjb25zdCBncHhEYXRhID0geG1sUGFyc2VyLnBhcnNlKHJlYWRlci5yZXN1bHQsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IGZhbHNlLFxuICAgICAgYXJyYXlNb2RlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdHJhY2tTZWdtZW50cyA9IGdweERhdGEuZ3B4WzBdLnRya1swXS50cmtzZWc7XG4gICAgY29uc3QgdHJhY2tQb2ludHMgPSB0cmFja1NlZ21lbnRzLm1hcCgoc2VnbWVudCkgPT4gc2VnbWVudC50cmtwdCkuZmxhdCgpO1xuICAgIGNvbnN0IHBhdGggPSB0cmFja1BvaW50cy5tYXAoXG4gICAgICAodHJhY2tQb2ludCkgPT4gW051bWJlcih0cmFja1BvaW50WydAX2xhdCddKSwgTnVtYmVyKHRyYWNrUG9pbnRbJ0BfbG9uJ10pXVxuICAgICk7XG5cbiAgICBjb25zdCBzdGFydCA9IFtOdW1iZXIoc3RhcnRMYXRJbnB1dC52YWx1ZSksIE51bWJlcihzdGFydExvbklucHV0LnZhbHVlKV07XG4gICAgY29uc3QgZW5kID0gW051bWJlcihlbmRMYXRJbnB1dC52YWx1ZSksIE51bWJlcihlbmRMb25JbnB1dC52YWx1ZSldO1xuXG4gICAgY29uc3Qge1xuICAgICAgc3RyYWlnaHRMaW5lTGVuZ3RoLFxuICAgICAgdG90YWxQYXRoTGVuZ3RoLFxuICAgICAgYXJlYVN1bSxcbiAgICB9ID0gZ2V0UGF0aFN0YXRzKFtzdGFydCwgLi4ucGF0aCwgZW5kXSk7XG5cbiAgICBjb25zdCBuaWNlaWZ5ID0gKG51bWJlcikgPT4gbnVtYmVyLnRvRml4ZWQoMik7XG5cbiAgICBzY29yZUJsb2NrLmlubmVyVGV4dCA9IGBcbiAgICBTdHJhaWdodCBsaW5lIGxlbmd0aDogJHtuaWNlaWZ5KHN0cmFpZ2h0TGluZUxlbmd0aCl9bVxuICAgIFlvdXIgcGF0aCBsZW5ndGg6ICR7bmljZWlmeSh0b3RhbFBhdGhMZW5ndGgpfW1cbiAgICBBcmVhIHN1bTogJHtuaWNlaWZ5KGFyZWFTdW0pfW1eMlxuICAgIEF2ZXJhZ2UgZGV2aWF0aW9uIChhcmVhIHN1bSAvIHN0cmFpZ2h0IGxpbmUgbGVuZ3RoKTogJHtuaWNlaWZ5KGFyZWFTdW0gLyBzdHJhaWdodExpbmVMZW5ndGgpfW1cblxuICAgIElmIHRoaXMgZG9lc24ndCBsb29rIHJpZ2h0IHRvIHlvdSBwbGVhc2Ugc2VuZCBtZSB5b3VyIC5ncHggZmlsZSBhbmQgc3RyYWlnaHQgbGluZSBzdGFydC9lbmRcbiAgICBgO1xuICB9O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=